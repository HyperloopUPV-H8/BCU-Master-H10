#include "main.h"
#include "lwip.h"

#include "ST-LIB.hpp"
#include "Runes/Runes.hpp"

DigitalOutput *led;
const uint16_t size = 1000;
uint16_t data_size = size;
int16_t data_array[size]{0};
ALIGN_32BYTES(static int16_t data_result[size]);

void tog(){
	led->toggle();
}


static void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
}

int main(void)
{
	MPU_Config();
	led = new DigitalOutput(PE1);
	for(int i = 0; i < data_size; i++){
		data_array[i] = 10000 + i;
	}

	MultiplierAccelerator::FIR_software_in_software_out_inscribe(2,8,8);
	STLIB::start("192.168.0.14");

	MultiplierAccelerator::MemoryLayout.FFilterCoeffs[0] = 32767;
	MultiplierAccelerator::MemoryLayout.FFilterCoeffs[1] = 32767;
	while(!MultiplierAccelerator::is_ready()){}
	MultiplierAccelerator::software_process(data_result, &data_size);
	while(!MultiplierAccelerator::is_ready()){}
	MultiplierAccelerator::software_load(data_array, &data_size);
	while(!MultiplierAccelerator::is_ready()){}
	MultiplierAccelerator::software_end_process();
	SCB_CleanInvalidateDCache_by_Addr( (uint32_t*)&data_result, sizeof(data_result));
	while(1) {
		STLIB::update();
		if(data_result[0] != 0){
			ErrorHandler("Its working");
		}
	}
}

void Error_Handler(void)
{
	ErrorHandler("HAL error handler triggered");
	while (1){}
}
