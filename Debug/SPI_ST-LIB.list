
SPI_ST-LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccac  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d004  0800d004  0001d004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d00c  0800d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d010  0800d010  0001d010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800d014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009a0  24000010  0800d024  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009b0  0800d024  000209b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002af5a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bc3  00000000  00000000  0004af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f50  00000000  00000000  0004eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e08  00000000  00000000  00050ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dfcd  00000000  00000000  000528b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027fce  00000000  00000000  00090885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00188abf  00000000  00000000  000b8853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00241312  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a80  00000000  00000000  00241364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800cf60 	.word	0x0800cf60

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800cf60 	.word	0x0800cf60

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f002 fdd4 	bl	80031c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f836 	bl	8000688 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800061c:	f000 f8be 	bl	800079c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f001 fc2c 	bl	8001e7c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000624:	f000 f8ec 	bl	8000800 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000628:	f000 fa36 	bl	8000a98 <_ZL12MX_ADC2_Initv>
  MX_ADC3_Init();
 800062c:	f000 faba 	bl	8000ba4 <_ZL12MX_ADC3_Initv>
  MX_FDCAN1_Init();
 8000630:	f000 fbe2 	bl	8000df8 <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 8000634:	f000 fde6 	bl	8001204 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000638:	f000 feba 	bl	80013b0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800063c:	f000 ff52 	bl	80014e4 <_ZL12MX_TIM4_Initv>
  MX_TIM8_Init();
 8000640:	f000 ffea 	bl	8001618 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 8000644:	f001 f84c 	bl	80016e0 <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 8000648:	f001 fa72 	bl	8001b30 <_ZL13MX_TIM23_Initv>
  MX_USART1_UART_Init();
 800064c:	f001 fb26 	bl	8001c9c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000650:	f001 fb84 	bl	8001d5c <_ZL19MX_USART2_UART_Initv>
  MX_CORDIC_Init();
 8000654:	f000 fbb8 	bl	8000dc8 <_ZL14MX_CORDIC_Initv>
  MX_FMAC_Init();
 8000658:	f000 fca2 	bl	8000fa0 <_ZL12MX_FMAC_Initv>
  MX_RTC_Init();
 800065c:	f000 fd4a 	bl	80010f4 <_ZL11MX_RTC_Initv>
  MX_TIM15_Init();
 8000660:	f001 f89e 	bl	80017a0 <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 8000664:	f001 f948 	bl	80018f8 <_ZL13MX_TIM16_Initv>
  MX_FDCAN3_Init();
 8000668:	f000 fc30 	bl	8000ecc <_ZL14MX_FDCAN3_Initv>
  MX_TIM17_Init();
 800066c:	f001 f9d2 	bl	8001a14 <_ZL13MX_TIM17_Initv>
  MX_SPI3_Init();
 8000670:	f000 fd6e 	bl	8001150 <_ZL12MX_SPI3_Initv>
  MX_LPTIM1_Init();
 8000674:	f000 fcac 	bl	8000fd0 <_ZL14MX_LPTIM1_Initv>
  MX_LPTIM2_Init();
 8000678:	f000 fcdc 	bl	8001034 <_ZL14MX_LPTIM2_Initv>
  MX_DMA_Init();
 800067c:	f001 fbce 	bl	8001e1c <_ZL11MX_DMA_Initv>
  MX_LPTIM3_Init();
 8000680:	f000 fd0a 	bl	8001098 <_ZL14MX_LPTIM3_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x74>
	...

08000688 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	; 0x70
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000692:	224c      	movs	r2, #76	; 0x4c
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00c fc5a 	bl	800cf50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2220      	movs	r2, #32
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00c fc54 	bl	800cf50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f006 ff29 	bl	8007500 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <_Z18SystemClock_Configv+0x10c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <_Z18SystemClock_Configv+0x10c>)
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <_Z18SystemClock_Configv+0x10c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <_Z18SystemClock_Configv+0x10c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d000      	beq.n	80006e4 <_Z18SystemClock_Configv+0x5c>
 80006e2:	e7f2      	b.n	80006ca <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <_Z18SystemClock_Configv+0x110>)
 80006e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e8:	f023 0303 	bic.w	r3, r3, #3
 80006ec:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <_Z18SystemClock_Configv+0x110>)
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006f4:	2309      	movs	r3, #9
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070a:	2304      	movs	r3, #4
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800070e:	f240 1313 	movw	r3, #275	; 0x113
 8000712:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000720:	2304      	movs	r3, #4
 8000722:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000724:	2300      	movs	r3, #0
 8000726:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4618      	mov	r0, r3
 8000732:	f006 ff1f 	bl	8007574 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000746:	f001 fc7d 	bl	8002044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	233f      	movs	r3, #63	; 0x3f
 800074c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000756:	2308      	movs	r3, #8
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2103      	movs	r1, #3
 8000770:	4618      	mov	r0, r3
 8000772:	f007 faad 	bl	8007cd0 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8000786:	f001 fc5d 	bl	8002044 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3770      	adds	r7, #112	; 0x70
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800
 8000798:	58024400 	.word	0x58024400

0800079c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0ae      	sub	sp, #184	; 0xb8
 80007a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	22b4      	movs	r2, #180	; 0xb4
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00c fbd1 	bl	800cf50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007b2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80007b8:	2318      	movs	r3, #24
 80007ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c8:	23c0      	movs	r3, #192	; 0xc0
 80007ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fe03 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bf14      	ite	ne
 80007e8:	2301      	movne	r3, #1
 80007ea:	2300      	moveq	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 80007f2:	f001 fc27 	bl	8002044 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	37b8      	adds	r7, #184	; 0xb8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2224      	movs	r2, #36	; 0x24
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f00c fb99 	bl	800cf50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800081e:	4b92      	ldr	r3, [pc, #584]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000820:	4a92      	ldr	r2, [pc, #584]	; (8000a6c <_ZL12MX_ADC1_Initv+0x26c>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000824:	4b90      	ldr	r3, [pc, #576]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800082a:	4b8f      	ldr	r3, [pc, #572]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000830:	4b8d      	ldr	r3, [pc, #564]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000832:	2201      	movs	r2, #1
 8000834:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000836:	4b8c      	ldr	r3, [pc, #560]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000838:	2208      	movs	r2, #8
 800083a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800083c:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 800083e:	2200      	movs	r2, #0
 8000840:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000842:	4b89      	ldr	r3, [pc, #548]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000844:	2200      	movs	r2, #0
 8000846:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8000848:	4b87      	ldr	r3, [pc, #540]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 800084a:	220a      	movs	r2, #10
 800084c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b86      	ldr	r3, [pc, #536]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM1_OUT;
 8000856:	4b84      	ldr	r3, [pc, #528]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000858:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800085e:	4b82      	ldr	r3, [pc, #520]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000866:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000868:	2203      	movs	r2, #3
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086c:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000872:	4b7d      	ldr	r3, [pc, #500]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000874:	2200      	movs	r2, #0
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000878:	4b7b      	ldr	r3, [pc, #492]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000880:	4879      	ldr	r0, [pc, #484]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000882:	f002 ff8b 	bl	800379c <HAL_ADC_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 8000896:	f001 fbd5 	bl	8002044 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4870      	ldr	r0, [pc, #448]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 80008a6:	f003 ffbf 	bl	8004828 <HAL_ADCEx_MultiModeConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 80008ba:	f001 fbc3 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008be:	4b6c      	ldr	r3, [pc, #432]	; (8000a70 <_ZL12MX_ADC1_Initv+0x270>)
 80008c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4861      	ldr	r0, [pc, #388]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 80008e4:	f003 f962 	bl	8003bac <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 80008f8:	f001 fba4 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008fc:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <_ZL12MX_ADC1_Initv+0x274>)
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000900:	230c      	movs	r3, #12
 8000902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4857      	ldr	r0, [pc, #348]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 800090a:	f003 f94f 	bl	8003bac <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <_ZL12MX_ADC1_Initv+0x122>
  {
    Error_Handler();
 800091e:	f001 fb91 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000922:	4b55      	ldr	r3, [pc, #340]	; (8000a78 <_ZL12MX_ADC1_Initv+0x278>)
 8000924:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000926:	2312      	movs	r3, #18
 8000928:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	484e      	ldr	r0, [pc, #312]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000930:	f003 f93c 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <_ZL12MX_ADC1_Initv+0x148>
  {
    Error_Handler();
 8000944:	f001 fb7e 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <_ZL12MX_ADC1_Initv+0x27c>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800094c:	2318      	movs	r3, #24
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4844      	ldr	r0, [pc, #272]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000956:	f003 f929 	bl	8003bac <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf14      	ite	ne
 8000960:	2301      	movne	r3, #1
 8000962:	2300      	moveq	r3, #0
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <_ZL12MX_ADC1_Initv+0x16e>
  {
    Error_Handler();
 800096a:	f001 fb6b 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <_ZL12MX_ADC1_Initv+0x280>)
 8000970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	483a      	ldr	r0, [pc, #232]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 800097e:	f003 f915 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_ZL12MX_ADC1_Initv+0x196>
  {
    Error_Handler();
 8000992:	f001 fb57 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <_ZL12MX_ADC1_Initv+0x284>)
 8000998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800099a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800099e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4830      	ldr	r0, [pc, #192]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 80009a6:	f003 f901 	bl	8003bac <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL12MX_ADC1_Initv+0x1be>
  {
    Error_Handler();
 80009ba:	f001 fb43 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009be:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <_ZL12MX_ADC1_Initv+0x288>)
 80009c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009c2:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 80009ce:	f003 f8ed 	bl	8003bac <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_ZL12MX_ADC1_Initv+0x1e6>
  {
    Error_Handler();
 80009e2:	f001 fb2f 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <_ZL12MX_ADC1_Initv+0x28c>)
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009ea:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 80009f6:	f003 f8d9 	bl	8003bac <HAL_ADC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_ZL12MX_ADC1_Initv+0x20e>
  {
    Error_Handler();
 8000a0a:	f001 fb1b 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <_ZL12MX_ADC1_Initv+0x290>)
 8000a10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a12:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000a16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4812      	ldr	r0, [pc, #72]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000a1e:	f003 f8c5 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bf14      	ite	ne
 8000a28:	2301      	movne	r3, #1
 8000a2a:	2300      	moveq	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <_ZL12MX_ADC1_Initv+0x236>
  {
    Error_Handler();
 8000a32:	f001 fb07 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <_ZL12MX_ADC1_Initv+0x294>)
 8000a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <_ZL12MX_ADC1_Initv+0x268>)
 8000a46:	f003 f8b1 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <_ZL12MX_ADC1_Initv+0x25e>
  {
    Error_Handler();
 8000a5a:	f001 faf3 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	; 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2400002c 	.word	0x2400002c
 8000a6c:	40022000 	.word	0x40022000
 8000a70:	08600004 	.word	0x08600004
 8000a74:	0c900008 	.word	0x0c900008
 8000a78:	14f00020 	.word	0x14f00020
 8000a7c:	19200040 	.word	0x19200040
 8000a80:	25b00200 	.word	0x25b00200
 8000a84:	2a000400 	.word	0x2a000400
 8000a88:	3ef08000 	.word	0x3ef08000
 8000a8c:	43210000 	.word	0x43210000
 8000a90:	4b840000 	.word	0x4b840000
 8000a94:	4fb80000 	.word	0x4fb80000

08000a98 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2224      	movs	r2, #36	; 0x24
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00c fa53 	bl	800cf50 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000aac:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <_ZL12MX_ADC2_Initv+0x100>)
 8000aae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000ab6:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ac2:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM2_OUT;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000ae4:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000af4:	2203      	movs	r2, #3
 8000af6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b0c:	4821      	ldr	r0, [pc, #132]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000b0e:	f002 fe45 	bl	800379c <HAL_ADC_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <_ZL12MX_ADC2_Initv+0x8e>
  {
    Error_Handler();
 8000b22:	f001 fa8f 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <_ZL12MX_ADC2_Initv+0x104>)
 8000b28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b32:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b36:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000b4c:	f003 f82e 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf14      	ite	ne
 8000b56:	2301      	movne	r3, #1
 8000b58:	2300      	moveq	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <_ZL12MX_ADC2_Initv+0xcc>
  {
    Error_Handler();
 8000b60:	f001 fa70 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <_ZL12MX_ADC2_Initv+0x108>)
 8000b66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <_ZL12MX_ADC2_Initv+0xfc>)
 8000b72:	f003 f81b 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <_ZL12MX_ADC2_Initv+0xf2>
  {
    Error_Handler();
 8000b86:	f001 fa5d 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400009c 	.word	0x2400009c
 8000b98:	40022100 	.word	0x40022100
 8000b9c:	08600004 	.word	0x08600004
 8000ba0:	19200040 	.word	0x19200040

08000ba4 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2224      	movs	r2, #36	; 0x24
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00c f9cd 	bl	800cf50 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bb6:	4b7b      	ldr	r3, [pc, #492]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bb8:	4a7b      	ldr	r2, [pc, #492]	; (8000da8 <_ZL12MX_ADC3_Initv+0x204>)
 8000bba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bbc:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc2:	4b78      	ldr	r3, [pc, #480]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000bc8:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bce:	4b75      	ldr	r3, [pc, #468]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd4:	4b73      	ldr	r3, [pc, #460]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bda:	4b72      	ldr	r3, [pc, #456]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000be0:	4b70      	ldr	r3, [pc, #448]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 8;
 8000be6:	4b6f      	ldr	r3, [pc, #444]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000be8:	2208      	movs	r2, #8
 8000bea:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bec:	4b6d      	ldr	r3, [pc, #436]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM3_OUT;
 8000bf4:	4b6b      	ldr	r3, [pc, #428]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bf6:	f44f 62d0 	mov.w	r2, #1664	; 0x680
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bfc:	4b69      	ldr	r3, [pc, #420]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000c04:	4b67      	ldr	r3, [pc, #412]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c0c:	4b65      	ldr	r3, [pc, #404]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c12:	4b64      	ldr	r3, [pc, #400]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c14:	2203      	movs	r2, #3
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c18:	4b62      	ldr	r3, [pc, #392]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c1e:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c24:	4b5f      	ldr	r3, [pc, #380]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c2c:	485d      	ldr	r0, [pc, #372]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c2e:	f002 fdb5 	bl	800379c <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	bf14      	ite	ne
 8000c38:	2301      	movne	r3, #1
 8000c3a:	2300      	moveq	r3, #0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <_ZL12MX_ADC3_Initv+0xa2>
  {
    Error_Handler();
 8000c42:	f001 f9ff 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c56:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	484d      	ldr	r0, [pc, #308]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c70:	f002 ff9c 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf14      	ite	ne
 8000c7a:	2301      	movne	r3, #1
 8000c7c:	2300      	moveq	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <_ZL12MX_ADC3_Initv+0xe4>
  {
    Error_Handler();
 8000c84:	f001 f9de 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <_ZL12MX_ADC3_Initv+0x208>)
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4843      	ldr	r0, [pc, #268]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000c96:	f002 ff89 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf14      	ite	ne
 8000ca0:	2301      	movne	r3, #1
 8000ca2:	2300      	moveq	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <_ZL12MX_ADC3_Initv+0x10a>
  {
    Error_Handler();
 8000caa:	f001 f9cb 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cae:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <_ZL12MX_ADC3_Initv+0x20c>)
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	483a      	ldr	r0, [pc, #232]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000cbc:	f002 ff76 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bf14      	ite	ne
 8000cc6:	2301      	movne	r3, #1
 8000cc8:	2300      	moveq	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <_ZL12MX_ADC3_Initv+0x130>
  {
    Error_Handler();
 8000cd0:	f001 f9b8 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cd4:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <_ZL12MX_ADC3_Initv+0x210>)
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cd8:	2318      	movs	r3, #24
 8000cda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4830      	ldr	r0, [pc, #192]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000ce2:	f002 ff63 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf14      	ite	ne
 8000cec:	2301      	movne	r3, #1
 8000cee:	2300      	moveq	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <_ZL12MX_ADC3_Initv+0x156>
  {
    Error_Handler();
 8000cf6:	f001 f9a5 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <_ZL12MX_ADC3_Initv+0x214>)
 8000cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4826      	ldr	r0, [pc, #152]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000d0a:	f002 ff4f 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_ZL12MX_ADC3_Initv+0x17e>
  {
    Error_Handler();
 8000d1e:	f001 f991 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <_ZL12MX_ADC3_Initv+0x218>)
 8000d24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d26:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481c      	ldr	r0, [pc, #112]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000d32:	f002 ff3b 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <_ZL12MX_ADC3_Initv+0x1a6>
  {
    Error_Handler();
 8000d46:	f001 f97d 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <_ZL12MX_ADC3_Initv+0x21c>)
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d4e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4812      	ldr	r0, [pc, #72]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000d5a:	f002 ff27 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <_ZL12MX_ADC3_Initv+0x1ce>
  {
    Error_Handler();
 8000d6e:	f001 f969 	bl	8002044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <_ZL12MX_ADC3_Initv+0x220>)
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d76:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <_ZL12MX_ADC3_Initv+0x200>)
 8000d82:	f002 ff13 	bl	8003bac <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <_ZL12MX_ADC3_Initv+0x1f6>
  {
    Error_Handler();
 8000d96:	f001 f955 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2400010c 	.word	0x2400010c
 8000da8:	58026000 	.word	0x58026000
 8000dac:	04300002 	.word	0x04300002
 8000db0:	08600004 	.word	0x08600004
 8000db4:	0c900008 	.word	0x0c900008
 8000db8:	10c00010 	.word	0x10c00010
 8000dbc:	19200040 	.word	0x19200040
 8000dc0:	1d500080 	.word	0x1d500080
 8000dc4:	21800100 	.word	0x21800100

08000dc8 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_ZL14MX_CORDIC_Initv+0x28>)
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <_ZL14MX_CORDIC_Initv+0x2c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000dd2:	4807      	ldr	r0, [pc, #28]	; (8000df0 <_ZL14MX_CORDIC_Initv+0x28>)
 8000dd4:	f003 fe0a 	bl	80049ec <HAL_CORDIC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8000de8:	f001 f92c 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	240002e4 	.word	0x240002e4
 8000df4:	48024400 	.word	0x48024400

08000df8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000dfe:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <_ZL14MX_FDCAN1_Initv+0xd0>)
 8000e00:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e22:	2210      	movs	r2, #16
 8000e24:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e2e:	2202      	movs	r2, #2
 8000e30:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8000ea6:	f005 fba3 	bl	80065f0 <HAL_FDCAN_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <_ZL14MX_FDCAN1_Initv+0xc6>
  {
    Error_Handler();
 8000eba:	f001 f8c3 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2400030c 	.word	0x2400030c
 8000ec8:	4000a000 	.word	0x4000a000

08000ecc <_ZL14MX_FDCAN3_Initv>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <_ZL14MX_FDCAN3_Initv+0xd0>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000ef4:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <_ZL14MX_FDCAN3_Initv+0xcc>)
 8000f7a:	f005 fb39 	bl	80065f0 <HAL_FDCAN_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <_ZL14MX_FDCAN3_Initv+0xc6>
  {
    Error_Handler();
 8000f8e:	f001 f859 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240003ac 	.word	0x240003ac
 8000f9c:	4000d400 	.word	0x4000d400

08000fa0 <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_ZL12MX_FMAC_Initv+0x28>)
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <_ZL12MX_FMAC_Initv+0x2c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <_ZL12MX_FMAC_Initv+0x28>)
 8000fac:	f005 fe84 	bl	8006cb8 <HAL_FMAC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf14      	ite	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	2300      	moveq	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 8000fc0:	f001 f840 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400044c 	.word	0x2400044c
 8000fcc:	48024000 	.word	0x48024000

08000fd0 <_ZL14MX_LPTIM1_Initv>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <_ZL14MX_LPTIM1_Initv+0x60>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 8001008:	2200      	movs	r2, #0
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <_ZL14MX_LPTIM1_Initv+0x5c>)
 800100e:	f006 f8e5 	bl	80071dc <HAL_LPTIM_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <_ZL14MX_LPTIM1_Initv+0x56>
  {
    Error_Handler();
 8001022:	f001 f80f 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000484 	.word	0x24000484
 8001030:	40002400 	.word	0x40002400

08001034 <_ZL14MX_LPTIM2_Initv>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <_ZL14MX_LPTIM2_Initv+0x60>)
 800103c:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 800104c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001050:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <_ZL14MX_LPTIM2_Initv+0x5c>)
 8001072:	f006 f8b3 	bl	80071dc <HAL_LPTIM_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <_ZL14MX_LPTIM2_Initv+0x56>
  {
    Error_Handler();
 8001086:	f000 ffdd 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	240004bc 	.word	0x240004bc
 8001094:	58002400 	.word	0x58002400

08001098 <_ZL14MX_LPTIM3_Initv>:
  * @brief LPTIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_ZL14MX_LPTIM3_Initv+0x58>)
 80010a0:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b4:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <_ZL14MX_LPTIM3_Initv+0x54>)
 80010d0:	f006 f884 	bl	80071dc <HAL_LPTIM_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf14      	ite	ne
 80010da:	2301      	movne	r3, #1
 80010dc:	2300      	moveq	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <_ZL14MX_LPTIM3_Initv+0x50>
  {
    Error_Handler();
 80010e4:	f000 ffae 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	240004f4 	.word	0x240004f4
 80010f0:	58002800 	.word	0x58002800

080010f4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <_ZL11MX_RTC_Initv+0x58>)
 80010fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 8001106:	227f      	movs	r2, #127	; 0x7f
 8001108:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <_ZL11MX_RTC_Initv+0x54>)
 800112a:	f009 f9f1 	bl	800a510 <HAL_RTC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <_ZL11MX_RTC_Initv+0x4e>
  {
    Error_Handler();
 800113e:	f000 ff81 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2400052c 	.word	0x2400052c
 800114c:	58004000 	.word	0x58004000

08001150 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 8001156:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <_ZL12MX_SPI3_Initv+0xb0>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 800115c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001160:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 800116a:	2203      	movs	r2, #3
 800116c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 800117c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001180:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011bc:	2200      	movs	r2, #0
 80011be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011da:	2200      	movs	r2, #0
 80011dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <_ZL12MX_SPI3_Initv+0xac>)
 80011e0:	f009 faa6 	bl	800a730 <HAL_SPI_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 80011f4:	f000 ff26 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	24000550 	.word	0x24000550
 8001200:	40003c00 	.word	0x40003c00

08001204 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b098      	sub	sp, #96	; 0x60
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2234      	movs	r2, #52	; 0x34
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f00b fe8d 	bl	800cf50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001238:	4a5c      	ldr	r2, [pc, #368]	; (80013ac <_ZL12MX_TIM1_Initv+0x1a8>)
 800123a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800123c:	4b5a      	ldr	r3, [pc, #360]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001248:	4b57      	ldr	r3, [pc, #348]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 800124a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001256:	4b54      	ldr	r3, [pc, #336]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001262:	4851      	ldr	r0, [pc, #324]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001264:	f009 fbdc 	bl	800aa20 <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8001278:	f000 fee4 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001288:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800128c:	4619      	mov	r1, r3
 800128e:	4846      	ldr	r0, [pc, #280]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001290:	f00a fb7c 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf14      	ite	ne
 800129a:	2301      	movne	r3, #1
 800129c:	2300      	moveq	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 80012a4:	f000 fece 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b4:	2300      	movs	r3, #0
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4836      	ldr	r0, [pc, #216]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 80012ce:	f009 fd97 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf14      	ite	ne
 80012d8:	2301      	movne	r3, #1
 80012da:	2300      	moveq	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 80012e2:	f000 feaf 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ea:	2204      	movs	r2, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	482e      	ldr	r0, [pc, #184]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 80012f0:	f009 fd86 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf14      	ite	ne
 80012fa:	2301      	movne	r3, #1
 80012fc:	2300      	moveq	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8001304:	f000 fe9e 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4825      	ldr	r0, [pc, #148]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001312:	f009 fd75 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <_ZL12MX_TIM1_Initv+0x126>
  {
    Error_Handler();
 8001326:	f000 fe8d 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800132a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800132e:	220c      	movs	r2, #12
 8001330:	4619      	mov	r1, r3
 8001332:	481d      	ldr	r0, [pc, #116]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001334:	f009 fd64 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <_ZL12MX_TIM1_Initv+0x148>
  {
    Error_Handler();
 8001348:	f000 fe7c 	bl	8002044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800136e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 8001382:	f00a fb9f 	bl	800bac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <_ZL12MX_TIM1_Initv+0x196>
  {
    Error_Handler();
 8001396:	f000 fe55 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <_ZL12MX_TIM1_Initv+0x1a4>)
 800139c:	f001 fbd0 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 80013a0:	bf00      	nop
 80013a2:	3760      	adds	r7, #96	; 0x60
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	240005d8 	.word	0x240005d8
 80013ac:	40010000 	.word	0x40010000

080013b0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80013d6:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <_ZL12MX_TIM3_Initv+0x130>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80013e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013fa:	4838      	ldr	r0, [pc, #224]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80013fc:	f009 fb10 	bl	800aa20 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8001410:	f000 fe18 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	482e      	ldr	r0, [pc, #184]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 8001424:	f00a fab2 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8001438:	f000 fe04 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143c:	2360      	movs	r3, #96	; 0x60
 800143e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	4822      	ldr	r0, [pc, #136]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 8001454:	f009 fcd4 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8001468:	f000 fdec 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	2204      	movs	r2, #4
 8001470:	4619      	mov	r1, r3
 8001472:	481a      	ldr	r0, [pc, #104]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 8001474:	f009 fcc4 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_ZL12MX_TIM3_Initv+0xdc>
  {
    Error_Handler();
 8001488:	f000 fddc 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	2208      	movs	r2, #8
 8001490:	4619      	mov	r1, r3
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 8001494:	f009 fcb4 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf14      	ite	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	2300      	moveq	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <_ZL12MX_TIM3_Initv+0xfc>
  {
    Error_Handler();
 80014a8:	f000 fdcc 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	220c      	movs	r2, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80014b4:	f009 fca4 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <_ZL12MX_TIM3_Initv+0x11c>
  {
    Error_Handler();
 80014c8:	f000 fdbc 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <_ZL12MX_TIM3_Initv+0x12c>)
 80014ce:	f001 fb37 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000624 	.word	0x24000624
 80014e0:	40000400 	.word	0x40000400

080014e4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 800150a:	4a42      	ldr	r2, [pc, #264]	; (8001614 <_ZL12MX_TIM4_Initv+0x130>)
 800150c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 800151c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001520:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800152e:	4838      	ldr	r0, [pc, #224]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 8001530:	f009 fa76 	bl	800aa20 <HAL_TIM_PWM_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_ZL12MX_TIM4_Initv+0x64>
  {
    Error_Handler();
 8001544:	f000 fd7e 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	482e      	ldr	r0, [pc, #184]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 8001558:	f00a fa18 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL12MX_TIM4_Initv+0x8c>
  {
    Error_Handler();
 800156c:	f000 fd6a 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001570:	2360      	movs	r3, #96	; 0x60
 8001572:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	4822      	ldr	r0, [pc, #136]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 8001588:	f009 fc3a 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <_ZL12MX_TIM4_Initv+0xbc>
  {
    Error_Handler();
 800159c:	f000 fd52 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	2204      	movs	r2, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	481a      	ldr	r0, [pc, #104]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 80015a8:	f009 fc2a 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL12MX_TIM4_Initv+0xdc>
  {
    Error_Handler();
 80015bc:	f000 fd42 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	2208      	movs	r2, #8
 80015c4:	4619      	mov	r1, r3
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 80015c8:	f009 fc1a 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf14      	ite	ne
 80015d2:	2301      	movne	r3, #1
 80015d4:	2300      	moveq	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <_ZL12MX_TIM4_Initv+0xfc>
  {
    Error_Handler();
 80015dc:	f000 fd32 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	220c      	movs	r2, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	480a      	ldr	r0, [pc, #40]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 80015e8:	f009 fc0a 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf14      	ite	ne
 80015f2:	2301      	movne	r3, #1
 80015f4:	2300      	moveq	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <_ZL12MX_TIM4_Initv+0x11c>
  {
    Error_Handler();
 80015fc:	f000 fd22 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <_ZL12MX_TIM4_Initv+0x12c>)
 8001602:	f001 fa9d 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000670 	.word	0x24000670
 8001614:	40000800 	.word	0x40000800

08001618 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	; 0x30
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2224      	movs	r2, #36	; 0x24
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f00b fc92 	bl	800cf50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 8001638:	4a28      	ldr	r2, [pc, #160]	; (80016dc <_ZL12MX_TIM8_Initv+0xc4>)
 800163a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 800164a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001662:	2301      	movs	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 800168e:	f009 fa75 	bl	800ab7c <HAL_TIM_Encoder_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 80016a2:	f000 fccf 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	4619      	mov	r1, r3
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <_ZL12MX_TIM8_Initv+0xc0>)
 80016b8:	f00a f968 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 80016cc:	f000 fcba 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3730      	adds	r7, #48	; 0x30
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	240006bc 	.word	0x240006bc
 80016dc:	40010400 	.word	0x40010400

080016e0 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 80016fa:	4a28      	ldr	r2, [pc, #160]	; (800179c <_ZL13MX_TIM12_Initv+0xbc>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 800170c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001710:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800171e:	481e      	ldr	r0, [pc, #120]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 8001720:	f009 f97e 	bl	800aa20 <HAL_TIM_PWM_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <_ZL13MX_TIM12_Initv+0x58>
  {
    Error_Handler();
 8001734:	f000 fc86 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001738:	2360      	movs	r3, #96	; 0x60
 800173a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	4812      	ldr	r0, [pc, #72]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 8001750:	f009 fb56 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZL13MX_TIM12_Initv+0x88>
  {
    Error_Handler();
 8001764:	f000 fc6e 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2204      	movs	r2, #4
 800176c:	4619      	mov	r1, r3
 800176e:	480a      	ldr	r0, [pc, #40]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 8001770:	f009 fb46 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf14      	ite	ne
 800177a:	2301      	movne	r3, #1
 800177c:	2300      	moveq	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <_ZL13MX_TIM12_Initv+0xa8>
  {
    Error_Handler();
 8001784:	f000 fc5e 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <_ZL13MX_TIM12_Initv+0xb8>)
 800178a:	f001 f9d9 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24000708 	.word	0x24000708
 800179c:	40001800 	.word	0x40001800

080017a0 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b098      	sub	sp, #96	; 0x60
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2234      	movs	r2, #52	; 0x34
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00b fbbf 	bl	800cf50 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80017d4:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <_ZL13MX_TIM15_Initv+0x154>)
 80017d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80017d8:	4b45      	ldr	r3, [pc, #276]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80017e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017fe:	483c      	ldr	r0, [pc, #240]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 8001800:	f009 f90e 	bl	800aa20 <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <_ZL13MX_TIM15_Initv+0x78>
  {
    Error_Handler();
 8001814:	f000 fc16 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001824:	4619      	mov	r1, r3
 8001826:	4832      	ldr	r0, [pc, #200]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 8001828:	f00a f8b0 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <_ZL13MX_TIM15_Initv+0xa0>
  {
    Error_Handler();
 800183c:	f000 fc02 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	2360      	movs	r3, #96	; 0x60
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800184c:	2300      	movs	r3, #0
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	4822      	ldr	r0, [pc, #136]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 8001866:	f009 facb 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf14      	ite	ne
 8001870:	2301      	movne	r3, #1
 8001872:	2300      	moveq	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <_ZL13MX_TIM15_Initv+0xde>
  {
    Error_Handler();
 800187a:	f000 fbe3 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800187e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	481a      	ldr	r0, [pc, #104]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 8001888:	f009 faba 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <_ZL13MX_TIM15_Initv+0x100>
  {
    Error_Handler();
 800189c:	f000 fbd2 	bl	8002044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80018c8:	f00a f8fc 	bl	800bac4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf14      	ite	ne
 80018d2:	2301      	movne	r3, #1
 80018d4:	2300      	moveq	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <_ZL13MX_TIM15_Initv+0x140>
  {
    Error_Handler();
 80018dc:	f000 fbb2 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <_ZL13MX_TIM15_Initv+0x150>)
 80018e2:	f001 f92d 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 80018e6:	bf00      	nop
 80018e8:	3760      	adds	r7, #96	; 0x60
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	24000754 	.word	0x24000754
 80018f4:	40014000 	.word	0x40014000

080018f8 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b094      	sub	sp, #80	; 0x50
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001912:	463b      	mov	r3, r7
 8001914:	2234      	movs	r2, #52	; 0x34
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f00b fb19 	bl	800cf50 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 8001920:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <_ZL13MX_TIM16_Initv+0x118>)
 8001922:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 8001932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001936:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800194a:	4830      	ldr	r0, [pc, #192]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 800194c:	f009 f811 	bl	800a972 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <_ZL13MX_TIM16_Initv+0x6c>
  {
    Error_Handler();
 8001960:	f000 fb70 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001964:	4829      	ldr	r0, [pc, #164]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 8001966:	f009 f85b 	bl	800aa20 <HAL_TIM_PWM_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <_ZL13MX_TIM16_Initv+0x86>
  {
    Error_Handler();
 800197a:	f000 fb63 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	; 0x60
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 80019a4:	f009 fa2c 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <_ZL13MX_TIM16_Initv+0xc4>
  {
    Error_Handler();
 80019b8:	f000 fb44 	bl	8002044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	4619      	mov	r1, r3
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 80019e4:	f00a f86e 	bl	800bac4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <_ZL13MX_TIM16_Initv+0x104>
  {
    Error_Handler();
 80019f8:	f000 fb24 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <_ZL13MX_TIM16_Initv+0x114>)
 80019fe:	f001 f89f 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 8001a02:	bf00      	nop
 8001a04:	3750      	adds	r7, #80	; 0x50
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240007a0 	.word	0x240007a0
 8001a10:	40014400 	.word	0x40014400

08001a14 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b094      	sub	sp, #80	; 0x50
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2234      	movs	r2, #52	; 0x34
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00b fa8b 	bl	800cf50 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <_ZL13MX_TIM17_Initv+0x118>)
 8001a3e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a66:	4830      	ldr	r0, [pc, #192]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a68:	f008 ff83 	bl	800a972 <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001a7c:	f000 fae2 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001a80:	4829      	ldr	r0, [pc, #164]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001a82:	f008 ffcd 	bl	800aa20 <HAL_TIM_PWM_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8001a96:	f000 fad5 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9a:	2360      	movs	r3, #96	; 0x60
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aba:	2200      	movs	r2, #0
 8001abc:	4619      	mov	r1, r3
 8001abe:	481a      	ldr	r0, [pc, #104]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001ac0:	f009 f99e 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8001ad4:	f000 fab6 	bl	8002044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	480a      	ldr	r0, [pc, #40]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001b00:	f009 ffe0 	bl	800bac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8001b14:	f000 fa96 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <_ZL13MX_TIM17_Initv+0x114>)
 8001b1a:	f001 f811 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	; 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	240007ec 	.word	0x240007ec
 8001b2c:	40014800 	.word	0x40014800

08001b30 <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	; 0x38
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <_ZL13MX_TIM23_Initv+0x168>)
 8001b66:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001b74:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001b76:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim23) != HAL_OK)
 8001b88:	4842      	ldr	r0, [pc, #264]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001b8a:	f008 ffa0 	bl	800aace <HAL_TIM_IC_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 8001b9e:	f000 fa51 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8001ba2:	483c      	ldr	r0, [pc, #240]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001ba4:	f008 ff3c 	bl	800aa20 <HAL_TIM_PWM_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <_ZL13MX_TIM23_Initv+0x8c>
  {
    Error_Handler();
 8001bb8:	f000 fa44 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4832      	ldr	r0, [pc, #200]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001bcc:	f009 fede 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <_ZL13MX_TIM23_Initv+0xb4>
  {
    Error_Handler();
 8001be0:	f000 fa30 	bl	8002044 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001be8:	2301      	movs	r3, #1
 8001bea:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4825      	ldr	r0, [pc, #148]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001bfe:	f009 f863 	bl	800acc8 <HAL_TIM_IC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <_ZL13MX_TIM23_Initv+0xe6>
  {
    Error_Handler();
 8001c12:	f000 fa17 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	; 0x60
 8001c18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	2204      	movs	r2, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4819      	ldr	r0, [pc, #100]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001c2e:	f009 f8e7 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <_ZL13MX_TIM23_Initv+0x116>
  {
    Error_Handler();
 8001c42:	f000 f9ff 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c46:	463b      	mov	r3, r7
 8001c48:	2208      	movs	r2, #8
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4811      	ldr	r0, [pc, #68]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001c4e:	f009 f8d7 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf14      	ite	ne
 8001c58:	2301      	movne	r3, #1
 8001c5a:	2300      	moveq	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <_ZL13MX_TIM23_Initv+0x136>
  {
    Error_Handler();
 8001c62:	f000 f9ef 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c66:	463b      	mov	r3, r7
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001c6e:	f009 f8c7 	bl	800ae00 <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <_ZL13MX_TIM23_Initv+0x156>
  {
    Error_Handler();
 8001c82:	f000 f9df 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8001c86:	4803      	ldr	r0, [pc, #12]	; (8001c94 <_ZL13MX_TIM23_Initv+0x164>)
 8001c88:	f000 ff5a 	bl	8002b40 <HAL_TIM_MspPostInit>

}
 8001c8c:	bf00      	nop
 8001c8e:	3738      	adds	r7, #56	; 0x38
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24000838 	.word	0x24000838
 8001c98:	4000e000 	.word	0x4000e000

08001c9c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001ce6:	f009 ff8d 	bl	800bc04 <HAL_UART_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8001cfa:	f000 f9a3 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001d02:	f00b f829 	bl	800cd58 <HAL_UARTEx_SetTxFifoThreshold>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001d16:	f000 f995 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001d1e:	f00b f859 	bl	800cdd4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8001d32:	f000 f987 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001d38:	f00a ffd5 	bl	800cce6 <HAL_UARTEx_DisableFifoMode>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001d4c:	f000 f97a 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	24000884 	.word	0x24000884
 8001d58:	40011000 	.word	0x40011000

08001d5c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d62:	4a2d      	ldr	r2, [pc, #180]	; (8001e18 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001da4:	481b      	ldr	r0, [pc, #108]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001da6:	f009 ff2d 	bl	800bc04 <HAL_UART_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001dba:	f000 f943 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4814      	ldr	r0, [pc, #80]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001dc2:	f00a ffc9 	bl	800cd58 <HAL_UARTEx_SetTxFifoThreshold>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001dd6:	f000 f935 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001dde:	f00a fff9 	bl	800cdd4 <HAL_UARTEx_SetRxFifoThreshold>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001df2:	f000 f927 	bl	8002044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001df8:	f00a ff75 	bl	800cce6 <HAL_UARTEx_DisableFifoMode>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001e0c:	f000 f91a 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	24000914 	.word	0x24000914
 8001e18:	40004400 	.word	0x40004400

08001e1c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_ZL11MX_DMA_Initv+0x5c>)
 8001e24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e28:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <_ZL11MX_DMA_Initv+0x5c>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <_ZL11MX_DMA_Initv+0x5c>)
 8001e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	200b      	movs	r0, #11
 8001e46:	f002 fede 	bl	8004c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e4a:	200b      	movs	r0, #11
 8001e4c:	f002 fef5 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	200c      	movs	r0, #12
 8001e56:	f002 fed6 	bl	8004c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e5a:	200c      	movs	r0, #12
 8001e5c:	f002 feed 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	200d      	movs	r0, #13
 8001e66:	f002 fece 	bl	8004c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e6a:	200d      	movs	r0, #13
 8001e6c:	f002 fee5 	bl	8004c3a <HAL_NVIC_EnableIRQ>

}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58024400 	.word	0x58024400

08001e7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	; 0x38
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e98:	4a65      	ldr	r2, [pc, #404]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb0:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb6:	4a5e      	ldr	r2, [pc, #376]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ece:	4b58      	ldr	r3, [pc, #352]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed4:	4a56      	ldr	r2, [pc, #344]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001ed6:	f043 0320 	orr.w	r3, r3, #32
 8001eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ede:	4b54      	ldr	r3, [pc, #336]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efc:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f10:	4a47      	ldr	r2, [pc, #284]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1a:	4b45      	ldr	r3, [pc, #276]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	4b41      	ldr	r3, [pc, #260]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2e:	4a40      	ldr	r2, [pc, #256]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f56:	4b36      	ldr	r3, [pc, #216]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6a:	4a31      	ldr	r2, [pc, #196]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	482b      	ldr	r0, [pc, #172]	; (8002034 <_ZL12MX_GPIO_Initv+0x1b8>)
 8001f88:	f005 f8ea 	bl	8007160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f9e:	230b      	movs	r3, #11
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4823      	ldr	r0, [pc, #140]	; (8002038 <_ZL12MX_GPIO_Initv+0x1bc>)
 8001faa:	f004 ff31 	bl	8006e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_SS_Pin */
  GPIO_InitStruct.Pin = SPI3_SS_Pin;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	481b      	ldr	r0, [pc, #108]	; (8002034 <_ZL12MX_GPIO_Initv+0x1b8>)
 8001fc6:	f004 ff23 	bl	8006e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001fca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fdc:	230b      	movs	r3, #11
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4815      	ldr	r0, [pc, #84]	; (800203c <_ZL12MX_GPIO_Initv+0x1c0>)
 8001fe8:	f004 ff12 	bl	8006e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fec:	2303      	movs	r3, #3
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	480f      	ldr	r0, [pc, #60]	; (8002040 <_ZL12MX_GPIO_Initv+0x1c4>)
 8002002:	f004 ff05 	bl	8006e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2006      	movs	r0, #6
 800200c:	f002 fdfb 	bl	8004c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002010:	2006      	movs	r0, #6
 8002012:	f002 fe12 	bl	8004c3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2007      	movs	r0, #7
 800201c:	f002 fdf3 	bl	8004c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002020:	2007      	movs	r0, #7
 8002022:	f002 fe0a 	bl	8004c3a <HAL_NVIC_EnableIRQ>

}
 8002026:	bf00      	nop
 8002028:	3738      	adds	r7, #56	; 0x38
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	58024400 	.word	0x58024400
 8002034:	58020c00 	.word	0x58020c00
 8002038:	58020400 	.word	0x58020400
 800203c:	58021800 	.word	0x58021800
 8002040:	58021000 	.word	0x58021000

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800204c:	e7fe      	b.n	800204c <Error_Handler+0x8>
	...

08002050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_MspInit+0x30>)
 8002058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800205c:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_MspInit+0x30>)
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_MspInit+0x30>)
 8002068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	58024400 	.word	0x58024400

08002084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b092      	sub	sp, #72	; 0x48
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a91      	ldr	r2, [pc, #580]	; (80022e8 <HAL_ADC_MspInit+0x264>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f040 80b6 	bne.w	8002214 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020a8:	4b90      	ldr	r3, [pc, #576]	; (80022ec <HAL_ADC_MspInit+0x268>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a8f      	ldr	r2, [pc, #572]	; (80022ec <HAL_ADC_MspInit+0x268>)
 80020b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020b2:	4b8e      	ldr	r3, [pc, #568]	; (80022ec <HAL_ADC_MspInit+0x268>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10e      	bne.n	80020d8 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020ba:	4b8d      	ldr	r3, [pc, #564]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020c0:	4a8b      	ldr	r2, [pc, #556]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020ca:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d8:	4b85      	ldr	r3, [pc, #532]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020de:	4a84      	ldr	r2, [pc, #528]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fc:	4a7c      	ldr	r2, [pc, #496]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211a:	4a75      	ldr	r2, [pc, #468]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002124:	4b72      	ldr	r3, [pc, #456]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002132:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002138:	4a6d      	ldr	r2, [pc, #436]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 800213a:	f043 0320 	orr.w	r3, r3, #32
 800213e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002142:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	6a3b      	ldr	r3, [r7, #32]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = ADC_16BIT_Pin;
 8002150:	2301      	movs	r3, #1
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002154:	2303      	movs	r3, #3
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC_16BIT_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002160:	4619      	mov	r1, r3
 8002162:	4864      	ldr	r0, [pc, #400]	; (80022f4 <HAL_ADC_MspInit+0x270>)
 8002164:	f004 fe54 	bl	8006e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITA0_Pin|ADC_16BITA3_Pin|ADC_16BITA4_Pin|ADC_16BITA5_Pin
 8002168:	2379      	movs	r3, #121	; 0x79
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
                          |ADC_16BITA6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216c:	2303      	movs	r3, #3
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002178:	4619      	mov	r1, r3
 800217a:	485f      	ldr	r0, [pc, #380]	; (80022f8 <HAL_ADC_MspInit+0x274>)
 800217c:	f004 fe48 	bl	8006e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITB0_Pin|ADC_16BITB1_Pin;
 8002180:	2303      	movs	r3, #3
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002184:	2303      	movs	r3, #3
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002190:	4619      	mov	r1, r3
 8002192:	485a      	ldr	r0, [pc, #360]	; (80022fc <HAL_ADC_MspInit+0x278>)
 8002194:	f004 fe3c 	bl	8006e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITF11_Pin|ADC_16BITF12_Pin;
 8002198:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219e:	2303      	movs	r3, #3
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021aa:	4619      	mov	r1, r3
 80021ac:	4854      	ldr	r0, [pc, #336]	; (8002300 <HAL_ADC_MspInit+0x27c>)
 80021ae:	f004 fe2f 	bl	8006e10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80021b2:	4b54      	ldr	r3, [pc, #336]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_ADC_MspInit+0x284>)
 80021b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80021b8:	4b52      	ldr	r3, [pc, #328]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021ba:	2209      	movs	r2, #9
 80021bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021be:	4b51      	ldr	r3, [pc, #324]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c4:	4b4f      	ldr	r3, [pc, #316]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ca:	4b4e      	ldr	r3, [pc, #312]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021d2:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021da:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021e2:	4b48      	ldr	r3, [pc, #288]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021ea:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f0:	4b44      	ldr	r3, [pc, #272]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021f6:	4843      	ldr	r0, [pc, #268]	; (8002304 <HAL_ADC_MspInit+0x280>)
 80021f8:	f002 fd3a 	bl	8004c70 <HAL_DMA_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 8002202:	f7ff ff1f 	bl	8002044 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <HAL_ADC_MspInit+0x280>)
 800220a:	659a      	str	r2, [r3, #88]	; 0x58
 800220c:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <HAL_ADC_MspInit+0x280>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002212:	e0fc      	b.n	800240e <HAL_ADC_MspInit+0x38a>
  else if(hadc->Instance==ADC2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a3c      	ldr	r2, [pc, #240]	; (800230c <HAL_ADC_MspInit+0x288>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d17c      	bne.n	8002318 <HAL_ADC_MspInit+0x294>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_ADC_MspInit+0x268>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_ADC_MspInit+0x268>)
 8002226:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_ADC_MspInit+0x268>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10e      	bne.n	800224e <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002236:	4a2e      	ldr	r2, [pc, #184]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002238:	f043 0320 	orr.w	r3, r3, #32
 800223c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002242:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_ADC_MspInit+0x26c>)
 8002260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ADC_16BITF13_Pin|ADC_16BITF14_Pin;
 800226c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002272:	2303      	movs	r3, #3
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800227e:	4619      	mov	r1, r3
 8002280:	481f      	ldr	r0, [pc, #124]	; (8002300 <HAL_ADC_MspInit+0x27c>)
 8002282:	f004 fdc5 	bl	8006e10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_ADC_MspInit+0x290>)
 800228a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 800228e:	220a      	movs	r2, #10
 8002290:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80022ca:	4811      	ldr	r0, [pc, #68]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022cc:	f002 fcd0 	bl	8004c70 <HAL_DMA_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_ADC_MspInit+0x256>
      Error_Handler();
 80022d6:	f7ff feb5 	bl	8002044 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022de:	659a      	str	r2, [r3, #88]	; 0x58
 80022e0:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_ADC_MspInit+0x28c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022e6:	e092      	b.n	800240e <HAL_ADC_MspInit+0x38a>
 80022e8:	40022000 	.word	0x40022000
 80022ec:	240009a4 	.word	0x240009a4
 80022f0:	58024400 	.word	0x58024400
 80022f4:	58020800 	.word	0x58020800
 80022f8:	58020000 	.word	0x58020000
 80022fc:	58020400 	.word	0x58020400
 8002300:	58021400 	.word	0x58021400
 8002304:	2400017c 	.word	0x2400017c
 8002308:	40020010 	.word	0x40020010
 800230c:	40022100 	.word	0x40022100
 8002310:	240001f4 	.word	0x240001f4
 8002314:	40020028 	.word	0x40020028
  else if(hadc->Instance==ADC3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3e      	ldr	r2, [pc, #248]	; (8002418 <HAL_ADC_MspInit+0x394>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d175      	bne.n	800240e <HAL_ADC_MspInit+0x38a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002328:	4a3c      	ldr	r2, [pc, #240]	; (800241c <HAL_ADC_MspInit+0x398>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002346:	4a35      	ldr	r2, [pc, #212]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002364:	4a2d      	ldr	r2, [pc, #180]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_ADC_MspInit+0x398>)
 8002370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_12BIT_Pin|ADC_12BITF6_Pin|ADC_12BITF7_Pin|ADC_12BITF8_Pin
 800237c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002382:	2303      	movs	r3, #3
 8002384:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800238a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800238e:	4619      	mov	r1, r3
 8002390:	4823      	ldr	r0, [pc, #140]	; (8002420 <HAL_ADC_MspInit+0x39c>)
 8002392:	f004 fd3d 	bl	8006e10 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002396:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800239a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800239e:	f000 ffa1 	bl	80032e4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80023a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80023a6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80023aa:	f000 ff9b 	bl	80032e4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_ADC_MspInit+0x3a4>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023b6:	2273      	movs	r2, #115	; 0x73
 80023b8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023cc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023dc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80023f2:	480c      	ldr	r0, [pc, #48]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 80023f4:	f002 fc3c 	bl	8004c70 <HAL_DMA_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_ADC_MspInit+0x37e>
      Error_Handler();
 80023fe:	f7ff fe21 	bl	8002044 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <HAL_ADC_MspInit+0x3a0>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800240e:	bf00      	nop
 8002410:	3748      	adds	r7, #72	; 0x48
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	58026000 	.word	0x58026000
 800241c:	58024400 	.word	0x58024400
 8002420:	58021400 	.word	0x58021400
 8002424:	2400026c 	.word	0x2400026c
 8002428:	40020040 	.word	0x40020040

0800242c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <HAL_CORDIC_MspInit+0x3c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10e      	bne.n	800245c <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_CORDIC_MspInit+0x40>)
 8002440:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_CORDIC_MspInit+0x40>)
 8002446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_CORDIC_MspInit+0x40>)
 8002450:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	48024400 	.word	0x48024400
 800246c:	58024400 	.word	0x58024400

08002470 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0b8      	sub	sp, #224	; 0xe0
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	22b4      	movs	r2, #180	; 0xb4
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f00a fd5d 	bl	800cf50 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a54      	ldr	r2, [pc, #336]	; (80025ec <HAL_FDCAN_MspInit+0x17c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d14e      	bne.n	800253e <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80024a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80024a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ae:	f107 0318 	add.w	r3, r7, #24
 80024b2:	4618      	mov	r0, r3
 80024b4:	f005 ff98 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80024be:	f7ff fdc1 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80024c2:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_FDCAN_MspInit+0x180>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	4a49      	ldr	r2, [pc, #292]	; (80025f0 <HAL_FDCAN_MspInit+0x180>)
 80024ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80024cc:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <HAL_FDCAN_MspInit+0x180>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10e      	bne.n	80024f2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80024d4:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 80024d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80024da:	4a46      	ldr	r2, [pc, #280]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 80024e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	4a3e      	ldr	r2, [pc, #248]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002510:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002514:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800252a:	2309      	movs	r3, #9
 800252c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002530:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002534:	4619      	mov	r1, r3
 8002536:	4830      	ldr	r0, [pc, #192]	; (80025f8 <HAL_FDCAN_MspInit+0x188>)
 8002538:	f004 fc6a 	bl	8006e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800253c:	e052      	b.n	80025e4 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2e      	ldr	r2, [pc, #184]	; (80025fc <HAL_FDCAN_MspInit+0x18c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d14d      	bne.n	80025e4 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800254e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002556:	f107 0318 	add.w	r3, r7, #24
 800255a:	4618      	mov	r0, r3
 800255c:	f005 ff44 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8002566:	f7ff fd6d 	bl	8002044 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_FDCAN_MspInit+0x180>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <HAL_FDCAN_MspInit+0x180>)
 8002572:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_FDCAN_MspInit+0x180>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10e      	bne.n	800259a <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 800257e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 800258e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 80025a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_FDCAN_MspInit+0x184>)
 80025ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025dc:	4619      	mov	r1, r3
 80025de:	4808      	ldr	r0, [pc, #32]	; (8002600 <HAL_FDCAN_MspInit+0x190>)
 80025e0:	f004 fc16 	bl	8006e10 <HAL_GPIO_Init>
}
 80025e4:	bf00      	nop
 80025e6:	37e0      	adds	r7, #224	; 0xe0
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	4000a000 	.word	0x4000a000
 80025f0:	240009a8 	.word	0x240009a8
 80025f4:	58024400 	.word	0x58024400
 80025f8:	58020000 	.word	0x58020000
 80025fc:	4000d400 	.word	0x4000d400
 8002600:	58021800 	.word	0x58021800

08002604 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <HAL_FMAC_MspInit+0x3c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_FMAC_MspInit+0x40>)
 8002618:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_FMAC_MspInit+0x40>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_FMAC_MspInit+0x40>)
 8002628:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	48024000 	.word	0x48024000
 8002644:	58024400 	.word	0x58024400

08002648 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0b2      	sub	sp, #200	; 0xc8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	22b4      	movs	r2, #180	; 0xb4
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f00a fc79 	bl	800cf50 <memset>
  if(hlptim->Instance==LPTIM1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a42      	ldr	r2, [pc, #264]	; (800276c <HAL_LPTIM_MspInit+0x124>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d126      	bne.n	80026b6 <HAL_LPTIM_MspInit+0x6e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002668:	2320      	movs	r3, #32
 800266a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4618      	mov	r0, r3
 8002678:	f005 feb6 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002682:	f7ff fcdf 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002686:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 8002688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800268c:	4a38      	ldr	r2, [pc, #224]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 800268e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002692:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 8002698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	205d      	movs	r0, #93	; 0x5d
 80026aa:	f002 faac 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80026ae:	205d      	movs	r0, #93	; 0x5d
 80026b0:	f002 fac3 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }

}
 80026b4:	e056      	b.n	8002764 <HAL_LPTIM_MspInit+0x11c>
  else if(hlptim->Instance==LPTIM2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2e      	ldr	r2, [pc, #184]	; (8002774 <HAL_LPTIM_MspInit+0x12c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d126      	bne.n	800270e <HAL_LPTIM_MspInit+0xc6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80026c0:	2340      	movs	r3, #64	; 0x40
 80026c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 fe8a 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 80026da:	f7ff fcb3 	bl	8002044 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 80026e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e4:	4a22      	ldr	r2, [pc, #136]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 80026e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 80026f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	208a      	movs	r0, #138	; 0x8a
 8002702:	f002 fa80 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8002706:	208a      	movs	r0, #138	; 0x8a
 8002708:	f002 fa97 	bl	8004c3a <HAL_NVIC_EnableIRQ>
}
 800270c:	e02a      	b.n	8002764 <HAL_LPTIM_MspInit+0x11c>
  else if(hlptim->Instance==LPTIM3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_LPTIM_MspInit+0x130>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d125      	bne.n	8002764 <HAL_LPTIM_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4618      	mov	r0, r3
 8002728:	f005 fe5e 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_LPTIM_MspInit+0xee>
      Error_Handler();
 8002732:	f7ff fc87 	bl	8002044 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 8002738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800273c:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 800273e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002742:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_LPTIM_MspInit+0x128>)
 8002748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	208b      	movs	r0, #139	; 0x8b
 800275a:	f002 fa54 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 800275e:	208b      	movs	r0, #139	; 0x8b
 8002760:	f002 fa6b 	bl	8004c3a <HAL_NVIC_EnableIRQ>
}
 8002764:	bf00      	nop
 8002766:	37c8      	adds	r7, #200	; 0xc8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40002400 	.word	0x40002400
 8002770:	58024400 	.word	0x58024400
 8002774:	58002400 	.word	0x58002400
 8002778:	58002800 	.word	0x58002800

0800277c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0b0      	sub	sp, #192	; 0xc0
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	22b4      	movs	r2, #180	; 0xb4
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f00a fbdf 	bl	800cf50 <memset>
  if(hrtc->Instance==RTC)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_RTC_MspInit+0x58>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d116      	bne.n	80027ca <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800279c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 fe1a 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80027ba:	f7ff fc43 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RTC_MspInit+0x5c>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_RTC_MspInit+0x5c>)
 80027c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027ca:	bf00      	nop
 80027cc:	37c0      	adds	r7, #192	; 0xc0
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	58004000 	.word	0x58004000
 80027d8:	58024400 	.word	0x58024400

080027dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0b6      	sub	sp, #216	; 0xd8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	22b4      	movs	r2, #180	; 0xb4
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00a fba7 	bl	800cf50 <memset>
  if(hspi->Instance==SPI3)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <HAL_SPI_MspInit+0xc0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d142      	bne.n	8002892 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002810:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002812:	2300      	movs	r3, #0
 8002814:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f005 fde4 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002826:	f7ff fc0d 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_SPI_MspInit+0xc4>)
 800282c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_SPI_MspInit+0xc4>)
 8002832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002836:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800283a:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_SPI_MspInit+0xc4>)
 800283c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_SPI_MspInit+0xc4>)
 800284a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_SPI_MspInit+0xc4>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_SPI_MspInit+0xc4>)
 800285a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002866:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800286a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002880:	2306      	movs	r3, #6
 8002882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800288a:	4619      	mov	r1, r3
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <HAL_SPI_MspInit+0xc8>)
 800288e:	f004 fabf 	bl	8006e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002892:	bf00      	nop
 8002894:	37d8      	adds	r7, #216	; 0xd8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40003c00 	.word	0x40003c00
 80028a0:	58024400 	.word	0x58024400
 80028a4:	58020800 	.word	0x58020800

080028a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a35      	ldr	r2, [pc, #212]	; (800298c <HAL_TIM_PWM_MspInit+0xe4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10f      	bne.n	80028da <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ba:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028c0:	4a33      	ldr	r2, [pc, #204]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 80028cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80028d8:	e052      	b.n	8002980 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM3)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_TIM_PWM_MspInit+0xec>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d10f      	bne.n	8002904 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e4:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ea:	4a29      	ldr	r2, [pc, #164]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028f4:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 80028f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	69bb      	ldr	r3, [r7, #24]
}
 8002902:	e03d      	b.n	8002980 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM4)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a23      	ldr	r2, [pc, #140]	; (8002998 <HAL_TIM_PWM_MspInit+0xf0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10f      	bne.n	800292e <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 8002920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]
}
 800292c:	e028      	b.n	8002980 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM12)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_TIM_PWM_MspInit+0xf4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10f      	bne.n	8002958 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800293e:	4a14      	ldr	r2, [pc, #80]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 8002940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
}
 8002956:	e013      	b.n	8002980 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM15)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <HAL_TIM_PWM_MspInit+0xf8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 8002964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002968:	4a09      	ldr	r2, [pc, #36]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <HAL_TIM_PWM_MspInit+0xe8>)
 8002974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	bf00      	nop
 8002982:	3724      	adds	r7, #36	; 0x24
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40010000 	.word	0x40010000
 8002990:	58024400 	.word	0x58024400
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800
 800299c:	40001800 	.word	0x40001800
 80029a0:	40014000 	.word	0x40014000

080029a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_TIM_Encoder_MspInit+0x88>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d12d      	bne.n	8002a22 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_TIM_Encoder_MspInit+0x8c>)
 80029c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029cc:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_TIM_Encoder_MspInit+0x8c>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_TIM_Encoder_MspInit+0x8c>)
 80029d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_TIM_Encoder_MspInit+0x8c>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_TIM_Encoder_MspInit+0x8c>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_TIM_Encoder_MspInit+0x8c>)
 80029f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_Pin|ENCODER_1C7_Pin;
 8002a02:	23c0      	movs	r3, #192	; 0xc0
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a12:	2303      	movs	r3, #3
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x90>)
 8002a1e:	f004 f9f7 	bl	8006e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58020800 	.word	0x58020800

08002a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_TIM_Base_MspInit+0x68>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10f      	bne.n	8002a6a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002a68:	e013      	b.n	8002a92 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM17)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <HAL_TIM_Base_MspInit+0x70>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10e      	bne.n	8002a92 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	40014800 	.word	0x40014800

08002aac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM23)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_TIM_IC_MspInit+0x88>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12d      	bne.n	8002b2a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_TIM_IC_MspInit+0x8c>)
 8002ad0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_IC_MspInit+0x8c>)
 8002ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ada:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_TIM_IC_MspInit+0x8c>)
 8002ae0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_TIM_IC_MspInit+0x8c>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af2:	4a11      	ldr	r2, [pc, #68]	; (8002b38 <HAL_TIM_IC_MspInit+0x8c>)
 8002af4:	f043 0320 	orr.w	r3, r3, #32
 8002af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_TIM_IC_MspInit+0x8c>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF0     ------> TIM23_CH1
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002b1a:	230d      	movs	r3, #13
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_TIM_IC_MspInit+0x90>)
 8002b26:	f004 f973 	bl	8006e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	4000e000 	.word	0x4000e000
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	58021400 	.word	0x58021400

08002b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b090      	sub	sp, #64	; 0x40
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4aa6      	ldr	r2, [pc, #664]	; (8002df8 <HAL_TIM_MspPostInit+0x2b8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d120      	bne.n	8002ba4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b62:	4ba6      	ldr	r3, [pc, #664]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b68:	4aa4      	ldr	r2, [pc, #656]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002b6a:	f043 0310 	orr.w	r3, r3, #16
 8002b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b72:	4ba2      	ldr	r3, [pc, #648]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_OUT_NE8_Pin|PWM_OUTE9_Pin|PWM_OUT_NE10_Pin|PWM_OUTE11_Pin
 8002b80:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PWM_OUT_NE12_Pin|PWM_OUTE13_Pin|PWM_OUTE14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4898      	ldr	r0, [pc, #608]	; (8002e00 <HAL_TIM_MspPostInit+0x2c0>)
 8002b9e:	f004 f937 	bl	8006e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8002ba2:	e125      	b.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a96      	ldr	r2, [pc, #600]	; (8002e04 <HAL_TIM_MspPostInit+0x2c4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d13f      	bne.n	8002c2e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bae:	4b93      	ldr	r3, [pc, #588]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb4:	4a91      	ldr	r2, [pc, #580]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bbe:	4b8f      	ldr	r3, [pc, #572]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bcc:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd2:	4a8a      	ldr	r2, [pc, #552]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bdc:	4b87      	ldr	r3, [pc, #540]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_OUTC8_Pin|PWM_INC9_Pin;
 8002bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c04:	4619      	mov	r1, r3
 8002c06:	4880      	ldr	r0, [pc, #512]	; (8002e08 <HAL_TIM_MspPostInit+0x2c8>)
 8002c08:	f004 f902 	bl	8006e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_OUTB4_Pin|PWM_OUTB5_Pin;
 8002c0c:	2330      	movs	r3, #48	; 0x30
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c24:	4619      	mov	r1, r3
 8002c26:	4879      	ldr	r0, [pc, #484]	; (8002e0c <HAL_TIM_MspPostInit+0x2cc>)
 8002c28:	f004 f8f2 	bl	8006e10 <HAL_GPIO_Init>
}
 8002c2c:	e0e0      	b.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM4)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <HAL_TIM_MspPostInit+0x2d0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d120      	bne.n	8002c7a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c38:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3e:	4a6f      	ldr	r2, [pc, #444]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c48:	4b6c      	ldr	r3, [pc, #432]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_OUTD12_Pin|PWM_OUTD13_Pin|GPIO_PIN_14|PWM_OUTD15_Pin;
 8002c56:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c70:	4619      	mov	r1, r3
 8002c72:	4868      	ldr	r0, [pc, #416]	; (8002e14 <HAL_TIM_MspPostInit+0x2d4>)
 8002c74:	f004 f8cc 	bl	8006e10 <HAL_GPIO_Init>
}
 8002c78:	e0ba      	b.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM12)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a66      	ldr	r2, [pc, #408]	; (8002e18 <HAL_TIM_MspPostInit+0x2d8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d120      	bne.n	8002cc6 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c84:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8a:	4a5c      	ldr	r2, [pc, #368]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_OUTB14_Pin|PWM_OUTB15_Pin;
 8002ca2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4853      	ldr	r0, [pc, #332]	; (8002e0c <HAL_TIM_MspPostInit+0x2cc>)
 8002cc0:	f004 f8a6 	bl	8006e10 <HAL_GPIO_Init>
}
 8002cc4:	e094      	b.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM15)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a54      	ldr	r2, [pc, #336]	; (8002e1c <HAL_TIM_MspPostInit+0x2dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d11f      	bne.n	8002d10 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd0:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd6:	4a49      	ldr	r2, [pc, #292]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_OUT_N_Pin|PWM_OUT_Pin|PWM_OUTE6_Pin;
 8002cee:	2370      	movs	r3, #112	; 0x70
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d06:	4619      	mov	r1, r3
 8002d08:	483d      	ldr	r0, [pc, #244]	; (8002e00 <HAL_TIM_MspPostInit+0x2c0>)
 8002d0a:	f004 f881 	bl	8006e10 <HAL_GPIO_Init>
}
 8002d0e:	e06f      	b.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM16)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <HAL_TIM_MspPostInit+0x2e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d120      	bne.n	8002d5c <HAL_TIM_MspPostInit+0x21c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d20:	4a36      	ldr	r2, [pc, #216]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_OUT_NB6_Pin|PWM_OUTB8_Pin;
 8002d38:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d52:	4619      	mov	r1, r3
 8002d54:	482d      	ldr	r0, [pc, #180]	; (8002e0c <HAL_TIM_MspPostInit+0x2cc>)
 8002d56:	f004 f85b 	bl	8006e10 <HAL_GPIO_Init>
}
 8002d5a:	e049      	b.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM17)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a30      	ldr	r2, [pc, #192]	; (8002e24 <HAL_TIM_MspPostInit+0x2e4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d120      	bne.n	8002da8 <HAL_TIM_MspPostInit+0x268>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6c:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OUT_NB7_Pin|PWM_OUTB9_Pin;
 8002d84:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002d96:	2301      	movs	r3, #1
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	481a      	ldr	r0, [pc, #104]	; (8002e0c <HAL_TIM_MspPostInit+0x2cc>)
 8002da2:	f004 f835 	bl	8006e10 <HAL_GPIO_Init>
}
 8002da6:	e023      	b.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM23)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_TIM_MspPostInit+0x2e8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d11e      	bne.n	8002df0 <HAL_TIM_MspPostInit+0x2b0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db8:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_TIM_MspPostInit+0x2bc>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OUTF1_Pin|PWM_OUTF2_Pin|PWM_OUTF3_Pin;
 8002dd0:	230e      	movs	r3, #14
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002de0:	230d      	movs	r3, #13
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002de8:	4619      	mov	r1, r3
 8002dea:	4810      	ldr	r0, [pc, #64]	; (8002e2c <HAL_TIM_MspPostInit+0x2ec>)
 8002dec:	f004 f810 	bl	8006e10 <HAL_GPIO_Init>
}
 8002df0:	bf00      	nop
 8002df2:	3740      	adds	r7, #64	; 0x40
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	58021000 	.word	0x58021000
 8002e04:	40000400 	.word	0x40000400
 8002e08:	58020800 	.word	0x58020800
 8002e0c:	58020400 	.word	0x58020400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	58020c00 	.word	0x58020c00
 8002e18:	40001800 	.word	0x40001800
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800
 8002e28:	4000e000 	.word	0x4000e000
 8002e2c:	58021400 	.word	0x58021400

08002e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0b8      	sub	sp, #224	; 0xe0
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e48:	f107 0318 	add.w	r3, r7, #24
 8002e4c:	22b4      	movs	r2, #180	; 0xb4
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f00a f87d 	bl	800cf50 <memset>
  if(huart->Instance==USART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_UART_MspInit+0x150>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d143      	bne.n	8002ee8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e6a:	f107 0318 	add.w	r3, r7, #24
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 faba 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e7a:	f7ff f8e3 	bl	8002044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e7e:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e84:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002e86:	f043 0310 	orr.w	r3, r3, #16
 8002e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9c:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea2:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ed4:	2307      	movs	r3, #7
 8002ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4829      	ldr	r0, [pc, #164]	; (8002f88 <HAL_UART_MspInit+0x158>)
 8002ee2:	f003 ff95 	bl	8006e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ee6:	e046      	b.n	8002f76 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <HAL_UART_MspInit+0x15c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d141      	bne.n	8002f76 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002efc:	f107 0318 	add.w	r3, r7, #24
 8002f00:	4618      	mov	r0, r3
 8002f02:	f005 fa71 	bl	80083e8 <HAL_RCCEx_PeriphCLKConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002f0c:	f7ff f89a 	bl	8002044 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f16:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002f36:	f043 0308 	orr.w	r3, r3, #8
 8002f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_UART_MspInit+0x154>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f4c:	2360      	movs	r3, #96	; 0x60
 8002f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f64:	2307      	movs	r3, #7
 8002f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4807      	ldr	r0, [pc, #28]	; (8002f90 <HAL_UART_MspInit+0x160>)
 8002f72:	f003 ff4d 	bl	8006e10 <HAL_GPIO_Init>
}
 8002f76:	bf00      	nop
 8002f78:	37e0      	adds	r7, #224	; 0xe0
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40011000 	.word	0x40011000
 8002f84:	58024400 	.word	0x58024400
 8002f88:	58020000 	.word	0x58020000
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	58020c00 	.word	0x58020c00

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <NMI_Handler+0x4>

08002f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <HardFault_Handler+0x4>

08002fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <MemManage_Handler+0x4>

08002fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <BusFault_Handler+0x4>

08002fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <UsageFault_Handler+0x4>

08002fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe0:	f000 f960 	bl	80032a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002fec:	2001      	movs	r0, #1
 8002fee:	f004 f8d0 	bl	8007192 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	f004 f8c9 	bl	8007192 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}

08003004 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <DMA1_Stream0_IRQHandler+0x10>)
 800300a:	f002 f98b 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	2400017c 	.word	0x2400017c

08003018 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <DMA1_Stream1_IRQHandler+0x10>)
 800301e:	f002 f981 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	240001f4 	.word	0x240001f4

0800302c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <DMA1_Stream2_IRQHandler+0x10>)
 8003032:	f002 f977 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2400026c 	.word	0x2400026c

08003040 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <LPTIM1_IRQHandler+0x10>)
 8003046:	f004 f979 	bl	800733c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	24000484 	.word	0x24000484

08003054 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <LPTIM2_IRQHandler+0x10>)
 800305a:	f004 f96f 	bl	800733c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	240004bc 	.word	0x240004bc

08003068 <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <LPTIM3_IRQHandler+0x10>)
 800306e:	f004 f965 	bl	800733c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	240004f4 	.word	0x240004f4

0800307c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003080:	4b32      	ldr	r3, [pc, #200]	; (800314c <SystemInit+0xd0>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	4a31      	ldr	r2, [pc, #196]	; (800314c <SystemInit+0xd0>)
 8003088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800308c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <SystemInit+0xd4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	2b06      	cmp	r3, #6
 800309a:	d807      	bhi.n	80030ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <SystemInit+0xd4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 030f 	bic.w	r3, r3, #15
 80030a4:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <SystemInit+0xd4>)
 80030a6:	f043 0307 	orr.w	r3, r3, #7
 80030aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <SystemInit+0xd8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a28      	ldr	r2, [pc, #160]	; (8003154 <SystemInit+0xd8>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <SystemInit+0xd8>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <SystemInit+0xd8>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4924      	ldr	r1, [pc, #144]	; (8003154 <SystemInit+0xd8>)
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <SystemInit+0xdc>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <SystemInit+0xd4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <SystemInit+0xd4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 030f 	bic.w	r3, r3, #15
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <SystemInit+0xd4>)
 80030e0:	f043 0307 	orr.w	r3, r3, #7
 80030e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <SystemInit+0xd8>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <SystemInit+0xd8>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <SystemInit+0xd8>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <SystemInit+0xd8>)
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <SystemInit+0xe0>)
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <SystemInit+0xd8>)
 8003100:	4a17      	ldr	r2, [pc, #92]	; (8003160 <SystemInit+0xe4>)
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003104:	4b13      	ldr	r3, [pc, #76]	; (8003154 <SystemInit+0xd8>)
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <SystemInit+0xe8>)
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <SystemInit+0xd8>)
 800310c:	2200      	movs	r2, #0
 800310e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <SystemInit+0xd8>)
 8003112:	4a14      	ldr	r2, [pc, #80]	; (8003164 <SystemInit+0xe8>)
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <SystemInit+0xd8>)
 8003118:	2200      	movs	r2, #0
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <SystemInit+0xd8>)
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <SystemInit+0xe8>)
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <SystemInit+0xd8>)
 8003124:	2200      	movs	r2, #0
 8003126:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <SystemInit+0xd8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a09      	ldr	r2, [pc, #36]	; (8003154 <SystemInit+0xd8>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <SystemInit+0xd8>)
 8003136:	2200      	movs	r2, #0
 8003138:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <SystemInit+0xec>)
 800313c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003140:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00
 8003150:	52002000 	.word	0x52002000
 8003154:	58024400 	.word	0x58024400
 8003158:	eaf6ed7f 	.word	0xeaf6ed7f
 800315c:	02020200 	.word	0x02020200
 8003160:	01ff0000 	.word	0x01ff0000
 8003164:	01010280 	.word	0x01010280
 8003168:	52004000 	.word	0x52004000

0800316c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800316c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003170:	f7ff ff84 	bl	800307c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003174:	480c      	ldr	r0, [pc, #48]	; (80031a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003176:	490d      	ldr	r1, [pc, #52]	; (80031ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003178:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800317c:	e002      	b.n	8003184 <LoopCopyDataInit>

0800317e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800317e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003182:	3304      	adds	r3, #4

08003184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003188:	d3f9      	bcc.n	800317e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800318c:	4c0a      	ldr	r4, [pc, #40]	; (80031b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003190:	e001      	b.n	8003196 <LoopFillZerobss>

08003192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003194:	3204      	adds	r2, #4

08003196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003198:	d3fb      	bcc.n	8003192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800319a:	f009 fea7 	bl	800ceec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800319e:	f7fd fa37 	bl	8000610 <main>
  bx  lr
 80031a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031a4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80031a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031ac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80031b0:	0800d014 	.word	0x0800d014
  ldr r2, =_sbss
 80031b4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80031b8:	240009b0 	.word	0x240009b0

080031bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <ADC3_IRQHandler>
	...

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c6:	2003      	movs	r0, #3
 80031c8:	f001 fd12 	bl	8004bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031cc:	f004 ff36 	bl	800803c <HAL_RCC_GetSysClockFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_Init+0x68>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	4913      	ldr	r1, [pc, #76]	; (800322c <HAL_Init+0x6c>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_Init+0x68>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_Init+0x6c>)
 80031f4:	5cd3      	ldrb	r3, [r2, r3]
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <HAL_Init+0x70>)
 8003202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <HAL_Init+0x74>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800320a:	2000      	movs	r0, #0
 800320c:	f000 f814 	bl	8003238 <HAL_InitTick>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e002      	b.n	8003220 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800321a:	f7fe ff19 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	58024400 	.word	0x58024400
 800322c:	0800cfc4 	.word	0x0800cfc4
 8003230:	24000004 	.word	0x24000004
 8003234:	24000000 	.word	0x24000000

08003238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_InitTick+0x60>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e021      	b.n	8003290 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <HAL_InitTick+0x64>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_InitTick+0x60>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325a:	fbb3 f3f1 	udiv	r3, r3, r1
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	4618      	mov	r0, r3
 8003264:	f001 fcf7 	bl	8004c56 <HAL_SYSTICK_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e00e      	b.n	8003290 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d80a      	bhi.n	800328e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003278:	2200      	movs	r2, #0
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	f001 fcc1 	bl	8004c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <HAL_InitTick+0x68>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	2400000c 	.word	0x2400000c
 800329c:	24000000 	.word	0x24000000
 80032a0:	24000008 	.word	0x24000008

080032a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_IncTick+0x20>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_IncTick+0x24>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <HAL_IncTick+0x24>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	2400000c 	.word	0x2400000c
 80032c8:	240009ac 	.word	0x240009ac

080032cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return uwTick;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_GetTick+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	240009ac 	.word	0x240009ac

080032e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	4904      	ldr	r1, [pc, #16]	; (800330c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	58000400 	.word	0x58000400

08003310 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	609a      	str	r2, [r3, #8]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3360      	adds	r3, #96	; 0x60
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <LL_ADC_SetOffset+0x60>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10b      	bne.n	80033b4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80033b2:	e00b      	b.n	80033cc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	431a      	orrs	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	58026000 	.word	0x58026000

080033dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3360      	adds	r3, #96	; 0x60
 80033ea:	461a      	mov	r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	611a      	str	r2, [r3, #16]
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a0c      	ldr	r2, [pc, #48]	; (800347c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3360      	adds	r3, #96	; 0x60
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	431a      	orrs	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	601a      	str	r2, [r3, #0]
  }
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	58026000 	.word	0x58026000

08003480 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <LL_ADC_SetOffsetSaturation+0x40>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10e      	bne.n	80034b2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3360      	adds	r3, #96	; 0x60
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	58026000 	.word	0x58026000

080034c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <LL_ADC_SetOffsetSign+0x40>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10e      	bne.n	80034f6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3360      	adds	r3, #96	; 0x60
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	58026000 	.word	0x58026000

08003508 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3360      	adds	r3, #96	; 0x60
 8003518:	461a      	mov	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <LL_ADC_SetOffsetState+0x50>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d108      	bne.n	800353c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	431a      	orrs	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800353a:	e007      	b.n	800354c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	431a      	orrs	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	58026000 	.word	0x58026000

0800355c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3330      	adds	r3, #48	; 0x30
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	4413      	add	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	211f      	movs	r1, #31
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0e9b      	lsrs	r3, r3, #26
 8003594:	f003 011f 	and.w	r1, r3, #31
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	431a      	orrs	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3314      	adds	r3, #20
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	0e5b      	lsrs	r3, r3, #25
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	4413      	add	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	0d1b      	lsrs	r3, r3, #20
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2107      	movs	r1, #7
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	401a      	ands	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0d1b      	lsrs	r3, r3, #20
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <LL_ADC_SetChannelSingleDiff+0x78>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d115      	bne.n	800364c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0318 	and.w	r3, r3, #24
 8003636:	4914      	ldr	r1, [pc, #80]	; (8003688 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003638:	40d9      	lsrs	r1, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	400b      	ands	r3, r1
 800363e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003642:	431a      	orrs	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800364a:	e014      	b.n	8003676 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 0318 	and.w	r3, r3, #24
 8003662:	4909      	ldr	r1, [pc, #36]	; (8003688 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003664:	40d9      	lsrs	r1, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	400b      	ands	r3, r1
 800366a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800366e:	431a      	orrs	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	58026000 	.word	0x58026000
 8003688:	000fffff 	.word	0x000fffff

0800368c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800369a:	4013      	ands	r3, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6093      	str	r3, [r2, #8]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	5fffffc0 	.word	0x5fffffc0

080036b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c4:	d101      	bne.n	80036ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <LL_ADC_EnableInternalRegulator+0x24>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	6fffffc0 	.word	0x6fffffc0

08003700 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003714:	d101      	bne.n	800371a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <LL_ADC_IsEnabled+0x18>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <LL_ADC_IsEnabled+0x1a>
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d101      	bne.n	8003766 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d101      	bne.n	800378c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1ee      	b.n	8003b94 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fe fc5d 	bl	8002084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff67 	bl	80036b0 <LL_ADC_IsDeepPowerDownEnabled>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff4d 	bl	800368c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ff82 	bl	8003700 <LL_ADC_IsInternalRegulatorEnabled>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ff66 	bl	80036d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800380c:	4b8e      	ldr	r3, [pc, #568]	; (8003a48 <HAL_ADC_Init+0x2ac>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	4a8e      	ldr	r2, [pc, #568]	; (8003a4c <HAL_ADC_Init+0x2b0>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	3301      	adds	r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800381e:	e002      	b.n	8003826 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	3b01      	subs	r3, #1
 8003824:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f9      	bne.n	8003820 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff65 	bl	8003700 <LL_ADC_IsInternalRegulatorEnabled>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	f043 0210 	orr.w	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff76 	bl	800374e <LL_ADC_REG_IsConversionOngoing>
 8003862:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 8188 	bne.w	8003b82 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 8184 	bne.w	8003b82 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003882:	f043 0202 	orr.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff4a 	bl	8003728 <LL_ADC_IsEnabled>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d136      	bne.n	8003908 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6c      	ldr	r2, [pc, #432]	; (8003a50 <HAL_ADC_Init+0x2b4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_ADC_Init+0x112>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6a      	ldr	r2, [pc, #424]	; (8003a54 <HAL_ADC_Init+0x2b8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10e      	bne.n	80038cc <HAL_ADC_Init+0x130>
 80038ae:	4868      	ldr	r0, [pc, #416]	; (8003a50 <HAL_ADC_Init+0x2b4>)
 80038b0:	f7ff ff3a 	bl	8003728 <LL_ADC_IsEnabled>
 80038b4:	4604      	mov	r4, r0
 80038b6:	4867      	ldr	r0, [pc, #412]	; (8003a54 <HAL_ADC_Init+0x2b8>)
 80038b8:	f7ff ff36 	bl	8003728 <LL_ADC_IsEnabled>
 80038bc:	4603      	mov	r3, r0
 80038be:	4323      	orrs	r3, r4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e008      	b.n	80038de <HAL_ADC_Init+0x142>
 80038cc:	4862      	ldr	r0, [pc, #392]	; (8003a58 <HAL_ADC_Init+0x2bc>)
 80038ce:	f7ff ff2b 	bl	8003728 <LL_ADC_IsEnabled>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5a      	ldr	r2, [pc, #360]	; (8003a50 <HAL_ADC_Init+0x2b4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_ADC_Init+0x15a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_ADC_Init+0x2b8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_Init+0x15e>
 80038f6:	4a59      	ldr	r2, [pc, #356]	; (8003a5c <HAL_ADC_Init+0x2c0>)
 80038f8:	e000      	b.n	80038fc <HAL_ADC_Init+0x160>
 80038fa:	4a59      	ldr	r2, [pc, #356]	; (8003a60 <HAL_ADC_Init+0x2c4>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f7ff fd04 	bl	8003310 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <HAL_ADC_Init+0x2bc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d129      	bne.n	8003966 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7e5b      	ldrb	r3, [r3, #25]
 8003916:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800391c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003922:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d013      	beq.n	8003954 <HAL_ADC_Init+0x1b8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d00d      	beq.n	8003950 <HAL_ADC_Init+0x1b4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b1c      	cmp	r3, #28
 800393a:	d007      	beq.n	800394c <HAL_ADC_Init+0x1b0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b18      	cmp	r3, #24
 8003942:	d101      	bne.n	8003948 <HAL_ADC_Init+0x1ac>
 8003944:	2318      	movs	r3, #24
 8003946:	e006      	b.n	8003956 <HAL_ADC_Init+0x1ba>
 8003948:	2300      	movs	r3, #0
 800394a:	e004      	b.n	8003956 <HAL_ADC_Init+0x1ba>
 800394c:	2310      	movs	r3, #16
 800394e:	e002      	b.n	8003956 <HAL_ADC_Init+0x1ba>
 8003950:	2308      	movs	r3, #8
 8003952:	e000      	b.n	8003956 <HAL_ADC_Init+0x1ba>
 8003954:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003956:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e00e      	b.n	8003984 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7e5b      	ldrb	r3, [r3, #25]
 800396a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003970:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003976:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800397e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d106      	bne.n	800399c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	3b01      	subs	r3, #1
 8003994:	045b      	lsls	r3, r3, #17
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <HAL_ADC_Init+0x2bc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d115      	bne.n	80039ee <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_ADC_Init+0x2c8>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	611a      	str	r2, [r3, #16]
 80039ec:	e009      	b.n	8003a02 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_ADC_Init+0x2cc>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	69b9      	ldr	r1, [r7, #24]
 80039fe:	430b      	orrs	r3, r1
 8003a00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fea1 	bl	800374e <LL_ADC_REG_IsConversionOngoing>
 8003a0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff feae 	bl	8003774 <LL_ADC_INJ_IsConversionOngoing>
 8003a18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f040 808e 	bne.w	8003b3e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 808a 	bne.w	8003b3e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <HAL_ADC_Init+0x2bc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d11b      	bne.n	8003a6c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7e1b      	ldrb	r3, [r3, #24]
 8003a38:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a40:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e018      	b.n	8003a7a <HAL_ADC_Init+0x2de>
 8003a48:	24000000 	.word	0x24000000
 8003a4c:	053e2d63 	.word	0x053e2d63
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40022100 	.word	0x40022100
 8003a58:	58026000 	.word	0x58026000
 8003a5c:	40022300 	.word	0x40022300
 8003a60:	58026300 	.word	0x58026300
 8003a64:	fff04007 	.word	0xfff04007
 8003a68:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e1b      	ldrb	r3, [r3, #24]
 8003a70:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_ADC_Init+0x400>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d137      	bne.n	8003b08 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3f      	ldr	r2, [pc, #252]	; (8003ba0 <HAL_ADC_Init+0x404>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d116      	bne.n	8003ad6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_ADC_Init+0x408>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aba:	4311      	orrs	r1, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	611a      	str	r2, [r3, #16]
 8003ad4:	e020      	b.n	8003b18 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_ADC_Init+0x40c>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	0411      	lsls	r1, r2, #16
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aec:	4311      	orrs	r1, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003af8:	430a      	orrs	r2, r1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	e007      	b.n	8003b18 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_ADC_Init+0x404>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d002      	beq.n	8003b3e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fd63 	bl	8004604 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10c      	bne.n	8003b60 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f023 010f 	bic.w	r1, r3, #15
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5e:	e007      	b.n	8003b70 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020f 	bic.w	r2, r2, #15
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b74:	f023 0303 	bic.w	r3, r3, #3
 8003b78:	f043 0201 	orr.w	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	661a      	str	r2, [r3, #96]	; 0x60
 8003b80:	e007      	b.n	8003b92 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b86:	f043 0210 	orr.w	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3724      	adds	r7, #36	; 0x24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}
 8003b9c:	ffffbffc 	.word	0xffffbffc
 8003ba0:	58026000 	.word	0x58026000
 8003ba4:	fc00f81f 	.word	0xfc00f81f
 8003ba8:	fc00f81e 	.word	0xfc00f81e

08003bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b0b9      	sub	sp, #228	; 0xe4
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bc6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4aa9      	ldr	r2, [pc, #676]	; (8003e74 <HAL_ADC_ConfigChannel+0x2c8>)
 8003bce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x34>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	f000 bcfa 	b.w	80045d4 <HAL_ADC_ConfigChannel+0xa28>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fdae 	bl	800374e <LL_ADC_REG_IsConversionOngoing>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 84de 	bne.w	80045b6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a9e      	ldr	r2, [pc, #632]	; (8003e78 <HAL_ADC_ConfigChannel+0x2cc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d033      	beq.n	8003c6c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d108      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x76>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	e01d      	b.n	8003c5e <HAL_ADC_ConfigChannel+0xb2>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003c46:	2320      	movs	r3, #32
 8003c48:	e004      	b.n	8003c54 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	69d1      	ldr	r1, [r2, #28]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f7ff fc6f 	bl	800355c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fd63 	bl	800374e <LL_ADC_REG_IsConversionOngoing>
 8003c88:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fd6f 	bl	8003774 <LL_ADC_INJ_IsConversionOngoing>
 8003c96:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 8270 	bne.w	8004184 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ca4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 826b 	bne.w	8004184 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff fc7a 	bl	80035b4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a6c      	ldr	r2, [pc, #432]	; (8003e78 <HAL_ADC_ConfigChannel+0x2cc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ce4:	e032      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_ADC_ConfigChannel+0x2d0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf2:	d10b      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x160>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	e01d      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x19c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x186>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	089b      	lsrs	r3, r3, #2
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	e00a      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x19c>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d048      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6919      	ldr	r1, [r3, #16]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d64:	f7ff fb08 	bl	8003378 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a42      	ldr	r2, [pc, #264]	; (8003e78 <HAL_ADC_ConfigChannel+0x2cc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d119      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6919      	ldr	r1, [r3, #16]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7ff fba0 	bl	80034c4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6919      	ldr	r1, [r3, #16]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d102      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x1f0>
 8003d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9a:	e000      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x1f2>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f7ff fb6e 	bl	8003480 <LL_ADC_SetOffsetSaturation>
 8003da4:	e1ee      	b.n	8004184 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6919      	ldr	r1, [r3, #16]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x212>
 8003db8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003dbc:	e000      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x214>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f7ff fb3b 	bl	800343c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6919      	ldr	r1, [r3, #16]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	7e1b      	ldrb	r3, [r3, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d102      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x230>
 8003dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dda:	e000      	b.n	8003dde <HAL_ADC_ConfigChannel+0x232>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	461a      	mov	r2, r3
 8003de0:	f7ff fb12 	bl	8003408 <LL_ADC_SetDataRightShift>
 8003de4:	e1ce      	b.n	8004184 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a23      	ldr	r2, [pc, #140]	; (8003e78 <HAL_ADC_ConfigChannel+0x2cc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f040 8181 	bne.w	80040f4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff faef 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x272>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fae4 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003e14:	4603      	mov	r3, r0
 8003e16:	0e9b      	lsrs	r3, r3, #26
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	e01e      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x2b0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fad9 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	e004      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003e50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10b      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x2d4>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0e9b      	lsrs	r3, r3, #26
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	e01e      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x306>
 8003e74:	47ff0000 	.word	0x47ff0000
 8003e78:	58026000 	.word	0x58026000
 8003e7c:	5c001000 	.word	0x5c001000
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003e9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	e004      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d106      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fb22 	bl	8003508 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fa86 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x344>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fa7b 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	f003 021f 	and.w	r2, r3, #31
 8003eee:	e01e      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x382>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fa70 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003f1e:	2320      	movs	r3, #32
 8003f20:	e004      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x39a>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	0e9b      	lsrs	r3, r3, #26
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	e018      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x3cc>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	e004      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d106      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fabf 	bl	8003508 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fa23 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x40a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fa18 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	0e9b      	lsrs	r3, r3, #26
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	e01e      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x448>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fa0d 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e004      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_ADC_ConfigChannel+0x460>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0e9b      	lsrs	r3, r3, #26
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	e014      	b.n	8004036 <HAL_ADC_ConfigChannel+0x48a>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e004      	b.n	8004036 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800402c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	429a      	cmp	r2, r3
 8004038:	d106      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fa60 	bl	8003508 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2103      	movs	r1, #3
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f9c4 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8004054:	4603      	mov	r3, r0
 8004056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x4c8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2103      	movs	r1, #3
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff f9b9 	bl	80033dc <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	f003 021f 	and.w	r2, r3, #31
 8004072:	e017      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x4f8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2103      	movs	r1, #3
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f9ae 	bl	80033dc <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	e003      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800409a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x510>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	e011      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x534>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80040ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80040ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80040d4:	2320      	movs	r3, #32
 80040d6:	e003      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80040d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d14f      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2103      	movs	r1, #3
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fa0b 	bl	8003508 <LL_ADC_SetOffsetState>
 80040f2:	e047      	b.n	8004184 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	069b      	lsls	r3, r3, #26
 8004104:	429a      	cmp	r2, r3
 8004106:	d107      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004116:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	069b      	lsls	r3, r3, #26
 8004128:	429a      	cmp	r2, r3
 800412a:	d107      	bne.n	800413c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800413a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	069b      	lsls	r3, r3, #26
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800415e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	069b      	lsls	r3, r3, #26
 8004170:	429a      	cmp	r2, r3
 8004172:	d107      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004182:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff facd 	bl	8003728 <LL_ADC_IsEnabled>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8219 	bne.w	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7ff fa32 	bl	800360c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4aa1      	ldr	r2, [pc, #644]	; (8004434 <HAL_ADC_ConfigChannel+0x888>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	f040 812e 	bne.w	8004410 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x630>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	3301      	adds	r3, #1
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2b09      	cmp	r3, #9
 80041d2:	bf94      	ite	ls
 80041d4:	2301      	movls	r3, #1
 80041d6:	2300      	movhi	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e019      	b.n	8004210 <HAL_ADC_ConfigChannel+0x664>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e4:	fa93 f3a3 	rbit	r3, r3
 80041e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80041f4:	2320      	movs	r3, #32
 80041f6:	e003      	b.n	8004200 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80041f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	3301      	adds	r3, #1
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2b09      	cmp	r3, #9
 8004208:	bf94      	ite	ls
 800420a:	2301      	movls	r3, #1
 800420c:	2300      	movhi	r3, #0
 800420e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004210:	2b00      	cmp	r3, #0
 8004212:	d079      	beq.n	8004308 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x684>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	3301      	adds	r3, #1
 8004228:	069b      	lsls	r3, r3, #26
 800422a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800422e:	e015      	b.n	800425c <HAL_ADC_ConfigChannel+0x6b0>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004240:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004248:	2320      	movs	r3, #32
 800424a:	e003      	b.n	8004254 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800424c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	3301      	adds	r3, #1
 8004256:	069b      	lsls	r3, r3, #26
 8004258:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_ADC_ConfigChannel+0x6d0>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0e9b      	lsrs	r3, r3, #26
 800426e:	3301      	adds	r3, #1
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	2101      	movs	r1, #1
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	e017      	b.n	80042ac <HAL_ADC_ConfigChannel+0x700>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004294:	2320      	movs	r3, #32
 8004296:	e003      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	2101      	movs	r1, #1
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	ea42 0103 	orr.w	r1, r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x726>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0e9b      	lsrs	r3, r3, #26
 80042c2:	3301      	adds	r3, #1
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	051b      	lsls	r3, r3, #20
 80042d0:	e018      	b.n	8004304 <HAL_ADC_ConfigChannel+0x758>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80042ea:	2320      	movs	r3, #32
 80042ec:	e003      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004304:	430b      	orrs	r3, r1
 8004306:	e07e      	b.n	8004406 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x778>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	3301      	adds	r3, #1
 800431c:	069b      	lsls	r3, r3, #26
 800431e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004322:	e015      	b.n	8004350 <HAL_ADC_ConfigChannel+0x7a4>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800433c:	2320      	movs	r3, #32
 800433e:	e003      	b.n	8004348 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	3301      	adds	r3, #1
 800434a:	069b      	lsls	r3, r3, #26
 800434c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x7c4>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0e9b      	lsrs	r3, r3, #26
 8004362:	3301      	adds	r3, #1
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	e017      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x7f4>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	61bb      	str	r3, [r7, #24]
  return result;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e003      	b.n	8004394 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	3301      	adds	r3, #1
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	ea42 0103 	orr.w	r1, r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10d      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x820>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0e9b      	lsrs	r3, r3, #26
 80043b6:	3301      	adds	r3, #1
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	3b1e      	subs	r3, #30
 80043c4:	051b      	lsls	r3, r3, #20
 80043c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ca:	e01b      	b.n	8004404 <HAL_ADC_ConfigChannel+0x858>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	60fb      	str	r3, [r7, #12]
  return result;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80043e4:	2320      	movs	r3, #32
 80043e6:	e003      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f003 021f 	and.w	r2, r3, #31
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	3b1e      	subs	r3, #30
 80043fe:	051b      	lsls	r3, r3, #20
 8004400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004404:	430b      	orrs	r3, r1
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	6892      	ldr	r2, [r2, #8]
 800440a:	4619      	mov	r1, r3
 800440c:	f7ff f8d2 	bl	80035b4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f280 80d7 	bge.w	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a06      	ldr	r2, [pc, #24]	; (8004438 <HAL_ADC_ConfigChannel+0x88c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_ADC_ConfigChannel+0x882>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <HAL_ADC_ConfigChannel+0x890>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10a      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x898>
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <HAL_ADC_ConfigChannel+0x894>)
 8004430:	e009      	b.n	8004446 <HAL_ADC_ConfigChannel+0x89a>
 8004432:	bf00      	nop
 8004434:	47ff0000 	.word	0x47ff0000
 8004438:	40022000 	.word	0x40022000
 800443c:	40022100 	.word	0x40022100
 8004440:	40022300 	.word	0x40022300
 8004444:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_ADC_ConfigChannel+0xa30>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe ff88 	bl	800335c <LL_ADC_GetCommonPathInternalCh>
 800444c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a62      	ldr	r2, [pc, #392]	; (80045e0 <HAL_ADC_ConfigChannel+0xa34>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_ADC_ConfigChannel+0x8b8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a61      	ldr	r2, [pc, #388]	; (80045e4 <HAL_ADC_ConfigChannel+0xa38>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10e      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x8d6>
 8004464:	485e      	ldr	r0, [pc, #376]	; (80045e0 <HAL_ADC_ConfigChannel+0xa34>)
 8004466:	f7ff f95f 	bl	8003728 <LL_ADC_IsEnabled>
 800446a:	4604      	mov	r4, r0
 800446c:	485d      	ldr	r0, [pc, #372]	; (80045e4 <HAL_ADC_ConfigChannel+0xa38>)
 800446e:	f7ff f95b 	bl	8003728 <LL_ADC_IsEnabled>
 8004472:	4603      	mov	r3, r0
 8004474:	4323      	orrs	r3, r4
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	e008      	b.n	8004494 <HAL_ADC_ConfigChannel+0x8e8>
 8004482:	4859      	ldr	r0, [pc, #356]	; (80045e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004484:	f7ff f950 	bl	8003728 <LL_ADC_IsEnabled>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	bf0c      	ite	eq
 800448e:	2301      	moveq	r3, #1
 8004490:	2300      	movne	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8084 	beq.w	80045a2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a53      	ldr	r2, [pc, #332]	; (80045ec <HAL_ADC_ConfigChannel+0xa40>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d132      	bne.n	800450a <HAL_ADC_ConfigChannel+0x95e>
 80044a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d12c      	bne.n	800450a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a4c      	ldr	r2, [pc, #304]	; (80045e8 <HAL_ADC_ConfigChannel+0xa3c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	f040 8086 	bne.w	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a47      	ldr	r2, [pc, #284]	; (80045e0 <HAL_ADC_ConfigChannel+0xa34>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_ADC_ConfigChannel+0x924>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a46      	ldr	r2, [pc, #280]	; (80045e4 <HAL_ADC_ConfigChannel+0xa38>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x928>
 80044d0:	4a47      	ldr	r2, [pc, #284]	; (80045f0 <HAL_ADC_ConfigChannel+0xa44>)
 80044d2:	e000      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x92a>
 80044d4:	4a41      	ldr	r2, [pc, #260]	; (80045dc <HAL_ADC_ConfigChannel+0xa30>)
 80044d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7fe ff28 	bl	8003336 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e6:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <HAL_ADC_ConfigChannel+0xa48>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	4a42      	ldr	r2, [pc, #264]	; (80045f8 <HAL_ADC_ConfigChannel+0xa4c>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	3301      	adds	r3, #1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044fa:	e002      	b.n	8004502 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	3b01      	subs	r3, #1
 8004500:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f9      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004508:	e05e      	b.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3b      	ldr	r2, [pc, #236]	; (80045fc <HAL_ADC_ConfigChannel+0xa50>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d120      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x9aa>
 8004514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11a      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a30      	ldr	r2, [pc, #192]	; (80045e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d14e      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <HAL_ADC_ConfigChannel+0xa34>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_ADC_ConfigChannel+0x992>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <HAL_ADC_ConfigChannel+0xa38>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d101      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x996>
 800453e:	4a2c      	ldr	r2, [pc, #176]	; (80045f0 <HAL_ADC_ConfigChannel+0xa44>)
 8004540:	e000      	b.n	8004544 <HAL_ADC_ConfigChannel+0x998>
 8004542:	4a26      	ldr	r2, [pc, #152]	; (80045dc <HAL_ADC_ConfigChannel+0xa30>)
 8004544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f7fe fef1 	bl	8003336 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004554:	e038      	b.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <HAL_ADC_ConfigChannel+0xa54>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d133      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
 8004560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d12d      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d128      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <HAL_ADC_ConfigChannel+0xa34>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_ADC_ConfigChannel+0x9de>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <HAL_ADC_ConfigChannel+0xa38>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <HAL_ADC_ConfigChannel+0x9e2>
 800458a:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <HAL_ADC_ConfigChannel+0xa44>)
 800458c:	e000      	b.n	8004590 <HAL_ADC_ConfigChannel+0x9e4>
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <HAL_ADC_ConfigChannel+0xa30>)
 8004590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7fe fecb 	bl	8003336 <LL_ADC_SetCommonPathInternalCh>
 80045a0:	e012      	b.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80045b4:	e008      	b.n	80045c8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80045d0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	37e4      	adds	r7, #228	; 0xe4
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}
 80045dc:	58026300 	.word	0x58026300
 80045e0:	40022000 	.word	0x40022000
 80045e4:	40022100 	.word	0x40022100
 80045e8:	58026000 	.word	0x58026000
 80045ec:	c7520000 	.word	0xc7520000
 80045f0:	40022300 	.word	0x40022300
 80045f4:	24000000 	.word	0x24000000
 80045f8:	053e2d63 	.word	0x053e2d63
 80045fc:	c3210000 	.word	0xc3210000
 8004600:	cb840000 	.word	0xcb840000

08004604 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6b      	ldr	r2, [pc, #428]	; (80047c0 <ADC_ConfigureBoostMode+0x1bc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <ADC_ConfigureBoostMode+0x1c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6a      	ldr	r2, [pc, #424]	; (80047c4 <ADC_ConfigureBoostMode+0x1c0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d109      	bne.n	8004634 <ADC_ConfigureBoostMode+0x30>
 8004620:	4b69      	ldr	r3, [pc, #420]	; (80047c8 <ADC_ConfigureBoostMode+0x1c4>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e008      	b.n	8004646 <ADC_ConfigureBoostMode+0x42>
 8004634:	4b65      	ldr	r3, [pc, #404]	; (80047cc <ADC_ConfigureBoostMode+0x1c8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01c      	beq.n	8004684 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800464a:	f003 fe71 	bl	8008330 <HAL_RCC_GetHCLKFreq>
 800464e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004658:	d010      	beq.n	800467c <ADC_ConfigureBoostMode+0x78>
 800465a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800465e:	d871      	bhi.n	8004744 <ADC_ConfigureBoostMode+0x140>
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d002      	beq.n	800466c <ADC_ConfigureBoostMode+0x68>
 8004666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800466a:	d16b      	bne.n	8004744 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	60fb      	str	r3, [r7, #12]
        break;
 800467a:	e066      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	60fb      	str	r3, [r7, #12]
        break;
 8004682:	e062      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004684:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004688:	f004 fda8 	bl	80091dc <HAL_RCCEx_GetPeriphCLKFreq>
 800468c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004696:	d051      	beq.n	800473c <ADC_ConfigureBoostMode+0x138>
 8004698:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800469c:	d854      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 800469e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80046a2:	d047      	beq.n	8004734 <ADC_ConfigureBoostMode+0x130>
 80046a4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80046a8:	d84e      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80046ae:	d03d      	beq.n	800472c <ADC_ConfigureBoostMode+0x128>
 80046b0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80046b4:	d848      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ba:	d033      	beq.n	8004724 <ADC_ConfigureBoostMode+0x120>
 80046bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c0:	d842      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046c2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046c6:	d029      	beq.n	800471c <ADC_ConfigureBoostMode+0x118>
 80046c8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046cc:	d83c      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046d2:	d01a      	beq.n	800470a <ADC_ConfigureBoostMode+0x106>
 80046d4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046d8:	d836      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046de:	d014      	beq.n	800470a <ADC_ConfigureBoostMode+0x106>
 80046e0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046e4:	d830      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ea:	d00e      	beq.n	800470a <ADC_ConfigureBoostMode+0x106>
 80046ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f0:	d82a      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046f6:	d008      	beq.n	800470a <ADC_ConfigureBoostMode+0x106>
 80046f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046fc:	d824      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 80046fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004702:	d002      	beq.n	800470a <ADC_ConfigureBoostMode+0x106>
 8004704:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004708:	d11e      	bne.n	8004748 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	60fb      	str	r3, [r7, #12]
        break;
 800471a:	e016      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	60fb      	str	r3, [r7, #12]
        break;
 8004722:	e012      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	60fb      	str	r3, [r7, #12]
        break;
 800472a:	e00e      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	60fb      	str	r3, [r7, #12]
        break;
 8004732:	e00a      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	09db      	lsrs	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
        break;
 800473a:	e006      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	60fb      	str	r3, [r7, #12]
        break;
 8004742:	e002      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
        break;
 8004744:	bf00      	nop
 8004746:	e000      	b.n	800474a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004748:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <ADC_ConfigureBoostMode+0x1cc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d808      	bhi.n	800476a <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004766:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004768:	e025      	b.n	80047b6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <ADC_ConfigureBoostMode+0x1d0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d80a      	bhi.n	8004788 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004784:	609a      	str	r2, [r3, #8]
}
 8004786:	e016      	b.n	80047b6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <ADC_ConfigureBoostMode+0x1d4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d80a      	bhi.n	80047a6 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	e007      	b.n	80047b6 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80047b4:	609a      	str	r2, [r3, #8]
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40022000 	.word	0x40022000
 80047c4:	40022100 	.word	0x40022100
 80047c8:	40022300 	.word	0x40022300
 80047cc:	58026300 	.word	0x58026300
 80047d0:	005f5e10 	.word	0x005f5e10
 80047d4:	00bebc20 	.word	0x00bebc20
 80047d8:	017d7840 	.word	0x017d7840

080047dc <LL_ADC_IsEnabled>:
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <LL_ADC_IsEnabled+0x18>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <LL_ADC_IsEnabled+0x1a>
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_ADC_REG_IsConversionOngoing>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d101      	bne.n	800481a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b0a3      	sub	sp, #140	; 0x8c
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004842:	2302      	movs	r3, #2
 8004844:	e0c1      	b.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004852:	2300      	movs	r3, #0
 8004854:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a5e      	ldr	r2, [pc, #376]	; (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d102      	bne.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004860:	4b5d      	ldr	r3, [pc, #372]	; (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e001      	b.n	800486a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0a0      	b.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff ffb9 	bl	8004802 <LL_ADC_REG_IsConversionOngoing>
 8004890:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ffb2 	bl	8004802 <LL_ADC_REG_IsConversionOngoing>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 8081 	bne.w	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d17c      	bne.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a48      	ldr	r2, [pc, #288]	; (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a46      	ldr	r2, [pc, #280]	; (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80048c2:	4b46      	ldr	r3, [pc, #280]	; (80049dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048c4:	e000      	b.n	80048c8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048c6:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048c8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d039      	beq.n	8004946 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	431a      	orrs	r2, r3
 80048e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3a      	ldr	r2, [pc, #232]	; (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a39      	ldr	r2, [pc, #228]	; (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10e      	bne.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80048f8:	4836      	ldr	r0, [pc, #216]	; (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048fa:	f7ff ff6f 	bl	80047dc <LL_ADC_IsEnabled>
 80048fe:	4604      	mov	r4, r0
 8004900:	4835      	ldr	r0, [pc, #212]	; (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004902:	f7ff ff6b 	bl	80047dc <LL_ADC_IsEnabled>
 8004906:	4603      	mov	r3, r0
 8004908:	4323      	orrs	r3, r4
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	e008      	b.n	8004928 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004916:	4833      	ldr	r0, [pc, #204]	; (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004918:	f7ff ff60 	bl	80047dc <LL_ADC_IsEnabled>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d047      	beq.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800492c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004932:	4013      	ands	r3, r2
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	6811      	ldr	r1, [r2, #0]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	6892      	ldr	r2, [r2, #8]
 800493c:	430a      	orrs	r2, r1
 800493e:	431a      	orrs	r2, r3
 8004940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004942:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004944:	e03a      	b.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800494e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004950:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10e      	bne.n	8004984 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004966:	481b      	ldr	r0, [pc, #108]	; (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004968:	f7ff ff38 	bl	80047dc <LL_ADC_IsEnabled>
 800496c:	4604      	mov	r4, r0
 800496e:	481a      	ldr	r0, [pc, #104]	; (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004970:	f7ff ff34 	bl	80047dc <LL_ADC_IsEnabled>
 8004974:	4603      	mov	r3, r0
 8004976:	4323      	orrs	r3, r4
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e008      	b.n	8004996 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004984:	4817      	ldr	r0, [pc, #92]	; (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004986:	f7ff ff29 	bl	80047dc <LL_ADC_IsEnabled>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800499a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80049a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a6:	e009      	b.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80049ba:	e000      	b.n	80049be <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	378c      	adds	r7, #140	; 0x8c
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd90      	pop	{r4, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40022000 	.word	0x40022000
 80049d8:	40022100 	.word	0x40022100
 80049dc:	40022300 	.word	0x40022300
 80049e0:	58026300 	.word	0x58026300
 80049e4:	58026000 	.word	0x58026000
 80049e8:	fffff0e0 	.word	0xfffff0e0

080049ec <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e023      	b.n	8004a46 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fd fd0a 	bl	800242c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <__NVIC_SetPriorityGrouping+0x40>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <__NVIC_SetPriorityGrouping+0x44>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a7e:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <__NVIC_SetPriorityGrouping+0x40>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	60d3      	str	r3, [r2, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000ed00 	.word	0xe000ed00
 8004a94:	05fa0000 	.word	0x05fa0000

08004a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f003 0307 	and.w	r3, r3, #7
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	db0b      	blt.n	8004ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	4907      	ldr	r1, [pc, #28]	; (8004aec <__NVIC_EnableIRQ+0x38>)
 8004ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8004ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	6039      	str	r1, [r7, #0]
 8004afa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db0a      	blt.n	8004b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	490c      	ldr	r1, [pc, #48]	; (8004b3c <__NVIC_SetPriority+0x4c>)
 8004b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	440b      	add	r3, r1
 8004b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b18:	e00a      	b.n	8004b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4908      	ldr	r1, [pc, #32]	; (8004b40 <__NVIC_SetPriority+0x50>)
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	3b04      	subs	r3, #4
 8004b28:	0112      	lsls	r2, r2, #4
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	761a      	strb	r2, [r3, #24]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000e100 	.word	0xe000e100
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	; 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f1c3 0307 	rsb	r3, r3, #7
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf28      	it	cs
 8004b62:	2304      	movcs	r3, #4
 8004b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d902      	bls.n	8004b74 <NVIC_EncodePriority+0x30>
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3b03      	subs	r3, #3
 8004b72:	e000      	b.n	8004b76 <NVIC_EncodePriority+0x32>
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43da      	mvns	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	401a      	ands	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	43d9      	mvns	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	4313      	orrs	r3, r2
         );
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3724      	adds	r7, #36	; 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bbc:	d301      	bcc.n	8004bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00f      	b.n	8004be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <SysTick_Config+0x40>)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bca:	210f      	movs	r1, #15
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	f7ff ff8e 	bl	8004af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <SysTick_Config+0x40>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bda:	4b04      	ldr	r3, [pc, #16]	; (8004bec <SysTick_Config+0x40>)
 8004bdc:	2207      	movs	r2, #7
 8004bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	e000e010 	.word	0xe000e010

08004bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff29 	bl	8004a50 <__NVIC_SetPriorityGrouping>
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c14:	f7ff ff40 	bl	8004a98 <__NVIC_GetPriorityGrouping>
 8004c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ff90 	bl	8004b44 <NVIC_EncodePriority>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff5f 	bl	8004af0 <__NVIC_SetPriority>
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	4603      	mov	r3, r0
 8004c42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff33 	bl	8004ab4 <__NVIC_EnableIRQ>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ffa4 	bl	8004bac <SysTick_Config>
 8004c64:	4603      	mov	r3, r0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c78:	f7fe fb28 	bl	80032cc <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e314      	b.n	80052b2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a66      	ldr	r2, [pc, #408]	; (8004e28 <HAL_DMA_Init+0x1b8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d04a      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a65      	ldr	r2, [pc, #404]	; (8004e2c <HAL_DMA_Init+0x1bc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d045      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a63      	ldr	r2, [pc, #396]	; (8004e30 <HAL_DMA_Init+0x1c0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d040      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a62      	ldr	r2, [pc, #392]	; (8004e34 <HAL_DMA_Init+0x1c4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d03b      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a60      	ldr	r2, [pc, #384]	; (8004e38 <HAL_DMA_Init+0x1c8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d036      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a5f      	ldr	r2, [pc, #380]	; (8004e3c <HAL_DMA_Init+0x1cc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d031      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5d      	ldr	r2, [pc, #372]	; (8004e40 <HAL_DMA_Init+0x1d0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02c      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a5c      	ldr	r2, [pc, #368]	; (8004e44 <HAL_DMA_Init+0x1d4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d027      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a5a      	ldr	r2, [pc, #360]	; (8004e48 <HAL_DMA_Init+0x1d8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d022      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a59      	ldr	r2, [pc, #356]	; (8004e4c <HAL_DMA_Init+0x1dc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d01d      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a57      	ldr	r2, [pc, #348]	; (8004e50 <HAL_DMA_Init+0x1e0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a56      	ldr	r2, [pc, #344]	; (8004e54 <HAL_DMA_Init+0x1e4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a54      	ldr	r2, [pc, #336]	; (8004e58 <HAL_DMA_Init+0x1e8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a53      	ldr	r2, [pc, #332]	; (8004e5c <HAL_DMA_Init+0x1ec>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a51      	ldr	r2, [pc, #324]	; (8004e60 <HAL_DMA_Init+0x1f0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_DMA_Init+0xb8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a50      	ldr	r2, [pc, #320]	; (8004e64 <HAL_DMA_Init+0x1f4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA_Init+0xbc>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_DMA_Init+0xbe>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 813c 	beq.w	8004fac <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a37      	ldr	r2, [pc, #220]	; (8004e28 <HAL_DMA_Init+0x1b8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d04a      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a36      	ldr	r2, [pc, #216]	; (8004e2c <HAL_DMA_Init+0x1bc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d045      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a34      	ldr	r2, [pc, #208]	; (8004e30 <HAL_DMA_Init+0x1c0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d040      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <HAL_DMA_Init+0x1c4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d03b      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a31      	ldr	r2, [pc, #196]	; (8004e38 <HAL_DMA_Init+0x1c8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d036      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a30      	ldr	r2, [pc, #192]	; (8004e3c <HAL_DMA_Init+0x1cc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d031      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a2e      	ldr	r2, [pc, #184]	; (8004e40 <HAL_DMA_Init+0x1d0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02c      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2d      	ldr	r2, [pc, #180]	; (8004e44 <HAL_DMA_Init+0x1d4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d027      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <HAL_DMA_Init+0x1d8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d022      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <HAL_DMA_Init+0x1dc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d01d      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <HAL_DMA_Init+0x1e0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d018      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <HAL_DMA_Init+0x1e4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a25      	ldr	r2, [pc, #148]	; (8004e58 <HAL_DMA_Init+0x1e8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <HAL_DMA_Init+0x1ec>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <HAL_DMA_Init+0x1f0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_DMA_Init+0x174>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <HAL_DMA_Init+0x1f4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d108      	bne.n	8004df6 <HAL_DMA_Init+0x186>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e007      	b.n	8004e06 <HAL_DMA_Init+0x196>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e06:	e02f      	b.n	8004e68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e08:	f7fe fa60 	bl	80032cc <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d928      	bls.n	8004e68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e244      	b.n	80052b2 <HAL_DMA_Init+0x642>
 8004e28:	40020010 	.word	0x40020010
 8004e2c:	40020028 	.word	0x40020028
 8004e30:	40020040 	.word	0x40020040
 8004e34:	40020058 	.word	0x40020058
 8004e38:	40020070 	.word	0x40020070
 8004e3c:	40020088 	.word	0x40020088
 8004e40:	400200a0 	.word	0x400200a0
 8004e44:	400200b8 	.word	0x400200b8
 8004e48:	40020410 	.word	0x40020410
 8004e4c:	40020428 	.word	0x40020428
 8004e50:	40020440 	.word	0x40020440
 8004e54:	40020458 	.word	0x40020458
 8004e58:	40020470 	.word	0x40020470
 8004e5c:	40020488 	.word	0x40020488
 8004e60:	400204a0 	.word	0x400204a0
 8004e64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1c8      	bne.n	8004e08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4b84      	ldr	r3, [pc, #528]	; (8005094 <HAL_DMA_Init+0x424>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d107      	bne.n	8004ecc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b28      	cmp	r3, #40	; 0x28
 8004ed2:	d903      	bls.n	8004edc <HAL_DMA_Init+0x26c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8004eda:	d91f      	bls.n	8004f1c <HAL_DMA_Init+0x2ac>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee2:	d903      	bls.n	8004eec <HAL_DMA_Init+0x27c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b42      	cmp	r3, #66	; 0x42
 8004eea:	d917      	bls.n	8004f1c <HAL_DMA_Init+0x2ac>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b46      	cmp	r3, #70	; 0x46
 8004ef2:	d903      	bls.n	8004efc <HAL_DMA_Init+0x28c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b48      	cmp	r3, #72	; 0x48
 8004efa:	d90f      	bls.n	8004f1c <HAL_DMA_Init+0x2ac>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b4e      	cmp	r3, #78	; 0x4e
 8004f02:	d903      	bls.n	8004f0c <HAL_DMA_Init+0x29c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b52      	cmp	r3, #82	; 0x52
 8004f0a:	d907      	bls.n	8004f1c <HAL_DMA_Init+0x2ac>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b73      	cmp	r3, #115	; 0x73
 8004f12:	d905      	bls.n	8004f20 <HAL_DMA_Init+0x2b0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b77      	cmp	r3, #119	; 0x77
 8004f1a:	d801      	bhi.n	8004f20 <HAL_DMA_Init+0x2b0>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_DMA_Init+0x2b2>
 8004f20:	2300      	movs	r3, #0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0307 	bic.w	r3, r3, #7
 8004f44:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d117      	bne.n	8004f88 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00e      	beq.n	8004f88 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 f9b6 	bl	80062dc <DMA_CheckFifoParam>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2240      	movs	r2, #64	; 0x40
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e194      	b.n	80052b2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 f8f1 	bl	8006178 <DMA_CalcBaseAndBitshift>
 8004f96:	4603      	mov	r3, r0
 8004f98:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	223f      	movs	r2, #63	; 0x3f
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	609a      	str	r2, [r3, #8]
 8004faa:	e0ca      	b.n	8005142 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a39      	ldr	r2, [pc, #228]	; (8005098 <HAL_DMA_Init+0x428>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d022      	beq.n	8004ffc <HAL_DMA_Init+0x38c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <HAL_DMA_Init+0x42c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d01d      	beq.n	8004ffc <HAL_DMA_Init+0x38c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a36      	ldr	r2, [pc, #216]	; (80050a0 <HAL_DMA_Init+0x430>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_DMA_Init+0x38c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a35      	ldr	r2, [pc, #212]	; (80050a4 <HAL_DMA_Init+0x434>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <HAL_DMA_Init+0x38c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a33      	ldr	r2, [pc, #204]	; (80050a8 <HAL_DMA_Init+0x438>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_DMA_Init+0x38c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a32      	ldr	r2, [pc, #200]	; (80050ac <HAL_DMA_Init+0x43c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_DMA_Init+0x38c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a30      	ldr	r2, [pc, #192]	; (80050b0 <HAL_DMA_Init+0x440>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_DMA_Init+0x38c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2f      	ldr	r2, [pc, #188]	; (80050b4 <HAL_DMA_Init+0x444>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d101      	bne.n	8005000 <HAL_DMA_Init+0x390>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <HAL_DMA_Init+0x392>
 8005000:	2300      	movs	r3, #0
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8094 	beq.w	8005130 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_DMA_Init+0x428>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d021      	beq.n	8005056 <HAL_DMA_Init+0x3e6>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a21      	ldr	r2, [pc, #132]	; (800509c <HAL_DMA_Init+0x42c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01c      	beq.n	8005056 <HAL_DMA_Init+0x3e6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <HAL_DMA_Init+0x430>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d017      	beq.n	8005056 <HAL_DMA_Init+0x3e6>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <HAL_DMA_Init+0x434>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d012      	beq.n	8005056 <HAL_DMA_Init+0x3e6>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_DMA_Init+0x438>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00d      	beq.n	8005056 <HAL_DMA_Init+0x3e6>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_DMA_Init+0x43c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d008      	beq.n	8005056 <HAL_DMA_Init+0x3e6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_DMA_Init+0x440>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <HAL_DMA_Init+0x3e6>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_DMA_Init+0x444>)
 8005054:	4293      	cmp	r3, r2
 8005056:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_DMA_Init+0x448>)
 8005074:	4013      	ands	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d01d      	beq.n	80050bc <HAL_DMA_Init+0x44c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d102      	bne.n	800508e <HAL_DMA_Init+0x41e>
 8005088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800508c:	e017      	b.n	80050be <HAL_DMA_Init+0x44e>
 800508e:	2300      	movs	r3, #0
 8005090:	e015      	b.n	80050be <HAL_DMA_Init+0x44e>
 8005092:	bf00      	nop
 8005094:	fe10803f 	.word	0xfe10803f
 8005098:	58025408 	.word	0x58025408
 800509c:	5802541c 	.word	0x5802541c
 80050a0:	58025430 	.word	0x58025430
 80050a4:	58025444 	.word	0x58025444
 80050a8:	58025458 	.word	0x58025458
 80050ac:	5802546c 	.word	0x5802546c
 80050b0:	58025480 	.word	0x58025480
 80050b4:	58025494 	.word	0x58025494
 80050b8:	fffe000f 	.word	0xfffe000f
 80050bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68d2      	ldr	r2, [r2, #12]
 80050c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4b6e      	ldr	r3, [pc, #440]	; (80052bc <HAL_DMA_Init+0x64c>)
 8005104:	4413      	add	r3, r2
 8005106:	4a6e      	ldr	r2, [pc, #440]	; (80052c0 <HAL_DMA_Init+0x650>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 f82f 	bl	8006178 <DMA_CalcBaseAndBitshift>
 800511a:	4603      	mov	r3, r0
 800511c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2201      	movs	r2, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	e008      	b.n	8005142 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2240      	movs	r2, #64	; 0x40
 8005134:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2203      	movs	r2, #3
 800513a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0b7      	b.n	80052b2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a5f      	ldr	r2, [pc, #380]	; (80052c4 <HAL_DMA_Init+0x654>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d072      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_DMA_Init+0x658>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d06d      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a5c      	ldr	r2, [pc, #368]	; (80052cc <HAL_DMA_Init+0x65c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d068      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5a      	ldr	r2, [pc, #360]	; (80052d0 <HAL_DMA_Init+0x660>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d063      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a59      	ldr	r2, [pc, #356]	; (80052d4 <HAL_DMA_Init+0x664>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d05e      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <HAL_DMA_Init+0x668>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d059      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a56      	ldr	r2, [pc, #344]	; (80052dc <HAL_DMA_Init+0x66c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d054      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_DMA_Init+0x670>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04f      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a53      	ldr	r2, [pc, #332]	; (80052e4 <HAL_DMA_Init+0x674>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d04a      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a51      	ldr	r2, [pc, #324]	; (80052e8 <HAL_DMA_Init+0x678>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d045      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a50      	ldr	r2, [pc, #320]	; (80052ec <HAL_DMA_Init+0x67c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d040      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a4e      	ldr	r2, [pc, #312]	; (80052f0 <HAL_DMA_Init+0x680>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d03b      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a4d      	ldr	r2, [pc, #308]	; (80052f4 <HAL_DMA_Init+0x684>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d036      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a4b      	ldr	r2, [pc, #300]	; (80052f8 <HAL_DMA_Init+0x688>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d031      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4a      	ldr	r2, [pc, #296]	; (80052fc <HAL_DMA_Init+0x68c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d02c      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a48      	ldr	r2, [pc, #288]	; (8005300 <HAL_DMA_Init+0x690>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d027      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a47      	ldr	r2, [pc, #284]	; (8005304 <HAL_DMA_Init+0x694>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d022      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a45      	ldr	r2, [pc, #276]	; (8005308 <HAL_DMA_Init+0x698>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01d      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a44      	ldr	r2, [pc, #272]	; (800530c <HAL_DMA_Init+0x69c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d018      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a42      	ldr	r2, [pc, #264]	; (8005310 <HAL_DMA_Init+0x6a0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a41      	ldr	r2, [pc, #260]	; (8005314 <HAL_DMA_Init+0x6a4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00e      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a3f      	ldr	r2, [pc, #252]	; (8005318 <HAL_DMA_Init+0x6a8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d009      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a3e      	ldr	r2, [pc, #248]	; (800531c <HAL_DMA_Init+0x6ac>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_DMA_Init+0x5c2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a3c      	ldr	r2, [pc, #240]	; (8005320 <HAL_DMA_Init+0x6b0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_DMA_Init+0x5c6>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_DMA_Init+0x5c8>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d032      	beq.n	80052a2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 f8c9 	bl	80063d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d102      	bne.n	8005250 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005264:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d010      	beq.n	8005290 <HAL_DMA_Init+0x620>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b08      	cmp	r3, #8
 8005274:	d80c      	bhi.n	8005290 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 f946 	bl	8006508 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	e008      	b.n	80052a2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	a7fdabf8 	.word	0xa7fdabf8
 80052c0:	cccccccd 	.word	0xcccccccd
 80052c4:	40020010 	.word	0x40020010
 80052c8:	40020028 	.word	0x40020028
 80052cc:	40020040 	.word	0x40020040
 80052d0:	40020058 	.word	0x40020058
 80052d4:	40020070 	.word	0x40020070
 80052d8:	40020088 	.word	0x40020088
 80052dc:	400200a0 	.word	0x400200a0
 80052e0:	400200b8 	.word	0x400200b8
 80052e4:	40020410 	.word	0x40020410
 80052e8:	40020428 	.word	0x40020428
 80052ec:	40020440 	.word	0x40020440
 80052f0:	40020458 	.word	0x40020458
 80052f4:	40020470 	.word	0x40020470
 80052f8:	40020488 	.word	0x40020488
 80052fc:	400204a0 	.word	0x400204a0
 8005300:	400204b8 	.word	0x400204b8
 8005304:	58025408 	.word	0x58025408
 8005308:	5802541c 	.word	0x5802541c
 800530c:	58025430 	.word	0x58025430
 8005310:	58025444 	.word	0x58025444
 8005314:	58025458 	.word	0x58025458
 8005318:	5802546c 	.word	0x5802546c
 800531c:	58025480 	.word	0x58025480
 8005320:	58025494 	.word	0x58025494

08005324 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005330:	4b67      	ldr	r3, [pc, #412]	; (80054d0 <HAL_DMA_IRQHandler+0x1ac>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a67      	ldr	r2, [pc, #412]	; (80054d4 <HAL_DMA_IRQHandler+0x1b0>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a5f      	ldr	r2, [pc, #380]	; (80054d8 <HAL_DMA_IRQHandler+0x1b4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04a      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a5d      	ldr	r2, [pc, #372]	; (80054dc <HAL_DMA_IRQHandler+0x1b8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d045      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5c      	ldr	r2, [pc, #368]	; (80054e0 <HAL_DMA_IRQHandler+0x1bc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d040      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a5a      	ldr	r2, [pc, #360]	; (80054e4 <HAL_DMA_IRQHandler+0x1c0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d03b      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a59      	ldr	r2, [pc, #356]	; (80054e8 <HAL_DMA_IRQHandler+0x1c4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d036      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a57      	ldr	r2, [pc, #348]	; (80054ec <HAL_DMA_IRQHandler+0x1c8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d031      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a56      	ldr	r2, [pc, #344]	; (80054f0 <HAL_DMA_IRQHandler+0x1cc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d02c      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a54      	ldr	r2, [pc, #336]	; (80054f4 <HAL_DMA_IRQHandler+0x1d0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d027      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a53      	ldr	r2, [pc, #332]	; (80054f8 <HAL_DMA_IRQHandler+0x1d4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d022      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a51      	ldr	r2, [pc, #324]	; (80054fc <HAL_DMA_IRQHandler+0x1d8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01d      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a50      	ldr	r2, [pc, #320]	; (8005500 <HAL_DMA_IRQHandler+0x1dc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a4e      	ldr	r2, [pc, #312]	; (8005504 <HAL_DMA_IRQHandler+0x1e0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a4d      	ldr	r2, [pc, #308]	; (8005508 <HAL_DMA_IRQHandler+0x1e4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a4b      	ldr	r2, [pc, #300]	; (800550c <HAL_DMA_IRQHandler+0x1e8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a4a      	ldr	r2, [pc, #296]	; (8005510 <HAL_DMA_IRQHandler+0x1ec>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xd2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a48      	ldr	r2, [pc, #288]	; (8005514 <HAL_DMA_IRQHandler+0x1f0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <HAL_DMA_IRQHandler+0xd6>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <HAL_DMA_IRQHandler+0xd8>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 842b 	beq.w	8005c58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2208      	movs	r2, #8
 800540c:	409a      	lsls	r2, r3
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80a2 	beq.w	800555c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2e      	ldr	r2, [pc, #184]	; (80054d8 <HAL_DMA_IRQHandler+0x1b4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d04a      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2d      	ldr	r2, [pc, #180]	; (80054dc <HAL_DMA_IRQHandler+0x1b8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d045      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2b      	ldr	r2, [pc, #172]	; (80054e0 <HAL_DMA_IRQHandler+0x1bc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d040      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2a      	ldr	r2, [pc, #168]	; (80054e4 <HAL_DMA_IRQHandler+0x1c0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d03b      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a28      	ldr	r2, [pc, #160]	; (80054e8 <HAL_DMA_IRQHandler+0x1c4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d036      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a27      	ldr	r2, [pc, #156]	; (80054ec <HAL_DMA_IRQHandler+0x1c8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d031      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <HAL_DMA_IRQHandler+0x1cc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d02c      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <HAL_DMA_IRQHandler+0x1d0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d027      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_DMA_IRQHandler+0x1d4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d022      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a21      	ldr	r2, [pc, #132]	; (80054fc <HAL_DMA_IRQHandler+0x1d8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d01d      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_DMA_IRQHandler+0x1dc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d018      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <HAL_DMA_IRQHandler+0x1e0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_DMA_IRQHandler+0x1e4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1b      	ldr	r2, [pc, #108]	; (800550c <HAL_DMA_IRQHandler+0x1e8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d009      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <HAL_DMA_IRQHandler+0x1ec>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x194>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a18      	ldr	r2, [pc, #96]	; (8005514 <HAL_DMA_IRQHandler+0x1f0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d12f      	bne.n	8005518 <HAL_DMA_IRQHandler+0x1f4>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e02e      	b.n	800552c <HAL_DMA_IRQHandler+0x208>
 80054ce:	bf00      	nop
 80054d0:	24000000 	.word	0x24000000
 80054d4:	1b4e81b5 	.word	0x1b4e81b5
 80054d8:	40020010 	.word	0x40020010
 80054dc:	40020028 	.word	0x40020028
 80054e0:	40020040 	.word	0x40020040
 80054e4:	40020058 	.word	0x40020058
 80054e8:	40020070 	.word	0x40020070
 80054ec:	40020088 	.word	0x40020088
 80054f0:	400200a0 	.word	0x400200a0
 80054f4:	400200b8 	.word	0x400200b8
 80054f8:	40020410 	.word	0x40020410
 80054fc:	40020428 	.word	0x40020428
 8005500:	40020440 	.word	0x40020440
 8005504:	40020458 	.word	0x40020458
 8005508:	40020470 	.word	0x40020470
 800550c:	40020488 	.word	0x40020488
 8005510:	400204a0 	.word	0x400204a0
 8005514:	400204b8 	.word	0x400204b8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	bf14      	ite	ne
 8005526:	2301      	movne	r3, #1
 8005528:	2300      	moveq	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0204 	bic.w	r2, r2, #4
 800553e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	2208      	movs	r2, #8
 800554a:	409a      	lsls	r2, r3
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	f043 0201 	orr.w	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d06e      	beq.n	8005650 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a69      	ldr	r2, [pc, #420]	; (800571c <HAL_DMA_IRQHandler+0x3f8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d04a      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a67      	ldr	r2, [pc, #412]	; (8005720 <HAL_DMA_IRQHandler+0x3fc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d045      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a66      	ldr	r2, [pc, #408]	; (8005724 <HAL_DMA_IRQHandler+0x400>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d040      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a64      	ldr	r2, [pc, #400]	; (8005728 <HAL_DMA_IRQHandler+0x404>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d03b      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a63      	ldr	r2, [pc, #396]	; (800572c <HAL_DMA_IRQHandler+0x408>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d036      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a61      	ldr	r2, [pc, #388]	; (8005730 <HAL_DMA_IRQHandler+0x40c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d031      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a60      	ldr	r2, [pc, #384]	; (8005734 <HAL_DMA_IRQHandler+0x410>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d02c      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a5e      	ldr	r2, [pc, #376]	; (8005738 <HAL_DMA_IRQHandler+0x414>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d027      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a5d      	ldr	r2, [pc, #372]	; (800573c <HAL_DMA_IRQHandler+0x418>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d022      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a5b      	ldr	r2, [pc, #364]	; (8005740 <HAL_DMA_IRQHandler+0x41c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01d      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a5a      	ldr	r2, [pc, #360]	; (8005744 <HAL_DMA_IRQHandler+0x420>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d018      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a58      	ldr	r2, [pc, #352]	; (8005748 <HAL_DMA_IRQHandler+0x424>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d013      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a57      	ldr	r2, [pc, #348]	; (800574c <HAL_DMA_IRQHandler+0x428>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a55      	ldr	r2, [pc, #340]	; (8005750 <HAL_DMA_IRQHandler+0x42c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d009      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a54      	ldr	r2, [pc, #336]	; (8005754 <HAL_DMA_IRQHandler+0x430>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2ee>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a52      	ldr	r2, [pc, #328]	; (8005758 <HAL_DMA_IRQHandler+0x434>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d10a      	bne.n	8005628 <HAL_DMA_IRQHandler+0x304>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e003      	b.n	8005630 <HAL_DMA_IRQHandler+0x30c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00d      	beq.n	8005650 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2201      	movs	r2, #1
 800563e:	409a      	lsls	r2, r3
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f043 0202 	orr.w	r2, r3, #2
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2204      	movs	r2, #4
 800565a:	409a      	lsls	r2, r3
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 808f 	beq.w	8005784 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2c      	ldr	r2, [pc, #176]	; (800571c <HAL_DMA_IRQHandler+0x3f8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d04a      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2a      	ldr	r2, [pc, #168]	; (8005720 <HAL_DMA_IRQHandler+0x3fc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d045      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a29      	ldr	r2, [pc, #164]	; (8005724 <HAL_DMA_IRQHandler+0x400>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d040      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a27      	ldr	r2, [pc, #156]	; (8005728 <HAL_DMA_IRQHandler+0x404>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d03b      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a26      	ldr	r2, [pc, #152]	; (800572c <HAL_DMA_IRQHandler+0x408>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d036      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <HAL_DMA_IRQHandler+0x40c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d031      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a23      	ldr	r2, [pc, #140]	; (8005734 <HAL_DMA_IRQHandler+0x410>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d02c      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a21      	ldr	r2, [pc, #132]	; (8005738 <HAL_DMA_IRQHandler+0x414>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d027      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a20      	ldr	r2, [pc, #128]	; (800573c <HAL_DMA_IRQHandler+0x418>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d022      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_DMA_IRQHandler+0x41c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01d      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <HAL_DMA_IRQHandler+0x420>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d018      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <HAL_DMA_IRQHandler+0x424>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1a      	ldr	r2, [pc, #104]	; (800574c <HAL_DMA_IRQHandler+0x428>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_DMA_IRQHandler+0x42c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a17      	ldr	r2, [pc, #92]	; (8005754 <HAL_DMA_IRQHandler+0x430>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_DMA_IRQHandler+0x3e2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a15      	ldr	r2, [pc, #84]	; (8005758 <HAL_DMA_IRQHandler+0x434>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d12a      	bne.n	800575c <HAL_DMA_IRQHandler+0x438>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e023      	b.n	8005764 <HAL_DMA_IRQHandler+0x440>
 800571c:	40020010 	.word	0x40020010
 8005720:	40020028 	.word	0x40020028
 8005724:	40020040 	.word	0x40020040
 8005728:	40020058 	.word	0x40020058
 800572c:	40020070 	.word	0x40020070
 8005730:	40020088 	.word	0x40020088
 8005734:	400200a0 	.word	0x400200a0
 8005738:	400200b8 	.word	0x400200b8
 800573c:	40020410 	.word	0x40020410
 8005740:	40020428 	.word	0x40020428
 8005744:	40020440 	.word	0x40020440
 8005748:	40020458 	.word	0x40020458
 800574c:	40020470 	.word	0x40020470
 8005750:	40020488 	.word	0x40020488
 8005754:	400204a0 	.word	0x400204a0
 8005758:	400204b8 	.word	0x400204b8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00d      	beq.n	8005784 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2204      	movs	r2, #4
 8005772:	409a      	lsls	r2, r3
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	f043 0204 	orr.w	r2, r3, #4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2210      	movs	r2, #16
 800578e:	409a      	lsls	r2, r3
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a6 	beq.w	80058e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a85      	ldr	r2, [pc, #532]	; (80059b4 <HAL_DMA_IRQHandler+0x690>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d04a      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a83      	ldr	r2, [pc, #524]	; (80059b8 <HAL_DMA_IRQHandler+0x694>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d045      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a82      	ldr	r2, [pc, #520]	; (80059bc <HAL_DMA_IRQHandler+0x698>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d040      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a80      	ldr	r2, [pc, #512]	; (80059c0 <HAL_DMA_IRQHandler+0x69c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d03b      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a7f      	ldr	r2, [pc, #508]	; (80059c4 <HAL_DMA_IRQHandler+0x6a0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d036      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a7d      	ldr	r2, [pc, #500]	; (80059c8 <HAL_DMA_IRQHandler+0x6a4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d031      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a7c      	ldr	r2, [pc, #496]	; (80059cc <HAL_DMA_IRQHandler+0x6a8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d02c      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a7a      	ldr	r2, [pc, #488]	; (80059d0 <HAL_DMA_IRQHandler+0x6ac>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d027      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a79      	ldr	r2, [pc, #484]	; (80059d4 <HAL_DMA_IRQHandler+0x6b0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a77      	ldr	r2, [pc, #476]	; (80059d8 <HAL_DMA_IRQHandler+0x6b4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01d      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a76      	ldr	r2, [pc, #472]	; (80059dc <HAL_DMA_IRQHandler+0x6b8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a74      	ldr	r2, [pc, #464]	; (80059e0 <HAL_DMA_IRQHandler+0x6bc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a73      	ldr	r2, [pc, #460]	; (80059e4 <HAL_DMA_IRQHandler+0x6c0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a71      	ldr	r2, [pc, #452]	; (80059e8 <HAL_DMA_IRQHandler+0x6c4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a70      	ldr	r2, [pc, #448]	; (80059ec <HAL_DMA_IRQHandler+0x6c8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_DMA_IRQHandler+0x516>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a6e      	ldr	r2, [pc, #440]	; (80059f0 <HAL_DMA_IRQHandler+0x6cc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10a      	bne.n	8005850 <HAL_DMA_IRQHandler+0x52c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	bf14      	ite	ne
 8005848:	2301      	movne	r3, #1
 800584a:	2300      	moveq	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	e009      	b.n	8005864 <HAL_DMA_IRQHandler+0x540>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf14      	ite	ne
 800585e:	2301      	movne	r3, #1
 8005860:	2300      	moveq	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d03e      	beq.n	80058e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	2210      	movs	r2, #16
 8005872:	409a      	lsls	r2, r3
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d018      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d108      	bne.n	80058a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d024      	beq.n	80058e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
 80058a4:	e01f      	b.n	80058e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01b      	beq.n	80058e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
 80058b6:	e016      	b.n	80058e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d107      	bne.n	80058d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0208 	bic.w	r2, r2, #8
 80058d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	2220      	movs	r2, #32
 80058f0:	409a      	lsls	r2, r3
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8110 	beq.w	8005b1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <HAL_DMA_IRQHandler+0x690>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d04a      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <HAL_DMA_IRQHandler+0x694>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d045      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a29      	ldr	r2, [pc, #164]	; (80059bc <HAL_DMA_IRQHandler+0x698>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d040      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <HAL_DMA_IRQHandler+0x69c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d03b      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <HAL_DMA_IRQHandler+0x6a0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d036      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a25      	ldr	r2, [pc, #148]	; (80059c8 <HAL_DMA_IRQHandler+0x6a4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d031      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a23      	ldr	r2, [pc, #140]	; (80059cc <HAL_DMA_IRQHandler+0x6a8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d02c      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <HAL_DMA_IRQHandler+0x6ac>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d027      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <HAL_DMA_IRQHandler+0x6b0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d022      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <HAL_DMA_IRQHandler+0x6b4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d01d      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <HAL_DMA_IRQHandler+0x6b8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_DMA_IRQHandler+0x6bc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <HAL_DMA_IRQHandler+0x6c0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_DMA_IRQHandler+0x6c4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a17      	ldr	r2, [pc, #92]	; (80059ec <HAL_DMA_IRQHandler+0x6c8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_DMA_IRQHandler+0x678>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <HAL_DMA_IRQHandler+0x6cc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d12b      	bne.n	80059f4 <HAL_DMA_IRQHandler+0x6d0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e02a      	b.n	8005a08 <HAL_DMA_IRQHandler+0x6e4>
 80059b2:	bf00      	nop
 80059b4:	40020010 	.word	0x40020010
 80059b8:	40020028 	.word	0x40020028
 80059bc:	40020040 	.word	0x40020040
 80059c0:	40020058 	.word	0x40020058
 80059c4:	40020070 	.word	0x40020070
 80059c8:	40020088 	.word	0x40020088
 80059cc:	400200a0 	.word	0x400200a0
 80059d0:	400200b8 	.word	0x400200b8
 80059d4:	40020410 	.word	0x40020410
 80059d8:	40020428 	.word	0x40020428
 80059dc:	40020440 	.word	0x40020440
 80059e0:	40020458 	.word	0x40020458
 80059e4:	40020470 	.word	0x40020470
 80059e8:	40020488 	.word	0x40020488
 80059ec:	400204a0 	.word	0x400204a0
 80059f0:	400204b8 	.word	0x400204b8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8087 	beq.w	8005b1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	2220      	movs	r2, #32
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d139      	bne.n	8005a9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0216 	bic.w	r2, r2, #22
 8005a38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <HAL_DMA_IRQHandler+0x736>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0208 	bic.w	r2, r2, #8
 8005a68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	223f      	movs	r2, #63	; 0x3f
 8005a74:	409a      	lsls	r2, r3
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 834a 	beq.w	8006128 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
          }
          return;
 8005a9c:	e344      	b.n	8006128 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d018      	beq.n	8005ade <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d108      	bne.n	8005acc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02c      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
 8005aca:	e027      	b.n	8005b1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d023      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	4798      	blx	r3
 8005adc:	e01e      	b.n	8005b1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10f      	bne.n	8005b0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0210 	bic.w	r2, r2, #16
 8005afa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8306 	beq.w	8006132 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8088 	beq.w	8005c44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2204      	movs	r2, #4
 8005b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7a      	ldr	r2, [pc, #488]	; (8005d2c <HAL_DMA_IRQHandler+0xa08>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d04a      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a79      	ldr	r2, [pc, #484]	; (8005d30 <HAL_DMA_IRQHandler+0xa0c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d045      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a77      	ldr	r2, [pc, #476]	; (8005d34 <HAL_DMA_IRQHandler+0xa10>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d040      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a76      	ldr	r2, [pc, #472]	; (8005d38 <HAL_DMA_IRQHandler+0xa14>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d03b      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a74      	ldr	r2, [pc, #464]	; (8005d3c <HAL_DMA_IRQHandler+0xa18>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d036      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a73      	ldr	r2, [pc, #460]	; (8005d40 <HAL_DMA_IRQHandler+0xa1c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d031      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a71      	ldr	r2, [pc, #452]	; (8005d44 <HAL_DMA_IRQHandler+0xa20>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d02c      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a70      	ldr	r2, [pc, #448]	; (8005d48 <HAL_DMA_IRQHandler+0xa24>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d027      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6e      	ldr	r2, [pc, #440]	; (8005d4c <HAL_DMA_IRQHandler+0xa28>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6d      	ldr	r2, [pc, #436]	; (8005d50 <HAL_DMA_IRQHandler+0xa2c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01d      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6b      	ldr	r2, [pc, #428]	; (8005d54 <HAL_DMA_IRQHandler+0xa30>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a6a      	ldr	r2, [pc, #424]	; (8005d58 <HAL_DMA_IRQHandler+0xa34>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a68      	ldr	r2, [pc, #416]	; (8005d5c <HAL_DMA_IRQHandler+0xa38>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a67      	ldr	r2, [pc, #412]	; (8005d60 <HAL_DMA_IRQHandler+0xa3c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a65      	ldr	r2, [pc, #404]	; (8005d64 <HAL_DMA_IRQHandler+0xa40>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x8b8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a64      	ldr	r2, [pc, #400]	; (8005d68 <HAL_DMA_IRQHandler+0xa44>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d108      	bne.n	8005bee <HAL_DMA_IRQHandler+0x8ca>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e007      	b.n	8005bfe <HAL_DMA_IRQHandler+0x8da>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d307      	bcc.n	8005c1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f2      	bne.n	8005bfe <HAL_DMA_IRQHandler+0x8da>
 8005c18:	e000      	b.n	8005c1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005c32:	e003      	b.n	8005c3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8272 	beq.w	8006132 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
 8005c56:	e26c      	b.n	8006132 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a43      	ldr	r2, [pc, #268]	; (8005d6c <HAL_DMA_IRQHandler+0xa48>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d022      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x984>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a42      	ldr	r2, [pc, #264]	; (8005d70 <HAL_DMA_IRQHandler+0xa4c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d01d      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x984>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a40      	ldr	r2, [pc, #256]	; (8005d74 <HAL_DMA_IRQHandler+0xa50>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d018      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x984>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a3f      	ldr	r2, [pc, #252]	; (8005d78 <HAL_DMA_IRQHandler+0xa54>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x984>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <HAL_DMA_IRQHandler+0xa58>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00e      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x984>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <HAL_DMA_IRQHandler+0xa5c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x984>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3a      	ldr	r2, [pc, #232]	; (8005d84 <HAL_DMA_IRQHandler+0xa60>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x984>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a39      	ldr	r2, [pc, #228]	; (8005d88 <HAL_DMA_IRQHandler+0xa64>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d101      	bne.n	8005cac <HAL_DMA_IRQHandler+0x988>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_DMA_IRQHandler+0x98a>
 8005cac:	2300      	movs	r3, #0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 823f 	beq.w	8006132 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80cd 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xb48>
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80c7 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d049      	beq.n	8005d8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8210 	beq.w	800612c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d14:	e20a      	b.n	800612c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8206 	beq.w	800612c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d28:	e200      	b.n	800612c <HAL_DMA_IRQHandler+0xe08>
 8005d2a:	bf00      	nop
 8005d2c:	40020010 	.word	0x40020010
 8005d30:	40020028 	.word	0x40020028
 8005d34:	40020040 	.word	0x40020040
 8005d38:	40020058 	.word	0x40020058
 8005d3c:	40020070 	.word	0x40020070
 8005d40:	40020088 	.word	0x40020088
 8005d44:	400200a0 	.word	0x400200a0
 8005d48:	400200b8 	.word	0x400200b8
 8005d4c:	40020410 	.word	0x40020410
 8005d50:	40020428 	.word	0x40020428
 8005d54:	40020440 	.word	0x40020440
 8005d58:	40020458 	.word	0x40020458
 8005d5c:	40020470 	.word	0x40020470
 8005d60:	40020488 	.word	0x40020488
 8005d64:	400204a0 	.word	0x400204a0
 8005d68:	400204b8 	.word	0x400204b8
 8005d6c:	58025408 	.word	0x58025408
 8005d70:	5802541c 	.word	0x5802541c
 8005d74:	58025430 	.word	0x58025430
 8005d78:	58025444 	.word	0x58025444
 8005d7c:	58025458 	.word	0x58025458
 8005d80:	5802546c 	.word	0x5802546c
 8005d84:	58025480 	.word	0x58025480
 8005d88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d160      	bne.n	8005e58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7f      	ldr	r2, [pc, #508]	; (8005f98 <HAL_DMA_IRQHandler+0xc74>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d04a      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7d      	ldr	r2, [pc, #500]	; (8005f9c <HAL_DMA_IRQHandler+0xc78>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d045      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a7c      	ldr	r2, [pc, #496]	; (8005fa0 <HAL_DMA_IRQHandler+0xc7c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d040      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a7a      	ldr	r2, [pc, #488]	; (8005fa4 <HAL_DMA_IRQHandler+0xc80>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d03b      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a79      	ldr	r2, [pc, #484]	; (8005fa8 <HAL_DMA_IRQHandler+0xc84>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d036      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a77      	ldr	r2, [pc, #476]	; (8005fac <HAL_DMA_IRQHandler+0xc88>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d031      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a76      	ldr	r2, [pc, #472]	; (8005fb0 <HAL_DMA_IRQHandler+0xc8c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d02c      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a74      	ldr	r2, [pc, #464]	; (8005fb4 <HAL_DMA_IRQHandler+0xc90>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d027      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a73      	ldr	r2, [pc, #460]	; (8005fb8 <HAL_DMA_IRQHandler+0xc94>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d022      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a71      	ldr	r2, [pc, #452]	; (8005fbc <HAL_DMA_IRQHandler+0xc98>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d01d      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a70      	ldr	r2, [pc, #448]	; (8005fc0 <HAL_DMA_IRQHandler+0xc9c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d018      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6e      	ldr	r2, [pc, #440]	; (8005fc4 <HAL_DMA_IRQHandler+0xca0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6d      	ldr	r2, [pc, #436]	; (8005fc8 <HAL_DMA_IRQHandler+0xca4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6b      	ldr	r2, [pc, #428]	; (8005fcc <HAL_DMA_IRQHandler+0xca8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d009      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6a      	ldr	r2, [pc, #424]	; (8005fd0 <HAL_DMA_IRQHandler+0xcac>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_DMA_IRQHandler+0xb12>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a68      	ldr	r2, [pc, #416]	; (8005fd4 <HAL_DMA_IRQHandler+0xcb0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <HAL_DMA_IRQHandler+0xb24>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0208 	bic.w	r2, r2, #8
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e007      	b.n	8005e58 <HAL_DMA_IRQHandler+0xb34>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0204 	bic.w	r2, r2, #4
 8005e56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8165 	beq.w	800612c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e6a:	e15f      	b.n	800612c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	2202      	movs	r2, #2
 8005e76:	409a      	lsls	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80c5 	beq.w	800600c <HAL_DMA_IRQHandler+0xce8>
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80bf 	beq.w	800600c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2202      	movs	r2, #2
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d018      	beq.n	8005eda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 813a 	beq.w	8006130 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ec4:	e134      	b.n	8006130 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8130 	beq.w	8006130 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed8:	e12a      	b.n	8006130 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 8089 	bne.w	8005ff8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2b      	ldr	r2, [pc, #172]	; (8005f98 <HAL_DMA_IRQHandler+0xc74>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d04a      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a29      	ldr	r2, [pc, #164]	; (8005f9c <HAL_DMA_IRQHandler+0xc78>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d045      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a28      	ldr	r2, [pc, #160]	; (8005fa0 <HAL_DMA_IRQHandler+0xc7c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d040      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <HAL_DMA_IRQHandler+0xc80>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d03b      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a25      	ldr	r2, [pc, #148]	; (8005fa8 <HAL_DMA_IRQHandler+0xc84>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d036      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a23      	ldr	r2, [pc, #140]	; (8005fac <HAL_DMA_IRQHandler+0xc88>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d031      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <HAL_DMA_IRQHandler+0xc8c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d02c      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <HAL_DMA_IRQHandler+0xc90>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d027      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <HAL_DMA_IRQHandler+0xc94>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d022      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1d      	ldr	r2, [pc, #116]	; (8005fbc <HAL_DMA_IRQHandler+0xc98>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01d      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1c      	ldr	r2, [pc, #112]	; (8005fc0 <HAL_DMA_IRQHandler+0xc9c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1a      	ldr	r2, [pc, #104]	; (8005fc4 <HAL_DMA_IRQHandler+0xca0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <HAL_DMA_IRQHandler+0xca4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <HAL_DMA_IRQHandler+0xca8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <HAL_DMA_IRQHandler+0xcac>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xc62>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a14      	ldr	r2, [pc, #80]	; (8005fd4 <HAL_DMA_IRQHandler+0xcb0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d128      	bne.n	8005fd8 <HAL_DMA_IRQHandler+0xcb4>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0214 	bic.w	r2, r2, #20
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e027      	b.n	8005fe8 <HAL_DMA_IRQHandler+0xcc4>
 8005f98:	40020010 	.word	0x40020010
 8005f9c:	40020028 	.word	0x40020028
 8005fa0:	40020040 	.word	0x40020040
 8005fa4:	40020058 	.word	0x40020058
 8005fa8:	40020070 	.word	0x40020070
 8005fac:	40020088 	.word	0x40020088
 8005fb0:	400200a0 	.word	0x400200a0
 8005fb4:	400200b8 	.word	0x400200b8
 8005fb8:	40020410 	.word	0x40020410
 8005fbc:	40020428 	.word	0x40020428
 8005fc0:	40020440 	.word	0x40020440
 8005fc4:	40020458 	.word	0x40020458
 8005fc8:	40020470 	.word	0x40020470
 8005fcc:	40020488 	.word	0x40020488
 8005fd0:	400204a0 	.word	0x400204a0
 8005fd4:	400204b8 	.word	0x400204b8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 020a 	bic.w	r2, r2, #10
 8005fe6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8097 	beq.w	8006130 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800600a:	e091      	b.n	8006130 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	2208      	movs	r2, #8
 8006016:	409a      	lsls	r2, r3
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8088 	beq.w	8006132 <HAL_DMA_IRQHandler+0xe0e>
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8082 	beq.w	8006132 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a41      	ldr	r2, [pc, #260]	; (8006138 <HAL_DMA_IRQHandler+0xe14>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d04a      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a3f      	ldr	r2, [pc, #252]	; (800613c <HAL_DMA_IRQHandler+0xe18>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d045      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3e      	ldr	r2, [pc, #248]	; (8006140 <HAL_DMA_IRQHandler+0xe1c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d040      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a3c      	ldr	r2, [pc, #240]	; (8006144 <HAL_DMA_IRQHandler+0xe20>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d03b      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3b      	ldr	r2, [pc, #236]	; (8006148 <HAL_DMA_IRQHandler+0xe24>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d036      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a39      	ldr	r2, [pc, #228]	; (800614c <HAL_DMA_IRQHandler+0xe28>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d031      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a38      	ldr	r2, [pc, #224]	; (8006150 <HAL_DMA_IRQHandler+0xe2c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d02c      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a36      	ldr	r2, [pc, #216]	; (8006154 <HAL_DMA_IRQHandler+0xe30>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d027      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a35      	ldr	r2, [pc, #212]	; (8006158 <HAL_DMA_IRQHandler+0xe34>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d022      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a33      	ldr	r2, [pc, #204]	; (800615c <HAL_DMA_IRQHandler+0xe38>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01d      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a32      	ldr	r2, [pc, #200]	; (8006160 <HAL_DMA_IRQHandler+0xe3c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d018      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a30      	ldr	r2, [pc, #192]	; (8006164 <HAL_DMA_IRQHandler+0xe40>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2f      	ldr	r2, [pc, #188]	; (8006168 <HAL_DMA_IRQHandler+0xe44>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2d      	ldr	r2, [pc, #180]	; (800616c <HAL_DMA_IRQHandler+0xe48>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <HAL_DMA_IRQHandler+0xe4c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_DMA_IRQHandler+0xdaa>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a2a      	ldr	r2, [pc, #168]	; (8006174 <HAL_DMA_IRQHandler+0xe50>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d108      	bne.n	80060e0 <HAL_DMA_IRQHandler+0xdbc>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 021c 	bic.w	r2, r2, #28
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e007      	b.n	80060f0 <HAL_DMA_IRQHandler+0xdcc>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 020e 	bic.w	r2, r2, #14
 80060ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	2201      	movs	r2, #1
 80060fa:	409a      	lsls	r2, r3
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d009      	beq.n	8006132 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
 8006126:	e004      	b.n	8006132 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006128:	bf00      	nop
 800612a:	e002      	b.n	8006132 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800612c:	bf00      	nop
 800612e:	e000      	b.n	8006132 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006130:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006132:	3728      	adds	r7, #40	; 0x28
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8

08006178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a42      	ldr	r2, [pc, #264]	; (8006290 <DMA_CalcBaseAndBitshift+0x118>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d04a      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a41      	ldr	r2, [pc, #260]	; (8006294 <DMA_CalcBaseAndBitshift+0x11c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d045      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a3f      	ldr	r2, [pc, #252]	; (8006298 <DMA_CalcBaseAndBitshift+0x120>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d040      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a3e      	ldr	r2, [pc, #248]	; (800629c <DMA_CalcBaseAndBitshift+0x124>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d03b      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a3c      	ldr	r2, [pc, #240]	; (80062a0 <DMA_CalcBaseAndBitshift+0x128>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d036      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3b      	ldr	r2, [pc, #236]	; (80062a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d031      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a39      	ldr	r2, [pc, #228]	; (80062a8 <DMA_CalcBaseAndBitshift+0x130>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d02c      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a38      	ldr	r2, [pc, #224]	; (80062ac <DMA_CalcBaseAndBitshift+0x134>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d027      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a36      	ldr	r2, [pc, #216]	; (80062b0 <DMA_CalcBaseAndBitshift+0x138>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d022      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a35      	ldr	r2, [pc, #212]	; (80062b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d01d      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a33      	ldr	r2, [pc, #204]	; (80062b8 <DMA_CalcBaseAndBitshift+0x140>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a32      	ldr	r2, [pc, #200]	; (80062bc <DMA_CalcBaseAndBitshift+0x144>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a30      	ldr	r2, [pc, #192]	; (80062c0 <DMA_CalcBaseAndBitshift+0x148>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2d      	ldr	r2, [pc, #180]	; (80062c8 <DMA_CalcBaseAndBitshift+0x150>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <DMA_CalcBaseAndBitshift+0xa8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <DMA_CalcBaseAndBitshift+0x154>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <DMA_CalcBaseAndBitshift+0xac>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <DMA_CalcBaseAndBitshift+0xae>
 8006224:	2300      	movs	r3, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d024      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	3b10      	subs	r3, #16
 8006232:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <DMA_CalcBaseAndBitshift+0x158>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	4a24      	ldr	r2, [pc, #144]	; (80062d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006244:	5cd3      	ldrb	r3, [r2, r3]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d908      	bls.n	8006264 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <DMA_CalcBaseAndBitshift+0x160>)
 800625a:	4013      	ands	r3, r2
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	659a      	str	r2, [r3, #88]	; 0x58
 8006262:	e00d      	b.n	8006280 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <DMA_CalcBaseAndBitshift+0x160>)
 800626c:	4013      	ands	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6593      	str	r3, [r2, #88]	; 0x58
 8006272:	e005      	b.n	8006280 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40020010 	.word	0x40020010
 8006294:	40020028 	.word	0x40020028
 8006298:	40020040 	.word	0x40020040
 800629c:	40020058 	.word	0x40020058
 80062a0:	40020070 	.word	0x40020070
 80062a4:	40020088 	.word	0x40020088
 80062a8:	400200a0 	.word	0x400200a0
 80062ac:	400200b8 	.word	0x400200b8
 80062b0:	40020410 	.word	0x40020410
 80062b4:	40020428 	.word	0x40020428
 80062b8:	40020440 	.word	0x40020440
 80062bc:	40020458 	.word	0x40020458
 80062c0:	40020470 	.word	0x40020470
 80062c4:	40020488 	.word	0x40020488
 80062c8:	400204a0 	.word	0x400204a0
 80062cc:	400204b8 	.word	0x400204b8
 80062d0:	aaaaaaab 	.word	0xaaaaaaab
 80062d4:	0800cfd4 	.word	0x0800cfd4
 80062d8:	fffffc00 	.word	0xfffffc00

080062dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d120      	bne.n	8006332 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d858      	bhi.n	80063aa <DMA_CheckFifoParam+0xce>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <DMA_CheckFifoParam+0x24>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006311 	.word	0x08006311
 8006304:	08006323 	.word	0x08006323
 8006308:	08006311 	.word	0x08006311
 800630c:	080063ab 	.word	0x080063ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d048      	beq.n	80063ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006320:	e045      	b.n	80063ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800632a:	d142      	bne.n	80063b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006330:	e03f      	b.n	80063b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633a:	d123      	bne.n	8006384 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	2b03      	cmp	r3, #3
 8006342:	d838      	bhi.n	80063b6 <DMA_CheckFifoParam+0xda>
 8006344:	a201      	add	r2, pc, #4	; (adr r2, 800634c <DMA_CheckFifoParam+0x70>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	0800635d 	.word	0x0800635d
 8006350:	08006363 	.word	0x08006363
 8006354:	0800635d 	.word	0x0800635d
 8006358:	08006375 	.word	0x08006375
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
        break;
 8006360:	e030      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d025      	beq.n	80063ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006372:	e022      	b.n	80063ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800637c:	d11f      	bne.n	80063be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006382:	e01c      	b.n	80063be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	2b02      	cmp	r3, #2
 800638a:	d902      	bls.n	8006392 <DMA_CheckFifoParam+0xb6>
 800638c:	2b03      	cmp	r3, #3
 800638e:	d003      	beq.n	8006398 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006390:	e018      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
        break;
 8006396:	e015      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
    break;
 80063a8:	e00b      	b.n	80063c2 <DMA_CheckFifoParam+0xe6>
        break;
 80063aa:	bf00      	nop
 80063ac:	e00a      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
        break;
 80063ae:	bf00      	nop
 80063b0:	e008      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
        break;
 80063b2:	bf00      	nop
 80063b4:	e006      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
        break;
 80063b6:	bf00      	nop
 80063b8:	e004      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
        break;
 80063ba:	bf00      	nop
 80063bc:	e002      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
        break;
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
    break;
 80063c2:	bf00      	nop
    }
  }

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop

080063d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a38      	ldr	r2, [pc, #224]	; (80064c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d022      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a36      	ldr	r2, [pc, #216]	; (80064cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01d      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d018      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00e      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a30      	ldr	r2, [pc, #192]	; (80064dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2d      	ldr	r2, [pc, #180]	; (80064e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01a      	beq.n	8006472 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	3b08      	subs	r3, #8
 8006444:	4a28      	ldr	r2, [pc, #160]	; (80064e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4b26      	ldr	r3, [pc, #152]	; (80064ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a24      	ldr	r2, [pc, #144]	; (80064f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006460:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2201      	movs	r2, #1
 800646a:	409a      	lsls	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006470:	e024      	b.n	80064bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	3b10      	subs	r3, #16
 800647a:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800647c:	fba2 2303 	umull	r2, r3, r2, r3
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d806      	bhi.n	800649a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d902      	bls.n	800649a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3308      	adds	r3, #8
 8006498:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4b18      	ldr	r3, [pc, #96]	; (8006500 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	461a      	mov	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a16      	ldr	r2, [pc, #88]	; (8006504 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80064ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	58025408 	.word	0x58025408
 80064cc:	5802541c 	.word	0x5802541c
 80064d0:	58025430 	.word	0x58025430
 80064d4:	58025444 	.word	0x58025444
 80064d8:	58025458 	.word	0x58025458
 80064dc:	5802546c 	.word	0x5802546c
 80064e0:	58025480 	.word	0x58025480
 80064e4:	58025494 	.word	0x58025494
 80064e8:	cccccccd 	.word	0xcccccccd
 80064ec:	16009600 	.word	0x16009600
 80064f0:	58025880 	.word	0x58025880
 80064f4:	aaaaaaab 	.word	0xaaaaaaab
 80064f8:	400204b8 	.word	0x400204b8
 80064fc:	4002040f 	.word	0x4002040f
 8006500:	10008200 	.word	0x10008200
 8006504:	40020880 	.word	0x40020880

08006508 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04a      	beq.n	80065b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d847      	bhi.n	80065b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d022      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d01d      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a22      	ldr	r2, [pc, #136]	; (80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a21      	ldr	r2, [pc, #132]	; (80065cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1f      	ldr	r2, [pc, #124]	; (80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1b      	ldr	r2, [pc, #108]	; (80065dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d101      	bne.n	8006578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a15      	ldr	r2, [pc, #84]	; (80065e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006590:	671a      	str	r2, [r3, #112]	; 0x70
 8006592:	e009      	b.n	80065a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a11      	ldr	r2, [pc, #68]	; (80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80065a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	2201      	movs	r2, #1
 80065ae:	409a      	lsls	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	58025408 	.word	0x58025408
 80065c4:	5802541c 	.word	0x5802541c
 80065c8:	58025430 	.word	0x58025430
 80065cc:	58025444 	.word	0x58025444
 80065d0:	58025458 	.word	0x58025458
 80065d4:	5802546c 	.word	0x5802546c
 80065d8:	58025480 	.word	0x58025480
 80065dc:	58025494 	.word	0x58025494
 80065e0:	1600963f 	.word	0x1600963f
 80065e4:	58025940 	.word	0x58025940
 80065e8:	1000823f 	.word	0x1000823f
 80065ec:	40020940 	.word	0x40020940

080065f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b098      	sub	sp, #96	; 0x60
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80065f8:	4a84      	ldr	r2, [pc, #528]	; (800680c <HAL_FDCAN_Init+0x21c>)
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	4611      	mov	r1, r2
 8006600:	224c      	movs	r2, #76	; 0x4c
 8006602:	4618      	mov	r0, r3
 8006604:	f006 fc96 	bl	800cf34 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e1c6      	b.n	80069a0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a7e      	ldr	r2, [pc, #504]	; (8006810 <HAL_FDCAN_Init+0x220>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d106      	bne.n	800662a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb ff16 	bl	8002470 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0210 	bic.w	r2, r2, #16
 8006652:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006654:	f7fc fe3a 	bl	80032cc <HAL_GetTick>
 8006658:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800665a:	e014      	b.n	8006686 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800665c:	f7fc fe36 	bl	80032cc <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b0a      	cmp	r3, #10
 8006668:	d90d      	bls.n	8006686 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006670:	f043 0201 	orr.w	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2203      	movs	r2, #3
 800667e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e18c      	b.n	80069a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b08      	cmp	r3, #8
 8006692:	d0e3      	beq.n	800665c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066a4:	f7fc fe12 	bl	80032cc <HAL_GetTick>
 80066a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80066aa:	e014      	b.n	80066d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80066ac:	f7fc fe0e 	bl	80032cc <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b0a      	cmp	r3, #10
 80066b8:	d90d      	bls.n	80066d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2203      	movs	r2, #3
 80066ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e164      	b.n	80069a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0e3      	beq.n	80066ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0202 	orr.w	r2, r2, #2
 80066f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d108      	bne.n	800670e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800670a:	619a      	str	r2, [r3, #24]
 800670c:	e007      	b.n	800671e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699a      	ldr	r2, [r3, #24]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800671c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7c5b      	ldrb	r3, [r3, #17]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d108      	bne.n	8006738 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006734:	619a      	str	r2, [r3, #24]
 8006736:	e007      	b.n	8006748 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006746:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7c9b      	ldrb	r3, [r3, #18]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d108      	bne.n	8006762 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800675e:	619a      	str	r2, [r3, #24]
 8006760:	e007      	b.n	8006772 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699a      	ldr	r2, [r3, #24]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006770:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006796:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0210 	bic.w	r2, r2, #16
 80067a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d108      	bne.n	80067c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0204 	orr.w	r2, r2, #4
 80067be:	619a      	str	r2, [r3, #24]
 80067c0:	e030      	b.n	8006824 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d02c      	beq.n	8006824 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d020      	beq.n	8006814 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699a      	ldr	r2, [r3, #24]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0210 	orr.w	r2, r2, #16
 80067f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d114      	bne.n	8006824 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0220 	orr.w	r2, r2, #32
 8006808:	619a      	str	r2, [r3, #24]
 800680a:	e00b      	b.n	8006824 <HAL_FDCAN_Init+0x234>
 800680c:	0800cf78 	.word	0x0800cf78
 8006810:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0220 	orr.w	r2, r2, #32
 8006822:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	3b01      	subs	r3, #1
 800682a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	3b01      	subs	r3, #1
 8006832:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006834:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800683c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	3b01      	subs	r3, #1
 8006846:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800684c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800684e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006858:	d115      	bne.n	8006886 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	3b01      	subs	r3, #1
 8006866:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006868:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	3b01      	subs	r3, #1
 8006870:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006872:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	3b01      	subs	r3, #1
 800687c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006882:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006884:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ac:	4413      	add	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d011      	beq.n	80068d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80068ba:	f023 0107 	bic.w	r1, r3, #7
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	3360      	adds	r3, #96	; 0x60
 80068c6:	443b      	add	r3, r7
 80068c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d011      	beq.n	8006902 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80068e6:	f023 0107 	bic.w	r1, r3, #7
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	3360      	adds	r3, #96	; 0x60
 80068f2:	443b      	add	r3, r7
 80068f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006906:	2b00      	cmp	r3, #0
 8006908:	d012      	beq.n	8006930 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006912:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	3360      	adds	r3, #96	; 0x60
 800691e:	443b      	add	r3, r7
 8006920:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006924:	011a      	lsls	r2, r3, #4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006940:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	3360      	adds	r3, #96	; 0x60
 800694c:	443b      	add	r3, r7
 800694e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a11      	ldr	r2, [pc, #68]	; (80069a8 <HAL_FDCAN_Init+0x3b8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d107      	bne.n	8006978 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f022 0203 	bic.w	r2, r2, #3
 8006976:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f80b 	bl	80069ac <FDCAN_CalcultateRamBlockAddresses>
 8006996:	4603      	mov	r3, r0
 8006998:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800699c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3760      	adds	r7, #96	; 0x60
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	4000a000 	.word	0x4000a000

080069ac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80069c2:	4ba7      	ldr	r3, [pc, #668]	; (8006c60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	0091      	lsls	r1, r2, #2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	430b      	orrs	r3, r1
 80069d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069dc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	041a      	lsls	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	4413      	add	r3, r2
 80069f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a02:	4b97      	ldr	r3, [pc, #604]	; (8006c60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	0091      	lsls	r1, r2, #2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	041a      	lsls	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4413      	add	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006a44:	4b86      	ldr	r3, [pc, #536]	; (8006c60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	0091      	lsls	r1, r2, #2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	430b      	orrs	r3, r1
 8006a52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a5e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	041a      	lsls	r2, r3, #16
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006a8c:	4b74      	ldr	r3, [pc, #464]	; (8006c60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0091      	lsls	r1, r2, #2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aa6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	041a      	lsls	r2, r3, #16
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4413      	add	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006ad4:	4b62      	ldr	r3, [pc, #392]	; (8006c60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	0091      	lsls	r1, r2, #2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006aee:	fb02 f303 	mul.w	r3, r2, r3
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006b00:	4b57      	ldr	r3, [pc, #348]	; (8006c60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	0091      	lsls	r1, r2, #2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b1a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b22:	041a      	lsls	r2, r3, #16
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4413      	add	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006b42:	4b47      	ldr	r3, [pc, #284]	; (8006c60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	0091      	lsls	r1, r2, #2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b5c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b64:	041a      	lsls	r2, r3, #16
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b78:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b80:	061a      	lsls	r2, r3, #24
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b90:	4b34      	ldr	r3, [pc, #208]	; (8006c64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006b92:	4413      	add	r3, r2
 8006b94:	009a      	lsls	r2, r3, #2
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	441a      	add	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d915      	bls.n	8006c88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006c5c:	e006      	b.n	8006c6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006c5e:	bf00      	nop
 8006c60:	ffff0003 	.word	0xffff0003
 8006c64:	10002b00 	.word	0x10002b00
 8006c68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c72:	f043 0220 	orr.w	r2, r3, #32
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2203      	movs	r2, #3
 8006c80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e010      	b.n	8006caa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	e005      	b.n	8006c9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d3f3      	bcc.n	8006c90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop

08006cb8 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e033      	b.n	8006d32 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fb fc90 	bl	8002604 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f854 	bl	8006d98 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f822 	bl	8006d3a <FMAC_Reset>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10c      	bne.n	8006d16 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	f043 0210 	orr.w	r2, r3, #16
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	22a0      	movs	r2, #160	; 0xa0
 8006d0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	e008      	b.n	8006d28 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d42:	f7fc fac3 	bl	80032cc <HAL_GetTick>
 8006d46:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691a      	ldr	r2, [r3, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d56:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006d58:	e00f      	b.n	8006d7a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006d5a:	f7fc fab7 	bl	80032cc <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d68:	d907      	bls.n	8006d7a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e00a      	b.n	8006d90 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e8      	bne.n	8006d5a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f807 	bl	8006db4 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f81b 	bl	8006de2 <FMAC_ResetOutputStateAndDataPointers>
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b089      	sub	sp, #36	; 0x24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e1e:	4b86      	ldr	r3, [pc, #536]	; (8007038 <HAL_GPIO_Init+0x228>)
 8006e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e22:	e18c      	b.n	800713e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	2101      	movs	r1, #1
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	4013      	ands	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 817e 	beq.w	8007138 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d005      	beq.n	8006e54 <HAL_GPIO_Init+0x44>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d130      	bne.n	8006eb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	2203      	movs	r2, #3
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	43db      	mvns	r3, r3
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	fa02 f303 	lsl.w	r3, r2, r3
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43db      	mvns	r3, r3
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	4013      	ands	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	091b      	lsrs	r3, r3, #4
 8006ea0:	f003 0201 	and.w	r2, r3, #1
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d017      	beq.n	8006ef2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	2203      	movs	r2, #3
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d123      	bne.n	8006f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	08da      	lsrs	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3208      	adds	r2, #8
 8006f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	220f      	movs	r2, #15
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	43db      	mvns	r3, r3
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	08da      	lsrs	r2, r3, #3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3208      	adds	r2, #8
 8006f40:	69b9      	ldr	r1, [r7, #24]
 8006f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	2203      	movs	r2, #3
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	43db      	mvns	r3, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f003 0203 	and.w	r2, r3, #3
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80d8 	beq.w	8007138 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f88:	4b2c      	ldr	r3, [pc, #176]	; (800703c <HAL_GPIO_Init+0x22c>)
 8006f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f8e:	4a2b      	ldr	r2, [pc, #172]	; (800703c <HAL_GPIO_Init+0x22c>)
 8006f90:	f043 0302 	orr.w	r3, r3, #2
 8006f94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f98:	4b28      	ldr	r3, [pc, #160]	; (800703c <HAL_GPIO_Init+0x22c>)
 8006f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fa6:	4a26      	ldr	r2, [pc, #152]	; (8007040 <HAL_GPIO_Init+0x230>)
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	3302      	adds	r3, #2
 8006fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	220f      	movs	r2, #15
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <HAL_GPIO_Init+0x234>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d04a      	beq.n	8007068 <HAL_GPIO_Init+0x258>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1c      	ldr	r2, [pc, #112]	; (8007048 <HAL_GPIO_Init+0x238>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d02b      	beq.n	8007032 <HAL_GPIO_Init+0x222>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a1b      	ldr	r2, [pc, #108]	; (800704c <HAL_GPIO_Init+0x23c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d025      	beq.n	800702e <HAL_GPIO_Init+0x21e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1a      	ldr	r2, [pc, #104]	; (8007050 <HAL_GPIO_Init+0x240>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01f      	beq.n	800702a <HAL_GPIO_Init+0x21a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a19      	ldr	r2, [pc, #100]	; (8007054 <HAL_GPIO_Init+0x244>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d019      	beq.n	8007026 <HAL_GPIO_Init+0x216>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_GPIO_Init+0x248>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_GPIO_Init+0x212>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a17      	ldr	r2, [pc, #92]	; (800705c <HAL_GPIO_Init+0x24c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00d      	beq.n	800701e <HAL_GPIO_Init+0x20e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a16      	ldr	r2, [pc, #88]	; (8007060 <HAL_GPIO_Init+0x250>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <HAL_GPIO_Init+0x20a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a15      	ldr	r2, [pc, #84]	; (8007064 <HAL_GPIO_Init+0x254>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d101      	bne.n	8007016 <HAL_GPIO_Init+0x206>
 8007012:	2309      	movs	r3, #9
 8007014:	e029      	b.n	800706a <HAL_GPIO_Init+0x25a>
 8007016:	230a      	movs	r3, #10
 8007018:	e027      	b.n	800706a <HAL_GPIO_Init+0x25a>
 800701a:	2307      	movs	r3, #7
 800701c:	e025      	b.n	800706a <HAL_GPIO_Init+0x25a>
 800701e:	2306      	movs	r3, #6
 8007020:	e023      	b.n	800706a <HAL_GPIO_Init+0x25a>
 8007022:	2305      	movs	r3, #5
 8007024:	e021      	b.n	800706a <HAL_GPIO_Init+0x25a>
 8007026:	2304      	movs	r3, #4
 8007028:	e01f      	b.n	800706a <HAL_GPIO_Init+0x25a>
 800702a:	2303      	movs	r3, #3
 800702c:	e01d      	b.n	800706a <HAL_GPIO_Init+0x25a>
 800702e:	2302      	movs	r3, #2
 8007030:	e01b      	b.n	800706a <HAL_GPIO_Init+0x25a>
 8007032:	2301      	movs	r3, #1
 8007034:	e019      	b.n	800706a <HAL_GPIO_Init+0x25a>
 8007036:	bf00      	nop
 8007038:	58000080 	.word	0x58000080
 800703c:	58024400 	.word	0x58024400
 8007040:	58000400 	.word	0x58000400
 8007044:	58020000 	.word	0x58020000
 8007048:	58020400 	.word	0x58020400
 800704c:	58020800 	.word	0x58020800
 8007050:	58020c00 	.word	0x58020c00
 8007054:	58021000 	.word	0x58021000
 8007058:	58021400 	.word	0x58021400
 800705c:	58021800 	.word	0x58021800
 8007060:	58021c00 	.word	0x58021c00
 8007064:	58022400 	.word	0x58022400
 8007068:	2300      	movs	r3, #0
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	f002 0203 	and.w	r2, r2, #3
 8007070:	0092      	lsls	r2, r2, #2
 8007072:	4093      	lsls	r3, r2
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	4313      	orrs	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800707a:	4938      	ldr	r1, [pc, #224]	; (800715c <HAL_GPIO_Init+0x34c>)
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	089b      	lsrs	r3, r3, #2
 8007080:	3302      	adds	r3, #2
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	43db      	mvns	r3, r3
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	4013      	ands	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80070ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80070b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	4013      	ands	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80070dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	43db      	mvns	r3, r3
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	4013      	ands	r3, r2
 80070f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	43db      	mvns	r3, r3
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	4013      	ands	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	3301      	adds	r3, #1
 800713c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f ae6b 	bne.w	8006e24 <HAL_GPIO_Init+0x14>
  }
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	3724      	adds	r7, #36	; 0x24
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	58000400 	.word	0x58000400

08007160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	807b      	strh	r3, [r7, #2]
 800716c:	4613      	mov	r3, r2
 800716e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007170:	787b      	ldrb	r3, [r7, #1]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007176:	887a      	ldrh	r2, [r7, #2]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800717c:	e003      	b.n	8007186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800717e:	887b      	ldrh	r3, [r7, #2]
 8007180:	041a      	lsls	r2, r3, #16
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	619a      	str	r2, [r3, #24]
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	4603      	mov	r3, r0
 800719a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800719c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	4013      	ands	r3, r2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 f804 	bl	80071c6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	4603      	mov	r3, r0
 80071ce:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e097      	b.n	800731e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fb fa1d 	bl	8002648 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2202      	movs	r2, #2
 8007212:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d004      	beq.n	8007230 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800722e:	d103      	bne.n	8007238 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 031e 	bic.w	r3, r3, #30
 8007236:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4b38      	ldr	r3, [pc, #224]	; (8007328 <HAL_LPTIM_Init+0x14c>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4b37      	ldr	r3, [pc, #220]	; (800732c <HAL_LPTIM_Init+0x150>)
 8007250:	4013      	ands	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800725c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007262:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007268:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800726e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007286:	4313      	orrs	r3, r2
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d004      	beq.n	80072a0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800729e:	d107      	bne.n	80072b0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80072a8:	4313      	orrs	r3, r2
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00a      	beq.n	80072d2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80072c4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80072ca:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a14      	ldr	r2, [pc, #80]	; (8007330 <HAL_LPTIM_Init+0x154>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_LPTIM_Init+0x112>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a12      	ldr	r2, [pc, #72]	; (8007334 <HAL_LPTIM_Init+0x158>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24
 80072fe:	e009      	b.n	8007314 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a0c      	ldr	r2, [pc, #48]	; (8007338 <HAL_LPTIM_Init+0x15c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d104      	bne.n	8007314 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007312:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	ffff1f3f 	.word	0xffff1f3f
 800732c:	ff19f1fe 	.word	0xff19f1fe
 8007330:	40002400 	.word	0x40002400
 8007334:	58002400 	.word	0x58002400
 8007338:	58002800 	.word	0x58002800

0800733c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b01      	cmp	r3, #1
 8007350:	d10d      	bne.n	800736e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d106      	bne.n	800736e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2201      	movs	r2, #1
 8007366:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f882 	bl	8007472 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b02      	cmp	r3, #2
 800737a:	d10d      	bne.n	8007398 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d106      	bne.n	8007398 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2202      	movs	r2, #2
 8007390:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f877 	bl	8007486 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d10d      	bne.n	80073c2 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d106      	bne.n	80073c2 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2204      	movs	r2, #4
 80073ba:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f86c 	bl	800749a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d10d      	bne.n	80073ec <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d106      	bne.n	80073ec <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2208      	movs	r2, #8
 80073e4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f861 	bl	80074ae <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d10d      	bne.n	8007416 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b10      	cmp	r3, #16
 8007406:	d106      	bne.n	8007416 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2210      	movs	r2, #16
 800740e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f856 	bl	80074c2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b20      	cmp	r3, #32
 8007422:	d10d      	bne.n	8007440 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d106      	bne.n	8007440 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2220      	movs	r2, #32
 8007438:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f84b 	bl	80074d6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744a:	2b40      	cmp	r3, #64	; 0x40
 800744c:	d10d      	bne.n	800746a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d106      	bne.n	800746a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f840 	bl	80074ea <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007508:	4b19      	ldr	r3, [pc, #100]	; (8007570 <HAL_PWREx_ConfigSupply+0x70>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b04      	cmp	r3, #4
 8007512:	d00a      	beq.n	800752a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007514:	4b16      	ldr	r3, [pc, #88]	; (8007570 <HAL_PWREx_ConfigSupply+0x70>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	429a      	cmp	r2, r3
 8007520:	d001      	beq.n	8007526 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e01f      	b.n	8007566 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	e01d      	b.n	8007566 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800752a:	4b11      	ldr	r3, [pc, #68]	; (8007570 <HAL_PWREx_ConfigSupply+0x70>)
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f023 0207 	bic.w	r2, r3, #7
 8007532:	490f      	ldr	r1, [pc, #60]	; (8007570 <HAL_PWREx_ConfigSupply+0x70>)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4313      	orrs	r3, r2
 8007538:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800753a:	f7fb fec7 	bl	80032cc <HAL_GetTick>
 800753e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007540:	e009      	b.n	8007556 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007542:	f7fb fec3 	bl	80032cc <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007550:	d901      	bls.n	8007556 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e007      	b.n	8007566 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007556:	4b06      	ldr	r3, [pc, #24]	; (8007570 <HAL_PWREx_ConfigSupply+0x70>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800755e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007562:	d1ee      	bne.n	8007542 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	58024800 	.word	0x58024800

08007574 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08c      	sub	sp, #48	; 0x30
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e39d      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8087 	beq.w	80076a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007594:	4b88      	ldr	r3, [pc, #544]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800759e:	4b86      	ldr	r3, [pc, #536]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	2b10      	cmp	r3, #16
 80075a8:	d007      	beq.n	80075ba <HAL_RCC_OscConfig+0x46>
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	2b18      	cmp	r3, #24
 80075ae:	d110      	bne.n	80075d2 <HAL_RCC_OscConfig+0x5e>
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d10b      	bne.n	80075d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ba:	4b7f      	ldr	r3, [pc, #508]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d06c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x12c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d168      	bne.n	80076a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e377      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075da:	d106      	bne.n	80075ea <HAL_RCC_OscConfig+0x76>
 80075dc:	4b76      	ldr	r3, [pc, #472]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a75      	ldr	r2, [pc, #468]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80075e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e02e      	b.n	8007648 <HAL_RCC_OscConfig+0xd4>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0x98>
 80075f2:	4b71      	ldr	r3, [pc, #452]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a70      	ldr	r2, [pc, #448]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80075f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b6e      	ldr	r3, [pc, #440]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a6d      	ldr	r2, [pc, #436]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e01d      	b.n	8007648 <HAL_RCC_OscConfig+0xd4>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007614:	d10c      	bne.n	8007630 <HAL_RCC_OscConfig+0xbc>
 8007616:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a67      	ldr	r2, [pc, #412]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 800761c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	4b65      	ldr	r3, [pc, #404]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a64      	ldr	r2, [pc, #400]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	e00b      	b.n	8007648 <HAL_RCC_OscConfig+0xd4>
 8007630:	4b61      	ldr	r3, [pc, #388]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a60      	ldr	r2, [pc, #384]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4b5e      	ldr	r3, [pc, #376]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a5d      	ldr	r2, [pc, #372]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d013      	beq.n	8007678 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fb fe3c 	bl	80032cc <HAL_GetTick>
 8007654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007658:	f7fb fe38 	bl	80032cc <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	; 0x64
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e32b      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800766a:	4b53      	ldr	r3, [pc, #332]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0xe4>
 8007676:	e014      	b.n	80076a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007678:	f7fb fe28 	bl	80032cc <HAL_GetTick>
 800767c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007680:	f7fb fe24 	bl	80032cc <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b64      	cmp	r3, #100	; 0x64
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e317      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007692:	4b49      	ldr	r3, [pc, #292]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x10c>
 800769e:	e000      	b.n	80076a2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 808c 	beq.w	80077c8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076b0:	4b41      	ldr	r3, [pc, #260]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076ba:	4b3f      	ldr	r3, [pc, #252]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <HAL_RCC_OscConfig+0x162>
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	2b18      	cmp	r3, #24
 80076ca:	d137      	bne.n	800773c <HAL_RCC_OscConfig+0x1c8>
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d132      	bne.n	800773c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076d6:	4b38      	ldr	r3, [pc, #224]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_RCC_OscConfig+0x17a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e2e9      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076ee:	4b32      	ldr	r3, [pc, #200]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f023 0219 	bic.w	r2, r3, #25
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	492f      	ldr	r1, [pc, #188]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007700:	f7fb fde4 	bl	80032cc <HAL_GetTick>
 8007704:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007708:	f7fb fde0 	bl	80032cc <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e2d3      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800771a:	4b27      	ldr	r3, [pc, #156]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	061b      	lsls	r3, r3, #24
 8007734:	4920      	ldr	r1, [pc, #128]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007736:	4313      	orrs	r3, r2
 8007738:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800773a:	e045      	b.n	80077c8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d026      	beq.n	8007792 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007744:	4b1c      	ldr	r3, [pc, #112]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f023 0219 	bic.w	r2, r3, #25
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	4919      	ldr	r1, [pc, #100]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007752:	4313      	orrs	r3, r2
 8007754:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007756:	f7fb fdb9 	bl	80032cc <HAL_GetTick>
 800775a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800775c:	e008      	b.n	8007770 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800775e:	f7fb fdb5 	bl	80032cc <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d901      	bls.n	8007770 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e2a8      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007770:	4b11      	ldr	r3, [pc, #68]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f0      	beq.n	800775e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800777c:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	490b      	ldr	r1, [pc, #44]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 800778c:	4313      	orrs	r3, r2
 800778e:	604b      	str	r3, [r1, #4]
 8007790:	e01a      	b.n	80077c8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007792:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <HAL_RCC_OscConfig+0x244>)
 8007798:	f023 0301 	bic.w	r3, r3, #1
 800779c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779e:	f7fb fd95 	bl	80032cc <HAL_GetTick>
 80077a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077a4:	e00a      	b.n	80077bc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077a6:	f7fb fd91 	bl	80032cc <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d903      	bls.n	80077bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e284      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
 80077b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077bc:	4b96      	ldr	r3, [pc, #600]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1ee      	bne.n	80077a6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d06a      	beq.n	80078aa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077d4:	4b90      	ldr	r3, [pc, #576]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077de:	4b8e      	ldr	r3, [pc, #568]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d007      	beq.n	80077fa <HAL_RCC_OscConfig+0x286>
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b18      	cmp	r3, #24
 80077ee:	d11b      	bne.n	8007828 <HAL_RCC_OscConfig+0x2b4>
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d116      	bne.n	8007828 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077fa:	4b87      	ldr	r3, [pc, #540]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <HAL_RCC_OscConfig+0x29e>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	2b80      	cmp	r3, #128	; 0x80
 800780c:	d001      	beq.n	8007812 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e257      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007812:	4b81      	ldr	r3, [pc, #516]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	061b      	lsls	r3, r3, #24
 8007820:	497d      	ldr	r1, [pc, #500]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007822:	4313      	orrs	r3, r2
 8007824:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007826:	e040      	b.n	80078aa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d023      	beq.n	8007878 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007830:	4b79      	ldr	r3, [pc, #484]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a78      	ldr	r2, [pc, #480]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783c:	f7fb fd46 	bl	80032cc <HAL_GetTick>
 8007840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007844:	f7fb fd42 	bl	80032cc <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e235      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007856:	4b70      	ldr	r3, [pc, #448]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0f0      	beq.n	8007844 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007862:	4b6d      	ldr	r3, [pc, #436]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	061b      	lsls	r3, r3, #24
 8007870:	4969      	ldr	r1, [pc, #420]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007872:	4313      	orrs	r3, r2
 8007874:	60cb      	str	r3, [r1, #12]
 8007876:	e018      	b.n	80078aa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007878:	4b67      	ldr	r3, [pc, #412]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a66      	ldr	r2, [pc, #408]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 800787e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007884:	f7fb fd22 	bl	80032cc <HAL_GetTick>
 8007888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800788a:	e008      	b.n	800789e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800788c:	f7fb fd1e 	bl	80032cc <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d901      	bls.n	800789e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e211      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800789e:	4b5e      	ldr	r3, [pc, #376]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1f0      	bne.n	800788c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d036      	beq.n	8007924 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d019      	beq.n	80078f2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078be:	4b56      	ldr	r3, [pc, #344]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80078c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c2:	4a55      	ldr	r2, [pc, #340]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ca:	f7fb fcff 	bl	80032cc <HAL_GetTick>
 80078ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078d2:	f7fb fcfb 	bl	80032cc <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e1ee      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078e4:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80078e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCC_OscConfig+0x35e>
 80078f0:	e018      	b.n	8007924 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078f2:	4b49      	ldr	r3, [pc, #292]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80078f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f6:	4a48      	ldr	r2, [pc, #288]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078fe:	f7fb fce5 	bl	80032cc <HAL_GetTick>
 8007902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007906:	f7fb fce1 	bl	80032cc <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e1d4      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007918:	4b3f      	ldr	r3, [pc, #252]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 800791a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f0      	bne.n	8007906 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d036      	beq.n	800799e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d019      	beq.n	800796c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007938:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a36      	ldr	r2, [pc, #216]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 800793e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007942:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007944:	f7fb fcc2 	bl	80032cc <HAL_GetTick>
 8007948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800794c:	f7fb fcbe 	bl	80032cc <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e1b1      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800795e:	4b2e      	ldr	r3, [pc, #184]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCC_OscConfig+0x3d8>
 800796a:	e018      	b.n	800799e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800796c:	4b2a      	ldr	r3, [pc, #168]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a29      	ldr	r2, [pc, #164]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007976:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007978:	f7fb fca8 	bl	80032cc <HAL_GetTick>
 800797c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007980:	f7fb fca4 	bl	80032cc <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e197      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007992:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1f0      	bne.n	8007980 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8086 	beq.w	8007ab8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079ac:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <HAL_RCC_OscConfig+0x4a8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1a      	ldr	r2, [pc, #104]	; (8007a1c <HAL_RCC_OscConfig+0x4a8>)
 80079b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079b8:	f7fb fc88 	bl	80032cc <HAL_GetTick>
 80079bc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80079c0:	f7fb fc84 	bl	80032cc <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b64      	cmp	r3, #100	; 0x64
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e177      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <HAL_RCC_OscConfig+0x4a8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f0      	beq.n	80079c0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d106      	bne.n	80079f4 <HAL_RCC_OscConfig+0x480>
 80079e6:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a0b      	ldr	r2, [pc, #44]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
 80079f2:	e032      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e6>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d111      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4ac>
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 80079fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a00:	4a05      	ldr	r2, [pc, #20]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007a02:	f023 0301 	bic.w	r3, r3, #1
 8007a06:	6713      	str	r3, [r2, #112]	; 0x70
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0c:	4a02      	ldr	r2, [pc, #8]	; (8007a18 <HAL_RCC_OscConfig+0x4a4>)
 8007a0e:	f023 0304 	bic.w	r3, r3, #4
 8007a12:	6713      	str	r3, [r2, #112]	; 0x70
 8007a14:	e021      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e6>
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	58024800 	.word	0x58024800
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b05      	cmp	r3, #5
 8007a26:	d10c      	bne.n	8007a42 <HAL_RCC_OscConfig+0x4ce>
 8007a28:	4b83      	ldr	r3, [pc, #524]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2c:	4a82      	ldr	r2, [pc, #520]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a2e:	f043 0304 	orr.w	r3, r3, #4
 8007a32:	6713      	str	r3, [r2, #112]	; 0x70
 8007a34:	4b80      	ldr	r3, [pc, #512]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a38:	4a7f      	ldr	r2, [pc, #508]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a40:	e00b      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e6>
 8007a42:	4b7d      	ldr	r3, [pc, #500]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	4a7c      	ldr	r2, [pc, #496]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4e:	4b7a      	ldr	r3, [pc, #488]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	4a79      	ldr	r2, [pc, #484]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a54:	f023 0304 	bic.w	r3, r3, #4
 8007a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d015      	beq.n	8007a8e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a62:	f7fb fc33 	bl	80032cc <HAL_GetTick>
 8007a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a68:	e00a      	b.n	8007a80 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a6a:	f7fb fc2f 	bl	80032cc <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e120      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a80:	4b6d      	ldr	r3, [pc, #436]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0ee      	beq.n	8007a6a <HAL_RCC_OscConfig+0x4f6>
 8007a8c:	e014      	b.n	8007ab8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a8e:	f7fb fc1d 	bl	80032cc <HAL_GetTick>
 8007a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a94:	e00a      	b.n	8007aac <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a96:	f7fb fc19 	bl	80032cc <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e10a      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007aac:	4b62      	ldr	r3, [pc, #392]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1ee      	bne.n	8007a96 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80ff 	beq.w	8007cc0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ac2:	4b5d      	ldr	r3, [pc, #372]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aca:	2b18      	cmp	r3, #24
 8007acc:	f000 80ba 	beq.w	8007c44 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	f040 8095 	bne.w	8007c04 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ada:	4b57      	ldr	r3, [pc, #348]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a56      	ldr	r2, [pc, #344]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae6:	f7fb fbf1 	bl	80032cc <HAL_GetTick>
 8007aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007aec:	e008      	b.n	8007b00 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aee:	f7fb fbed 	bl	80032cc <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e0e0      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b00:	4b4d      	ldr	r3, [pc, #308]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f0      	bne.n	8007aee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b0c:	4b4a      	ldr	r3, [pc, #296]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b10:	4b4a      	ldr	r3, [pc, #296]	; (8007c3c <HAL_RCC_OscConfig+0x6c8>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b1c:	0112      	lsls	r2, r2, #4
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	4945      	ldr	r1, [pc, #276]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	628b      	str	r3, [r1, #40]	; 0x28
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b34:	3b01      	subs	r3, #1
 8007b36:	025b      	lsls	r3, r3, #9
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	3b01      	subs	r3, #1
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	061b      	lsls	r3, r3, #24
 8007b52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b56:	4938      	ldr	r1, [pc, #224]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007b5c:	4b36      	ldr	r3, [pc, #216]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	4a35      	ldr	r2, [pc, #212]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b62:	f023 0301 	bic.w	r3, r3, #1
 8007b66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b68:	4b33      	ldr	r3, [pc, #204]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b6c:	4b34      	ldr	r3, [pc, #208]	; (8007c40 <HAL_RCC_OscConfig+0x6cc>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b74:	00d2      	lsls	r2, r2, #3
 8007b76:	4930      	ldr	r1, [pc, #192]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b7c:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	f023 020c 	bic.w	r2, r3, #12
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	492b      	ldr	r1, [pc, #172]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b8e:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	f023 0202 	bic.w	r2, r3, #2
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	4927      	ldr	r1, [pc, #156]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bac:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	4a21      	ldr	r2, [pc, #132]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007bb8:	4b1f      	ldr	r3, [pc, #124]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a1e      	ldr	r2, [pc, #120]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007bc4:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4a1b      	ldr	r2, [pc, #108]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bd0:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a18      	ldr	r2, [pc, #96]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bdc:	f7fb fb76 	bl	80032cc <HAL_GetTick>
 8007be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be4:	f7fb fb72 	bl	80032cc <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e065      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0f0      	beq.n	8007be4 <HAL_RCC_OscConfig+0x670>
 8007c02:	e05d      	b.n	8007cc0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a0b      	ldr	r2, [pc, #44]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fb fb5c 	bl	80032cc <HAL_GetTick>
 8007c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fb fb58 	bl	80032cc <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e04b      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <HAL_RCC_OscConfig+0x6c4>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x6a4>
 8007c36:	e043      	b.n	8007cc0 <HAL_RCC_OscConfig+0x74c>
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	fffffc0c 	.word	0xfffffc0c
 8007c40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c44:	4b21      	ldr	r3, [pc, #132]	; (8007ccc <HAL_RCC_OscConfig+0x758>)
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c4a:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <HAL_RCC_OscConfig+0x758>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d031      	beq.n	8007cbc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f003 0203 	and.w	r2, r3, #3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d12a      	bne.n	8007cbc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	091b      	lsrs	r3, r3, #4
 8007c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d122      	bne.n	8007cbc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d11a      	bne.n	8007cbc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	0a5b      	lsrs	r3, r3, #9
 8007c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d111      	bne.n	8007cbc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	0c1b      	lsrs	r3, r3, #16
 8007c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d108      	bne.n	8007cbc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	0e1b      	lsrs	r3, r3, #24
 8007cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d001      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3730      	adds	r7, #48	; 0x30
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	58024400 	.word	0x58024400

08007cd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e19c      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ce4:	4b8a      	ldr	r3, [pc, #552]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 030f 	and.w	r3, r3, #15
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d910      	bls.n	8007d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cf2:	4b87      	ldr	r3, [pc, #540]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f023 020f 	bic.w	r2, r3, #15
 8007cfa:	4985      	ldr	r1, [pc, #532]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d02:	4b83      	ldr	r3, [pc, #524]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d001      	beq.n	8007d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e184      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d010      	beq.n	8007d42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	4b7b      	ldr	r3, [pc, #492]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d908      	bls.n	8007d42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d30:	4b78      	ldr	r3, [pc, #480]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	4975      	ldr	r1, [pc, #468]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d010      	beq.n	8007d70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	4b70      	ldr	r3, [pc, #448]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d908      	bls.n	8007d70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d5e:	4b6d      	ldr	r3, [pc, #436]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	496a      	ldr	r1, [pc, #424]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d010      	beq.n	8007d9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699a      	ldr	r2, [r3, #24]
 8007d80:	4b64      	ldr	r3, [pc, #400]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d908      	bls.n	8007d9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d8c:	4b61      	ldr	r3, [pc, #388]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	495e      	ldr	r1, [pc, #376]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d010      	beq.n	8007dcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69da      	ldr	r2, [r3, #28]
 8007dae:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d908      	bls.n	8007dcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007dba:	4b56      	ldr	r3, [pc, #344]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	4953      	ldr	r1, [pc, #332]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d010      	beq.n	8007dfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	4b4d      	ldr	r3, [pc, #308]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	f003 030f 	and.w	r3, r3, #15
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d908      	bls.n	8007dfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007de8:	4b4a      	ldr	r3, [pc, #296]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f023 020f 	bic.w	r2, r3, #15
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	4947      	ldr	r1, [pc, #284]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d055      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e06:	4b43      	ldr	r3, [pc, #268]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	4940      	ldr	r1, [pc, #256]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d107      	bne.n	8007e30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e20:	4b3c      	ldr	r3, [pc, #240]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d121      	bne.n	8007e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e0f6      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d107      	bne.n	8007e48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d115      	bne.n	8007e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e0ea      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e50:	4b30      	ldr	r3, [pc, #192]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d109      	bne.n	8007e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0de      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e60:	4b2c      	ldr	r3, [pc, #176]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0d6      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e70:	4b28      	ldr	r3, [pc, #160]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	f023 0207 	bic.w	r2, r3, #7
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	4925      	ldr	r1, [pc, #148]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e82:	f7fb fa23 	bl	80032cc <HAL_GetTick>
 8007e86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e88:	e00a      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e8a:	f7fb fa1f 	bl	80032cc <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d901      	bls.n	8007ea0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e0be      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ea0:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d1eb      	bne.n	8007e8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d010      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d208      	bcs.n	8007ee0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ece:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f023 020f 	bic.w	r2, r3, #15
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	490e      	ldr	r1, [pc, #56]	; (8007f14 <HAL_RCC_ClockConfig+0x244>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d214      	bcs.n	8007f18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eee:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f023 020f 	bic.w	r2, r3, #15
 8007ef6:	4906      	ldr	r1, [pc, #24]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <HAL_RCC_ClockConfig+0x240>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d005      	beq.n	8007f18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e086      	b.n	800801e <HAL_RCC_ClockConfig+0x34e>
 8007f10:	52002000 	.word	0x52002000
 8007f14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d010      	beq.n	8007f46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	4b3f      	ldr	r3, [pc, #252]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d208      	bcs.n	8007f46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f34:	4b3c      	ldr	r3, [pc, #240]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	4939      	ldr	r1, [pc, #228]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d010      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695a      	ldr	r2, [r3, #20]
 8007f56:	4b34      	ldr	r3, [pc, #208]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d208      	bcs.n	8007f74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f62:	4b31      	ldr	r3, [pc, #196]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	492e      	ldr	r1, [pc, #184]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d010      	beq.n	8007fa2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699a      	ldr	r2, [r3, #24]
 8007f84:	4b28      	ldr	r3, [pc, #160]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d208      	bcs.n	8007fa2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f90:	4b25      	ldr	r3, [pc, #148]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	4922      	ldr	r1, [pc, #136]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d010      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69da      	ldr	r2, [r3, #28]
 8007fb2:	4b1d      	ldr	r3, [pc, #116]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d208      	bcs.n	8007fd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007fbe:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	4917      	ldr	r1, [pc, #92]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007fd0:	f000 f834 	bl	800803c <HAL_RCC_GetSysClockFreq>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	4912      	ldr	r1, [pc, #72]	; (800802c <HAL_RCC_ClockConfig+0x35c>)
 8007fe2:	5ccb      	ldrb	r3, [r1, r3]
 8007fe4:	f003 031f 	and.w	r3, r3, #31
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fee:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <HAL_RCC_ClockConfig+0x358>)
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	4a0d      	ldr	r2, [pc, #52]	; (800802c <HAL_RCC_ClockConfig+0x35c>)
 8007ff8:	5cd3      	ldrb	r3, [r2, r3]
 8007ffa:	f003 031f 	and.w	r3, r3, #31
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	fa22 f303 	lsr.w	r3, r2, r3
 8008004:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <HAL_RCC_ClockConfig+0x360>)
 8008006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008008:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <HAL_RCC_ClockConfig+0x364>)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <HAL_RCC_ClockConfig+0x368>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f7fb f910 	bl	8003238 <HAL_InitTick>
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
 800802c:	0800cfc4 	.word	0x0800cfc4
 8008030:	24000004 	.word	0x24000004
 8008034:	24000000 	.word	0x24000000
 8008038:	24000008 	.word	0x24000008

0800803c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800803c:	b480      	push	{r7}
 800803e:	b089      	sub	sp, #36	; 0x24
 8008040:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008042:	4bb3      	ldr	r3, [pc, #716]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800804a:	2b18      	cmp	r3, #24
 800804c:	f200 8155 	bhi.w	80082fa <HAL_RCC_GetSysClockFreq+0x2be>
 8008050:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	080080bd 	.word	0x080080bd
 800805c:	080082fb 	.word	0x080082fb
 8008060:	080082fb 	.word	0x080082fb
 8008064:	080082fb 	.word	0x080082fb
 8008068:	080082fb 	.word	0x080082fb
 800806c:	080082fb 	.word	0x080082fb
 8008070:	080082fb 	.word	0x080082fb
 8008074:	080082fb 	.word	0x080082fb
 8008078:	080080e3 	.word	0x080080e3
 800807c:	080082fb 	.word	0x080082fb
 8008080:	080082fb 	.word	0x080082fb
 8008084:	080082fb 	.word	0x080082fb
 8008088:	080082fb 	.word	0x080082fb
 800808c:	080082fb 	.word	0x080082fb
 8008090:	080082fb 	.word	0x080082fb
 8008094:	080082fb 	.word	0x080082fb
 8008098:	080080e9 	.word	0x080080e9
 800809c:	080082fb 	.word	0x080082fb
 80080a0:	080082fb 	.word	0x080082fb
 80080a4:	080082fb 	.word	0x080082fb
 80080a8:	080082fb 	.word	0x080082fb
 80080ac:	080082fb 	.word	0x080082fb
 80080b0:	080082fb 	.word	0x080082fb
 80080b4:	080082fb 	.word	0x080082fb
 80080b8:	080080ef 	.word	0x080080ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080bc:	4b94      	ldr	r3, [pc, #592]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d009      	beq.n	80080dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080c8:	4b91      	ldr	r3, [pc, #580]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	08db      	lsrs	r3, r3, #3
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	4a90      	ldr	r2, [pc, #576]	; (8008314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080d4:	fa22 f303 	lsr.w	r3, r2, r3
 80080d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80080da:	e111      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80080dc:	4b8d      	ldr	r3, [pc, #564]	; (8008314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080de:	61bb      	str	r3, [r7, #24]
    break;
 80080e0:	e10e      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80080e2:	4b8d      	ldr	r3, [pc, #564]	; (8008318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080e4:	61bb      	str	r3, [r7, #24]
    break;
 80080e6:	e10b      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80080e8:	4b8c      	ldr	r3, [pc, #560]	; (800831c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80080ea:	61bb      	str	r3, [r7, #24]
    break;
 80080ec:	e108      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080ee:	4b88      	ldr	r3, [pc, #544]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80080f8:	4b85      	ldr	r3, [pc, #532]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	091b      	lsrs	r3, r3, #4
 80080fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008102:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008104:	4b82      	ldr	r3, [pc, #520]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800810e:	4b80      	ldr	r3, [pc, #512]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008112:	08db      	lsrs	r3, r3, #3
 8008114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	fb02 f303 	mul.w	r3, r2, r3
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008126:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80e1 	beq.w	80082f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b02      	cmp	r3, #2
 8008136:	f000 8083 	beq.w	8008240 <HAL_RCC_GetSysClockFreq+0x204>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b02      	cmp	r3, #2
 800813e:	f200 80a1 	bhi.w	8008284 <HAL_RCC_GetSysClockFreq+0x248>
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_RCC_GetSysClockFreq+0x114>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d056      	beq.n	80081fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800814e:	e099      	b.n	8008284 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008150:	4b6f      	ldr	r3, [pc, #444]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	d02d      	beq.n	80081b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800815c:	4b6c      	ldr	r3, [pc, #432]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	08db      	lsrs	r3, r3, #3
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	4a6b      	ldr	r2, [pc, #428]	; (8008314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008168:	fa22 f303 	lsr.w	r3, r2, r3
 800816c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008186:	4b62      	ldr	r3, [pc, #392]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008196:	ed97 6a02 	vldr	s12, [r7, #8]
 800819a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800819e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80081b6:	e087      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008324 <HAL_RCC_GetSysClockFreq+0x2e8>
 80081c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ca:	4b51      	ldr	r3, [pc, #324]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081da:	ed97 6a02 	vldr	s12, [r7, #8]
 80081de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081fa:	e065      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008328 <HAL_RCC_GetSysClockFreq+0x2ec>
 800820a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820e:	4b40      	ldr	r3, [pc, #256]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008222:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008320 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800823e:	e043      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800832c <HAL_RCC_GetSysClockFreq+0x2f0>
 800824e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008252:	4b2f      	ldr	r3, [pc, #188]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008262:	ed97 6a02 	vldr	s12, [r7, #8]
 8008266:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800826a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008282:	e021      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008328 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008296:	4b1e      	ldr	r3, [pc, #120]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80082c8:	4b11      	ldr	r3, [pc, #68]	; (8008310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	0a5b      	lsrs	r3, r3, #9
 80082ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d2:	3301      	adds	r3, #1
 80082d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80082e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ec:	ee17 3a90 	vmov	r3, s15
 80082f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80082f2:	e005      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	61bb      	str	r3, [r7, #24]
    break;
 80082f8:	e002      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082fc:	61bb      	str	r3, [r7, #24]
    break;
 80082fe:	bf00      	nop
  }

  return sysclockfreq;
 8008300:	69bb      	ldr	r3, [r7, #24]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3724      	adds	r7, #36	; 0x24
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	58024400 	.word	0x58024400
 8008314:	03d09000 	.word	0x03d09000
 8008318:	003d0900 	.word	0x003d0900
 800831c:	007a1200 	.word	0x007a1200
 8008320:	46000000 	.word	0x46000000
 8008324:	4c742400 	.word	0x4c742400
 8008328:	4a742400 	.word	0x4a742400
 800832c:	4af42400 	.word	0x4af42400

08008330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008336:	f7ff fe81 	bl	800803c <HAL_RCC_GetSysClockFreq>
 800833a:	4602      	mov	r2, r0
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <HAL_RCC_GetHCLKFreq+0x50>)
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	490f      	ldr	r1, [pc, #60]	; (8008384 <HAL_RCC_GetHCLKFreq+0x54>)
 8008348:	5ccb      	ldrb	r3, [r1, r3]
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	fa22 f303 	lsr.w	r3, r2, r3
 8008352:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008354:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <HAL_RCC_GetHCLKFreq+0x50>)
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f003 030f 	and.w	r3, r3, #15
 800835c:	4a09      	ldr	r2, [pc, #36]	; (8008384 <HAL_RCC_GetHCLKFreq+0x54>)
 800835e:	5cd3      	ldrb	r3, [r2, r3]
 8008360:	f003 031f 	and.w	r3, r3, #31
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	fa22 f303 	lsr.w	r3, r2, r3
 800836a:	4a07      	ldr	r2, [pc, #28]	; (8008388 <HAL_RCC_GetHCLKFreq+0x58>)
 800836c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800836e:	4a07      	ldr	r2, [pc, #28]	; (800838c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008374:	4b04      	ldr	r3, [pc, #16]	; (8008388 <HAL_RCC_GetHCLKFreq+0x58>)
 8008376:	681b      	ldr	r3, [r3, #0]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	58024400 	.word	0x58024400
 8008384:	0800cfc4 	.word	0x0800cfc4
 8008388:	24000004 	.word	0x24000004
 800838c:	24000000 	.word	0x24000000

08008390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008394:	f7ff ffcc 	bl	8008330 <HAL_RCC_GetHCLKFreq>
 8008398:	4602      	mov	r2, r0
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	091b      	lsrs	r3, r3, #4
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	4904      	ldr	r1, [pc, #16]	; (80083b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80083a6:	5ccb      	ldrb	r3, [r1, r3]
 80083a8:	f003 031f 	and.w	r3, r3, #31
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	58024400 	.word	0x58024400
 80083b8:	0800cfc4 	.word	0x0800cfc4

080083bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80083c0:	f7ff ffb6 	bl	8008330 <HAL_RCC_GetHCLKFreq>
 80083c4:	4602      	mov	r2, r0
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	0a1b      	lsrs	r3, r3, #8
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	4904      	ldr	r1, [pc, #16]	; (80083e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80083d2:	5ccb      	ldrb	r3, [r1, r3]
 80083d4:	f003 031f 	and.w	r3, r3, #31
 80083d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80083dc:	4618      	mov	r0, r3
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	58024400 	.word	0x58024400
 80083e4:	0800cfc4 	.word	0x0800cfc4

080083e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083f0:	2300      	movs	r3, #0
 80083f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083f4:	2300      	movs	r3, #0
 80083f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d03f      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800840c:	d02a      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800840e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008412:	d824      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008418:	d018      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800841a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800841e:	d81e      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008428:	d007      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800842a:	e018      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800842c:	4ba4      	ldr	r3, [pc, #656]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	4aa3      	ldr	r2, [pc, #652]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008438:	e015      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	2102      	movs	r1, #2
 8008440:	4618      	mov	r0, r3
 8008442:	f001 ff01 	bl	800a248 <RCCEx_PLL2_Config>
 8008446:	4603      	mov	r3, r0
 8008448:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800844a:	e00c      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3324      	adds	r3, #36	; 0x24
 8008450:	2102      	movs	r1, #2
 8008452:	4618      	mov	r0, r3
 8008454:	f001 ffaa 	bl	800a3ac <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	75fb      	strb	r3, [r7, #23]
      break;
 8008462:	e000      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d109      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800846c:	4b94      	ldr	r3, [pc, #592]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800846e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008478:	4991      	ldr	r1, [pc, #580]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800847a:	4313      	orrs	r3, r2
 800847c:	650b      	str	r3, [r1, #80]	; 0x50
 800847e:	e001      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848c:	2b00      	cmp	r3, #0
 800848e:	d03d      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008494:	2b04      	cmp	r3, #4
 8008496:	d826      	bhi.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008498:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849e:	bf00      	nop
 80084a0:	080084b5 	.word	0x080084b5
 80084a4:	080084c3 	.word	0x080084c3
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084ed 	.word	0x080084ed
 80084b0:	080084ed 	.word	0x080084ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b4:	4b82      	ldr	r3, [pc, #520]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	4a81      	ldr	r2, [pc, #516]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80084ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084c0:	e015      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3304      	adds	r3, #4
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 febd 	bl	800a248 <RCCEx_PLL2_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084d2:	e00c      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3324      	adds	r3, #36	; 0x24
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 ff66 	bl	800a3ac <RCCEx_PLL3_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084e4:	e003      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	75fb      	strb	r3, [r7, #23]
      break;
 80084ea:	e000      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80084ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d109      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084f4:	4b72      	ldr	r3, [pc, #456]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80084f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f8:	f023 0207 	bic.w	r2, r3, #7
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008500:	496f      	ldr	r1, [pc, #444]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008502:	4313      	orrs	r3, r2
 8008504:	650b      	str	r3, [r1, #80]	; 0x50
 8008506:	e001      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008514:	2b00      	cmp	r3, #0
 8008516:	d051      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800851e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008522:	d036      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008524:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008528:	d830      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800852a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800852e:	d032      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008534:	d82a      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008536:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800853a:	d02e      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800853c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008540:	d824      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008546:	d018      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800854c:	d81e      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008556:	d007      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008558:	e018      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855a:	4b59      	ldr	r3, [pc, #356]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	4a58      	ldr	r2, [pc, #352]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008566:	e019      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fe6a 	bl	800a248 <RCCEx_PLL2_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008578:	e010      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3324      	adds	r3, #36	; 0x24
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f001 ff13 	bl	800a3ac <RCCEx_PLL3_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800858a:	e007      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
      break;
 8008590:	e004      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008592:	bf00      	nop
 8008594:	e002      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008596:	bf00      	nop
 8008598:	e000      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800859a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80085a2:	4b47      	ldr	r3, [pc, #284]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085b0:	4943      	ldr	r1, [pc, #268]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	658b      	str	r3, [r1, #88]	; 0x58
 80085b6:	e001      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d051      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085ce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80085d2:	d036      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80085d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80085d8:	d830      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80085da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085de:	d032      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80085e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085e4:	d82a      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80085e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085ea:	d02e      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80085ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085f0:	d824      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80085f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f6:	d018      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x242>
 80085f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085fc:	d81e      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008606:	d007      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008608:	e018      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860a:	4b2d      	ldr	r3, [pc, #180]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	4a2c      	ldr	r2, [pc, #176]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008616:	e019      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3304      	adds	r3, #4
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f001 fe12 	bl	800a248 <RCCEx_PLL2_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008628:	e010      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3324      	adds	r3, #36	; 0x24
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f001 febb 	bl	800a3ac <RCCEx_PLL3_Config>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800863a:	e007      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
      break;
 8008640:	e004      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008642:	bf00      	nop
 8008644:	e002      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008646:	bf00      	nop
 8008648:	e000      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800864a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008652:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008656:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008660:	4917      	ldr	r1, [pc, #92]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008662:	4313      	orrs	r3, r2
 8008664:	658b      	str	r3, [r1, #88]	; 0x58
 8008666:	e001      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d035      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867c:	2b30      	cmp	r3, #48	; 0x30
 800867e:	d01c      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008680:	2b30      	cmp	r3, #48	; 0x30
 8008682:	d817      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008684:	2b20      	cmp	r3, #32
 8008686:	d00c      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008688:	2b20      	cmp	r3, #32
 800868a:	d813      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800868c:	2b00      	cmp	r3, #0
 800868e:	d019      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008690:	2b10      	cmp	r3, #16
 8008692:	d10f      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008694:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800869a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800869e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80086a0:	e011      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3304      	adds	r3, #4
 80086a6:	2102      	movs	r1, #2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 fdcd 	bl	800a248 <RCCEx_PLL2_Config>
 80086ae:	4603      	mov	r3, r0
 80086b0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80086b2:	e008      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
      break;
 80086b8:	e005      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80086ba:	bf00      	nop
 80086bc:	e003      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80086be:	bf00      	nop
 80086c0:	58024400 	.word	0x58024400
      break;
 80086c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80086cc:	4ba3      	ldr	r3, [pc, #652]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80086ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d8:	49a0      	ldr	r1, [pc, #640]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086de:	e001      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d047      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f8:	d030      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80086fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086fe:	d82a      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008704:	d02c      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800870a:	d824      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800870c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008710:	d018      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008716:	d81e      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800871c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008720:	d007      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008722:	e018      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008724:	4b8d      	ldr	r3, [pc, #564]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	4a8c      	ldr	r2, [pc, #560]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800872a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800872e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008730:	e017      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3304      	adds	r3, #4
 8008736:	2100      	movs	r1, #0
 8008738:	4618      	mov	r0, r3
 800873a:	f001 fd85 	bl	800a248 <RCCEx_PLL2_Config>
 800873e:	4603      	mov	r3, r0
 8008740:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008742:	e00e      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3324      	adds	r3, #36	; 0x24
 8008748:	2100      	movs	r1, #0
 800874a:	4618      	mov	r0, r3
 800874c:	f001 fe2e 	bl	800a3ac <RCCEx_PLL3_Config>
 8008750:	4603      	mov	r3, r0
 8008752:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008754:	e005      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	75fb      	strb	r3, [r7, #23]
      break;
 800875a:	e002      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800875c:	bf00      	nop
 800875e:	e000      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008768:	4b7c      	ldr	r3, [pc, #496]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800876a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800876c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008774:	4979      	ldr	r1, [pc, #484]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008776:	4313      	orrs	r3, r2
 8008778:	650b      	str	r3, [r1, #80]	; 0x50
 800877a:	e001      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d049      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008794:	d02e      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800879a:	d828      	bhi.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 800879c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087a0:	d02a      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80087a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087a6:	d822      	bhi.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80087a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087ac:	d026      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x414>
 80087ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087b2:	d81c      	bhi.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80087b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b8:	d010      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80087ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087be:	d816      	bhi.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01d      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c8:	d111      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3304      	adds	r3, #4
 80087ce:	2101      	movs	r1, #1
 80087d0:	4618      	mov	r0, r3
 80087d2:	f001 fd39 	bl	800a248 <RCCEx_PLL2_Config>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80087da:	e012      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3324      	adds	r3, #36	; 0x24
 80087e0:	2101      	movs	r1, #1
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 fde2 	bl	800a3ac <RCCEx_PLL3_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80087ec:	e009      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
      break;
 80087f2:	e006      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80087f4:	bf00      	nop
 80087f6:	e004      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80087f8:	bf00      	nop
 80087fa:	e002      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80087fc:	bf00      	nop
 80087fe:	e000      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d109      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008808:	4b54      	ldr	r3, [pc, #336]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008814:	4951      	ldr	r1, [pc, #324]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008816:	4313      	orrs	r3, r2
 8008818:	650b      	str	r3, [r1, #80]	; 0x50
 800881a:	e001      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d04b      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008836:	d02e      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800883c:	d828      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800883e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008842:	d02a      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008848:	d822      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800884a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800884e:	d026      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008850:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008854:	d81c      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885a:	d010      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800885c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008860:	d816      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d01d      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800886a:	d111      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fce8 	bl	800a248 <RCCEx_PLL2_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800887c:	e012      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3324      	adds	r3, #36	; 0x24
 8008882:	2101      	movs	r1, #1
 8008884:	4618      	mov	r0, r3
 8008886:	f001 fd91 	bl	800a3ac <RCCEx_PLL3_Config>
 800888a:	4603      	mov	r3, r0
 800888c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800888e:	e009      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
      break;
 8008894:	e006      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008896:	bf00      	nop
 8008898:	e004      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800889a:	bf00      	nop
 800889c:	e002      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800889e:	bf00      	nop
 80088a0:	e000      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80088a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80088aa:	4b2c      	ldr	r3, [pc, #176]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088b8:	4928      	ldr	r1, [pc, #160]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	658b      	str	r3, [r1, #88]	; 0x58
 80088be:	e001      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d02f      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d8:	d00e      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80088da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088de:	d814      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d015      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80088e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088e8:	d10f      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ea:	4b1c      	ldr	r3, [pc, #112]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	4a1b      	ldr	r2, [pc, #108]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088f6:	e00c      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	2101      	movs	r1, #1
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fca2 	bl	800a248 <RCCEx_PLL2_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008908:	e003      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	75fb      	strb	r3, [r7, #23]
      break;
 800890e:	e000      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d109      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008918:	4b10      	ldr	r3, [pc, #64]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800891a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008924:	490d      	ldr	r1, [pc, #52]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008926:	4313      	orrs	r3, r2
 8008928:	650b      	str	r3, [r1, #80]	; 0x50
 800892a:	e001      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d034      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008940:	2b03      	cmp	r3, #3
 8008942:	d81d      	bhi.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008944:	a201      	add	r2, pc, #4	; (adr r2, 800894c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	08008987 	.word	0x08008987
 8008950:	08008961 	.word	0x08008961
 8008954:	0800896f 	.word	0x0800896f
 8008958:	08008987 	.word	0x08008987
 800895c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008960:	4bb1      	ldr	r3, [pc, #708]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4ab0      	ldr	r2, [pc, #704]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800896a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800896c:	e00c      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3304      	adds	r3, #4
 8008972:	2102      	movs	r1, #2
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fc67 	bl	800a248 <RCCEx_PLL2_Config>
 800897a:	4603      	mov	r3, r0
 800897c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800897e:	e003      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
      break;
 8008984:	e000      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8008986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d109      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800898e:	4ba6      	ldr	r3, [pc, #664]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008992:	f023 0203 	bic.w	r2, r3, #3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899a:	49a3      	ldr	r1, [pc, #652]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800899c:	4313      	orrs	r3, r2
 800899e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80089a0:	e001      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8086 	beq.w	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089b4:	4b9d      	ldr	r3, [pc, #628]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a9c      	ldr	r2, [pc, #624]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80089ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089c0:	f7fa fc84 	bl	80032cc <HAL_GetTick>
 80089c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089c6:	e009      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089c8:	f7fa fc80 	bl	80032cc <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b64      	cmp	r3, #100	; 0x64
 80089d4:	d902      	bls.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	75fb      	strb	r3, [r7, #23]
        break;
 80089da:	e005      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089dc:	4b93      	ldr	r3, [pc, #588]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0ef      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d166      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80089ee:	4b8e      	ldr	r3, [pc, #568]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80089f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089f8:	4053      	eors	r3, r2
 80089fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d013      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a02:	4b89      	ldr	r3, [pc, #548]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a0c:	4b86      	ldr	r3, [pc, #536]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a10:	4a85      	ldr	r2, [pc, #532]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a16:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a18:	4b83      	ldr	r3, [pc, #524]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1c:	4a82      	ldr	r2, [pc, #520]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a22:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008a24:	4a80      	ldr	r2, [pc, #512]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a34:	d115      	bne.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a36:	f7fa fc49 	bl	80032cc <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a3c:	e00b      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a3e:	f7fa fc45 	bl	80032cc <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d902      	bls.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	75fb      	strb	r3, [r7, #23]
            break;
 8008a54:	e005      	b.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a56:	4b74      	ldr	r3, [pc, #464]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0ed      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d126      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a76:	d10d      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8008a78:	4b6b      	ldr	r3, [pc, #428]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a86:	0919      	lsrs	r1, r3, #4
 8008a88:	4b69      	ldr	r3, [pc, #420]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a8a:	400b      	ands	r3, r1
 8008a8c:	4966      	ldr	r1, [pc, #408]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	610b      	str	r3, [r1, #16]
 8008a92:	e005      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8008a94:	4b64      	ldr	r3, [pc, #400]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	4a63      	ldr	r2, [pc, #396]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a9e:	6113      	str	r3, [r2, #16]
 8008aa0:	4b61      	ldr	r3, [pc, #388]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aae:	495e      	ldr	r1, [pc, #376]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	670b      	str	r3, [r1, #112]	; 0x70
 8008ab4:	e004      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	75bb      	strb	r3, [r7, #22]
 8008aba:	e001      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d07e      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ad0:	2b28      	cmp	r3, #40	; 0x28
 8008ad2:	d867      	bhi.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8008ad4:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008bab 	.word	0x08008bab
 8008ae0:	08008ba5 	.word	0x08008ba5
 8008ae4:	08008ba5 	.word	0x08008ba5
 8008ae8:	08008ba5 	.word	0x08008ba5
 8008aec:	08008ba5 	.word	0x08008ba5
 8008af0:	08008ba5 	.word	0x08008ba5
 8008af4:	08008ba5 	.word	0x08008ba5
 8008af8:	08008ba5 	.word	0x08008ba5
 8008afc:	08008b81 	.word	0x08008b81
 8008b00:	08008ba5 	.word	0x08008ba5
 8008b04:	08008ba5 	.word	0x08008ba5
 8008b08:	08008ba5 	.word	0x08008ba5
 8008b0c:	08008ba5 	.word	0x08008ba5
 8008b10:	08008ba5 	.word	0x08008ba5
 8008b14:	08008ba5 	.word	0x08008ba5
 8008b18:	08008ba5 	.word	0x08008ba5
 8008b1c:	08008b93 	.word	0x08008b93
 8008b20:	08008ba5 	.word	0x08008ba5
 8008b24:	08008ba5 	.word	0x08008ba5
 8008b28:	08008ba5 	.word	0x08008ba5
 8008b2c:	08008ba5 	.word	0x08008ba5
 8008b30:	08008ba5 	.word	0x08008ba5
 8008b34:	08008ba5 	.word	0x08008ba5
 8008b38:	08008ba5 	.word	0x08008ba5
 8008b3c:	08008bab 	.word	0x08008bab
 8008b40:	08008ba5 	.word	0x08008ba5
 8008b44:	08008ba5 	.word	0x08008ba5
 8008b48:	08008ba5 	.word	0x08008ba5
 8008b4c:	08008ba5 	.word	0x08008ba5
 8008b50:	08008ba5 	.word	0x08008ba5
 8008b54:	08008ba5 	.word	0x08008ba5
 8008b58:	08008ba5 	.word	0x08008ba5
 8008b5c:	08008bab 	.word	0x08008bab
 8008b60:	08008ba5 	.word	0x08008ba5
 8008b64:	08008ba5 	.word	0x08008ba5
 8008b68:	08008ba5 	.word	0x08008ba5
 8008b6c:	08008ba5 	.word	0x08008ba5
 8008b70:	08008ba5 	.word	0x08008ba5
 8008b74:	08008ba5 	.word	0x08008ba5
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	08008bab 	.word	0x08008bab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3304      	adds	r3, #4
 8008b84:	2101      	movs	r1, #1
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 fb5e 	bl	800a248 <RCCEx_PLL2_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b90:	e00c      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3324      	adds	r3, #36	; 0x24
 8008b96:	2101      	movs	r1, #1
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f001 fc07 	bl	800a3ac <RCCEx_PLL3_Config>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ba2:	e003      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba8:	e000      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8008baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008bb2:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bbe:	491a      	ldr	r1, [pc, #104]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	654b      	str	r3, [r1, #84]	; 0x54
 8008bc4:	e001      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d03e      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	d820      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008c35 	.word	0x08008c35
 8008be8:	08008bfd 	.word	0x08008bfd
 8008bec:	08008c0f 	.word	0x08008c0f
 8008bf0:	08008c35 	.word	0x08008c35
 8008bf4:	08008c35 	.word	0x08008c35
 8008bf8:	08008c35 	.word	0x08008c35
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	2101      	movs	r1, #1
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 fb20 	bl	800a248 <RCCEx_PLL2_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008c0c:	e013      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3324      	adds	r3, #36	; 0x24
 8008c12:	2101      	movs	r1, #1
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fbc9 	bl	800a3ac <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008c1e:	e00a      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
      break;
 8008c24:	e007      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008c26:	bf00      	nop
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	58024800 	.word	0x58024800
 8008c30:	00ffffcf 	.word	0x00ffffcf
      break;
 8008c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d109      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c3c:	4b9f      	ldr	r3, [pc, #636]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c40:	f023 0207 	bic.w	r2, r3, #7
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c48:	499c      	ldr	r1, [pc, #624]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	654b      	str	r3, [r1, #84]	; 0x54
 8008c4e:	e001      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d039      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c66:	2b05      	cmp	r3, #5
 8008c68:	d820      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008cb3 	.word	0x08008cb3
 8008c74:	08008c89 	.word	0x08008c89
 8008c78:	08008c9b 	.word	0x08008c9b
 8008c7c:	08008cb3 	.word	0x08008cb3
 8008c80:	08008cb3 	.word	0x08008cb3
 8008c84:	08008cb3 	.word	0x08008cb3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 fada 	bl	800a248 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c98:	e00c      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3324      	adds	r3, #36	; 0x24
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 fb83 	bl	800a3ac <RCCEx_PLL3_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008caa:	e003      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10a      	bne.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cba:	4b80      	ldr	r3, [pc, #512]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	f023 0207 	bic.w	r2, r3, #7
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc8:	497c      	ldr	r1, [pc, #496]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8008cce:	e001      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d04b      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cea:	d02e      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf0:	d828      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf6:	d02a      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfc:	d822      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008cfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d02:	d026      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008d04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d08:	d81c      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d0e:	d010      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d14:	d816      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d01d      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d1e:	d111      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3304      	adds	r3, #4
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f001 fa8e 	bl	800a248 <RCCEx_PLL2_Config>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d30:	e012      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3324      	adds	r3, #36	; 0x24
 8008d36:	2102      	movs	r1, #2
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f001 fb37 	bl	800a3ac <RCCEx_PLL3_Config>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d42:	e009      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	75fb      	strb	r3, [r7, #23]
      break;
 8008d48:	e006      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e004      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008d4e:	bf00      	nop
 8008d50:	e002      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008d52:	bf00      	nop
 8008d54:	e000      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d5e:	4b57      	ldr	r3, [pc, #348]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d6c:	4953      	ldr	r1, [pc, #332]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	654b      	str	r3, [r1, #84]	; 0x54
 8008d72:	e001      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d04b      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d8e:	d02e      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008d90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d94:	d828      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d9a:	d02a      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da0:	d822      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008da6:	d026      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008dac:	d81c      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db2:	d010      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db8:	d816      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d01d      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc2:	d111      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 fa3c 	bl	800a248 <RCCEx_PLL2_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008dd4:	e012      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3324      	adds	r3, #36	; 0x24
 8008dda:	2102      	movs	r1, #2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f001 fae5 	bl	800a3ac <RCCEx_PLL3_Config>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008de6:	e009      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
      break;
 8008dec:	e006      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008dee:	bf00      	nop
 8008df0:	e004      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008df2:	bf00      	nop
 8008df4:	e002      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008df6:	bf00      	nop
 8008df8:	e000      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10a      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e02:	4b2e      	ldr	r3, [pc, #184]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e10:	492a      	ldr	r1, [pc, #168]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	658b      	str	r3, [r1, #88]	; 0x58
 8008e16:	e001      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d04d      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e32:	d02e      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008e34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e38:	d828      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3e:	d02a      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e44:	d822      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008e46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e4a:	d026      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008e4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e50:	d81c      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e56:	d010      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e5c:	d816      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d01d      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e66:	d111      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 f9ea 	bl	800a248 <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e78:	e012      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3324      	adds	r3, #36	; 0x24
 8008e7e:	2102      	movs	r1, #2
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 fa93 	bl	800a3ac <RCCEx_PLL3_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e8a:	e009      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e90:	e006      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e92:	bf00      	nop
 8008e94:	e004      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e96:	bf00      	nop
 8008e98:	e002      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10c      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008eb4:	4901      	ldr	r1, [pc, #4]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	658b      	str	r3, [r1, #88]	; 0x58
 8008eba:	e003      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d018      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed8:	d10a      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3324      	adds	r3, #36	; 0x24
 8008ede:	2102      	movs	r1, #2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fa63 	bl	800a3ac <RCCEx_PLL3_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008ef0:	4b8a      	ldr	r3, [pc, #552]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008efc:	4987      	ldr	r1, [pc, #540]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0310 	and.w	r3, r3, #16
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01a      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f18:	d10a      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3324      	adds	r3, #36	; 0x24
 8008f1e:	2102      	movs	r1, #2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 fa43 	bl	800a3ac <RCCEx_PLL3_Config>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f30:	4b7a      	ldr	r3, [pc, #488]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3e:	4977      	ldr	r1, [pc, #476]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d034      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f5a:	d01d      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f60:	d817      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f6a:	d009      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008f6c:	e011      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3304      	adds	r3, #4
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 f967 	bl	800a248 <RCCEx_PLL2_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f7e:	e00c      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3324      	adds	r3, #36	; 0x24
 8008f84:	2102      	movs	r1, #2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fa10 	bl	800a3ac <RCCEx_PLL3_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f90:	e003      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	75fb      	strb	r3, [r7, #23]
      break;
 8008f96:	e000      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008fa0:	4b5e      	ldr	r3, [pc, #376]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fae:	495b      	ldr	r1, [pc, #364]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8008fb4:	e001      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d033      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fd0:	d01c      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fd6:	d816      	bhi.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fdc:	d003      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fe2:	d007      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008fe4:	e00f      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe6:	4b4d      	ldr	r3, [pc, #308]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	4a4c      	ldr	r2, [pc, #304]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008ff2:	e00c      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3324      	adds	r3, #36	; 0x24
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 f9d6 	bl	800a3ac <RCCEx_PLL3_Config>
 8009000:	4603      	mov	r3, r0
 8009002:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009004:	e003      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]
      break;
 800900a:	e000      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800900c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009014:	4b41      	ldr	r3, [pc, #260]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009022:	493e      	ldr	r1, [pc, #248]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009024:	4313      	orrs	r3, r2
 8009026:	654b      	str	r3, [r1, #84]	; 0x54
 8009028:	e001      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d029      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009046:	d007      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009048:	e00f      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800904a:	4b34      	ldr	r3, [pc, #208]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	4a33      	ldr	r2, [pc, #204]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009056:	e00b      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	2102      	movs	r1, #2
 800905e:	4618      	mov	r0, r3
 8009060:	f001 f8f2 	bl	800a248 <RCCEx_PLL2_Config>
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009068:	e002      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	75fb      	strb	r3, [r7, #23]
      break;
 800906e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d109      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009076:	4b29      	ldr	r3, [pc, #164]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009082:	4926      	ldr	r1, [pc, #152]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009084:	4313      	orrs	r3, r2
 8009086:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009088:	e001      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3324      	adds	r3, #36	; 0x24
 800909e:	2102      	movs	r1, #2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f001 f983 	bl	800a3ac <RCCEx_PLL3_Config>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d033      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090c4:	d017      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80090c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090ca:	d811      	bhi.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80090cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d0:	d013      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80090d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d6:	d80b      	bhi.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80090dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e0:	d106      	bne.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e2:	4b0e      	ldr	r3, [pc, #56]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	4a0d      	ldr	r2, [pc, #52]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80090e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80090ee:	e007      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	75fb      	strb	r3, [r7, #23]
      break;
 80090f4:	e004      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80090f6:	bf00      	nop
 80090f8:	e002      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80090fa:	bf00      	nop
 80090fc:	e000      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80090fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10c      	bne.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009112:	4902      	ldr	r1, [pc, #8]	; (800911c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009114:	4313      	orrs	r3, r2
 8009116:	654b      	str	r3, [r1, #84]	; 0x54
 8009118:	e004      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800911a:	bf00      	nop
 800911c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d008      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009130:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009134:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913c:	4926      	ldr	r1, [pc, #152]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800913e:	4313      	orrs	r3, r2
 8009140:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800914e:	4b22      	ldr	r3, [pc, #136]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009152:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800915a:	491f      	ldr	r1, [pc, #124]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800915c:	4313      	orrs	r3, r2
 800915e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00d      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800916c:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009176:	6113      	str	r3, [r2, #16]
 8009178:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009182:	4915      	ldr	r1, [pc, #84]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009184:	4313      	orrs	r3, r2
 8009186:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	da08      	bge.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	490e      	ldr	r1, [pc, #56]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091ae:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80091b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091bc:	4906      	ldr	r1, [pc, #24]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e000      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	58024400 	.word	0x58024400

080091dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b090      	sub	sp, #64	; 0x40
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ea:	f040 8089 	bne.w	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80091ee:	4b95      	ldr	r3, [pc, #596]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d87d      	bhi.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80091fe:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009219 	.word	0x08009219
 8009208:	0800923d 	.word	0x0800923d
 800920c:	08009261 	.word	0x08009261
 8009210:	080092f5 	.word	0x080092f5
 8009214:	08009285 	.word	0x08009285
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009218:	4b8a      	ldr	r3, [pc, #552]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009224:	d107      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800922a:	4618      	mov	r0, r3
 800922c:	f000 feba 	bl	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009234:	e3ef      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800923a:	e3ec      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800923c:	4b81      	ldr	r3, [pc, #516]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009248:	d107      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924a:	f107 0318 	add.w	r3, r7, #24
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fc00 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009258:	e3dd      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800925e:	e3da      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009260:	4b78      	ldr	r3, [pc, #480]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800926c:	d107      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fd42 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800927c:	e3cb      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009282:	e3c8      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009284:	4b6f      	ldr	r3, [pc, #444]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800928c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800928e:	4b6d      	ldr	r3, [pc, #436]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b04      	cmp	r3, #4
 8009298:	d10c      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800929a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092a0:	4b68      	ldr	r3, [pc, #416]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	08db      	lsrs	r3, r3, #3
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	4a67      	ldr	r2, [pc, #412]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b2:	e01e      	b.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092b4:	4b63      	ldr	r3, [pc, #396]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c0:	d106      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80092c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092c8:	d102      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80092ca:	4b60      	ldr	r3, [pc, #384]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ce:	e010      	b.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092d0:	4b5c      	ldr	r3, [pc, #368]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092dc:	d106      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80092de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e4:	d102      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092e6:	4b5a      	ldr	r3, [pc, #360]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ea:	e002      	b.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092f0:	e391      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80092f2:	e390      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092f4:	4b57      	ldr	r3, [pc, #348]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f8:	e38d      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092fe:	e38a      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009306:	f040 80a7 	bne.w	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800930a:	4b4e      	ldr	r3, [pc, #312]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800930c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800930e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009312:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800931a:	d054      	beq.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009322:	f200 808b 	bhi.w	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800932c:	f000 8083 	beq.w	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009336:	f200 8081 	bhi.w	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009340:	d02f      	beq.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009348:	d878      	bhi.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d004      	beq.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009356:	d012      	beq.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8009358:	e070      	b.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800935a:	4b3a      	ldr	r3, [pc, #232]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009366:	d107      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fe19 	bl	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009376:	e34e      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800937c:	e34b      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800937e:	4b31      	ldr	r3, [pc, #196]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800938a:	d107      	bne.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938c:	f107 0318 	add.w	r3, r7, #24
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fb5f 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800939a:	e33c      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a0:	e339      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a2:	4b28      	ldr	r3, [pc, #160]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ae:	d107      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b0:	f107 030c 	add.w	r3, r7, #12
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fca1 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093be:	e32a      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c4:	e327      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093c6:	4b1f      	ldr	r3, [pc, #124]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093ce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093d0:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d10c      	bne.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80093dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d109      	bne.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093e2:	4b18      	ldr	r3, [pc, #96]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	08db      	lsrs	r3, r3, #3
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	4a16      	ldr	r2, [pc, #88]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093f4:	e01e      	b.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009402:	d106      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800940a:	d102      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800940e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009410:	e010      	b.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009412:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800941a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800941e:	d106      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009426:	d102      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009428:	4b09      	ldr	r3, [pc, #36]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942c:	e002      	b.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009432:	e2f0      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009434:	e2ef      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009436:	4b07      	ldr	r3, [pc, #28]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800943a:	e2ec      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009440:	e2e9      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009442:	bf00      	nop
 8009444:	58024400 	.word	0x58024400
 8009448:	03d09000 	.word	0x03d09000
 800944c:	003d0900 	.word	0x003d0900
 8009450:	007a1200 	.word	0x007a1200
 8009454:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800945e:	f040 809c 	bne.w	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009462:	4b9d      	ldr	r3, [pc, #628]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009466:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800946a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009472:	d054      	beq.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800947a:	f200 808b 	bhi.w	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009484:	f000 8083 	beq.w	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800948e:	f200 8081 	bhi.w	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009498:	d02f      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094a0:	d878      	bhi.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d004      	beq.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094ae:	d012      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80094b0:	e070      	b.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094b2:	4b89      	ldr	r3, [pc, #548]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094be:	d107      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fd6d 	bl	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094ce:	e2a2      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d4:	e29f      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094d6:	4b80      	ldr	r3, [pc, #512]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094e2:	d107      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e4:	f107 0318 	add.w	r3, r7, #24
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fab3 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80094f2:	e290      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094f8:	e28d      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094fa:	4b77      	ldr	r3, [pc, #476]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009506:	d107      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009508:	f107 030c 	add.w	r3, r7, #12
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fbf5 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009516:	e27e      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800951c:	e27b      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800951e:	4b6e      	ldr	r3, [pc, #440]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009526:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009528:	4b6b      	ldr	r3, [pc, #428]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b04      	cmp	r3, #4
 8009532:	d10c      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800953a:	4b67      	ldr	r3, [pc, #412]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	08db      	lsrs	r3, r3, #3
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	4a65      	ldr	r2, [pc, #404]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009546:	fa22 f303 	lsr.w	r3, r2, r3
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800954c:	e01e      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800954e:	4b62      	ldr	r3, [pc, #392]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955a:	d106      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009562:	d102      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009564:	4b5e      	ldr	r3, [pc, #376]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009568:	e010      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800956a:	4b5b      	ldr	r3, [pc, #364]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009576:	d106      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800957e:	d102      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009580:	4b58      	ldr	r3, [pc, #352]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009584:	e002      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800958a:	e244      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800958c:	e243      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800958e:	4b56      	ldr	r3, [pc, #344]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009592:	e240      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009598:	e23d      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a0:	f040 80a7 	bne.w	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80095a4:	4b4c      	ldr	r3, [pc, #304]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80095a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80095ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095b4:	d055      	beq.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095bc:	f200 8096 	bhi.w	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095c6:	f000 8084 	beq.w	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095d0:	f200 808c 	bhi.w	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095da:	d030      	beq.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e2:	f200 8083 	bhi.w	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f2:	d012      	beq.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 80095f4:	e07a      	b.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095f6:	4b38      	ldr	r3, [pc, #224]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009602:	d107      	bne.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009608:	4618      	mov	r0, r3
 800960a:	f000 fccb 	bl	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009612:	e200      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009618:	e1fd      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800961a:	4b2f      	ldr	r3, [pc, #188]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009626:	d107      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009628:	f107 0318 	add.w	r3, r7, #24
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fa11 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009636:	e1ee      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800963c:	e1eb      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800963e:	4b26      	ldr	r3, [pc, #152]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800964a:	d107      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800964c:	f107 030c 	add.w	r3, r7, #12
 8009650:	4618      	mov	r0, r3
 8009652:	f000 fb53 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800965a:	e1dc      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009660:	e1d9      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009666:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800966a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800966c:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b04      	cmp	r3, #4
 8009676:	d10c      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8009678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800967e:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	08db      	lsrs	r3, r3, #3
 8009684:	f003 0303 	and.w	r3, r3, #3
 8009688:	4a14      	ldr	r2, [pc, #80]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800968a:	fa22 f303 	lsr.w	r3, r2, r3
 800968e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009690:	e01e      	b.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009692:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969e:	d106      	bne.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80096a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096a6:	d102      	bne.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80096aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096ac:	e010      	b.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096ae:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ba:	d106      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80096bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c2:	d102      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c8:	e002      	b.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80096ce:	e1a2      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80096d0:	e1a1      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d6:	e19e      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80096d8:	58024400 	.word	0x58024400
 80096dc:	03d09000 	.word	0x03d09000
 80096e0:	003d0900 	.word	0x003d0900
 80096e4:	007a1200 	.word	0x007a1200
 80096e8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f0:	e191      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096f8:	d173      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80096fa:	4b9b      	ldr	r3, [pc, #620]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80096fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009702:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800970a:	d02f      	beq.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009712:	d863      	bhi.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009720:	d012      	beq.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8009722:	e05b      	b.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009724:	4b90      	ldr	r3, [pc, #576]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800972c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009730:	d107      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009732:	f107 0318 	add.w	r3, r7, #24
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f98c 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009740:	e169      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009746:	e166      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009748:	4b87      	ldr	r3, [pc, #540]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009754:	d107      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009756:	f107 030c 	add.w	r3, r7, #12
 800975a:	4618      	mov	r0, r3
 800975c:	f000 face 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009764:	e157      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800976a:	e154      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800976c:	4b7e      	ldr	r3, [pc, #504]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800976e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009774:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009776:	4b7c      	ldr	r3, [pc, #496]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b04      	cmp	r3, #4
 8009780:	d10c      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8009782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009784:	2b00      	cmp	r3, #0
 8009786:	d109      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009788:	4b77      	ldr	r3, [pc, #476]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	08db      	lsrs	r3, r3, #3
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	4a76      	ldr	r2, [pc, #472]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800979a:	e01e      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800979c:	4b72      	ldr	r3, [pc, #456]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a8:	d106      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80097aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b0:	d102      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80097b2:	4b6f      	ldr	r3, [pc, #444]	; (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80097b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b6:	e010      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097b8:	4b6b      	ldr	r3, [pc, #428]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097c4:	d106      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097cc:	d102      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80097ce:	4b69      	ldr	r3, [pc, #420]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80097d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d2:	e002      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80097d8:	e11d      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80097da:	e11c      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097e0:	e119      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e8:	d133      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80097ea:	4b5f      	ldr	r3, [pc, #380]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80097ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009800:	d012      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009802:	e023      	b.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009804:	4b58      	ldr	r3, [pc, #352]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800980c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009810:	d107      	bne.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fbc4 	bl	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009820:	e0f9      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009826:	e0f6      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009828:	4b4f      	ldr	r3, [pc, #316]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009834:	d107      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009836:	f107 0318 	add.w	r3, r7, #24
 800983a:	4618      	mov	r0, r3
 800983c:	f000 f90a 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009844:	e0e7      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800984a:	e0e4      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009850:	e0e1      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009858:	f040 808e 	bne.w	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800985c:	4b42      	ldr	r3, [pc, #264]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800985e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009860:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009864:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800986c:	d06b      	beq.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009874:	d874      	bhi.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987c:	d056      	beq.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009884:	d86c      	bhi.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800988c:	d03b      	beq.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009894:	d864      	bhi.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989c:	d021      	beq.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a4:	d85c      	bhi.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b2:	d004      	beq.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80098b4:	e054      	b.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80098b6:	f000 f8b7 	bl	8009a28 <HAL_RCCEx_GetD3PCLK1Freq>
 80098ba:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80098bc:	e0ab      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098be:	4b2a      	ldr	r3, [pc, #168]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098ca:	d107      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098cc:	f107 0318 	add.w	r3, r7, #24
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f8bf 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098da:	e09c      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098e0:	e099      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098e2:	4b21      	ldr	r3, [pc, #132]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ee:	d107      	bne.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f0:	f107 030c 	add.w	r3, r7, #12
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 fa01 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098fe:	e08a      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009904:	e087      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009906:	4b18      	ldr	r3, [pc, #96]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b04      	cmp	r3, #4
 8009910:	d109      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009912:	4b15      	ldr	r3, [pc, #84]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	08db      	lsrs	r3, r3, #3
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	4a13      	ldr	r2, [pc, #76]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800991e:	fa22 f303 	lsr.w	r3, r2, r3
 8009922:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009924:	e077      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800992a:	e074      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800992c:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009938:	d102      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800993a:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800993c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800993e:	e06a      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009944:	e067      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009946:	4b08      	ldr	r3, [pc, #32]	; (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009952:	d102      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8009954:	4b07      	ldr	r3, [pc, #28]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009958:	e05d      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800995e:	e05a      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009964:	e057      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009966:	bf00      	nop
 8009968:	58024400 	.word	0x58024400
 800996c:	03d09000 	.word	0x03d09000
 8009970:	003d0900 	.word	0x003d0900
 8009974:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800997e:	d148      	bne.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009980:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009988:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009990:	d02a      	beq.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009998:	d838      	bhi.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800999a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999c:	2b00      	cmp	r3, #0
 800999e:	d004      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a6:	d00d      	beq.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80099a8:	e030      	b.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099aa:	4b1d      	ldr	r3, [pc, #116]	; (8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099b6:	d102      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 80099b8:	4b1a      	ldr	r3, [pc, #104]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80099ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099bc:	e02b      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099c2:	e028      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099c4:	4b16      	ldr	r3, [pc, #88]	; (8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099d0:	d107      	bne.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 fae4 	bl	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099e0:	e019      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099e6:	e016      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099e8:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099f4:	d107      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099f6:	f107 0318 	add.w	r3, r7, #24
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 f82a 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a04:	e007      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a0a:	e004      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a10:	e001      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3740      	adds	r7, #64	; 0x40
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	58024400 	.word	0x58024400
 8009a24:	007a1200 	.word	0x007a1200

08009a28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a2c:	f7fe fc80 	bl	8008330 <HAL_RCC_GetHCLKFreq>
 8009a30:	4602      	mov	r2, r0
 8009a32:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	091b      	lsrs	r3, r3, #4
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	4904      	ldr	r1, [pc, #16]	; (8009a50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a3e:	5ccb      	ldrb	r3, [r1, r3]
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	0800cfc4 	.word	0x0800cfc4

08009a54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b089      	sub	sp, #36	; 0x24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a5c:	4ba1      	ldr	r3, [pc, #644]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a60:	f003 0303 	and.w	r3, r3, #3
 8009a64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a66:	4b9f      	ldr	r3, [pc, #636]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6a:	0b1b      	lsrs	r3, r3, #12
 8009a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a72:	4b9c      	ldr	r3, [pc, #624]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	091b      	lsrs	r3, r3, #4
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a7e:	4b99      	ldr	r3, [pc, #612]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a82:	08db      	lsrs	r3, r3, #3
 8009a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8111 	beq.w	8009cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	f000 8083 	beq.w	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	f200 80a1 	bhi.w	8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d056      	beq.n	8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009abe:	e099      	b.n	8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ac0:	4b88      	ldr	r3, [pc, #544]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0320 	and.w	r3, r3, #32
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d02d      	beq.n	8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009acc:	4b85      	ldr	r3, [pc, #532]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	08db      	lsrs	r3, r3, #3
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	4a84      	ldr	r2, [pc, #528]	; (8009ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8009adc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	ee07 3a90 	vmov	s15, r3
 8009ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009af6:	4b7b      	ldr	r3, [pc, #492]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b26:	e087      	b.n	8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3a:	4b6a      	ldr	r3, [pc, #424]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b6a:	e065      	b.n	8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7e:	4b59      	ldr	r3, [pc, #356]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bae:	e043      	b.n	8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc2:	4b48      	ldr	r3, [pc, #288]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bf2:	e021      	b.n	8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c06:	4b37      	ldr	r3, [pc, #220]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c38:	4b2a      	ldr	r3, [pc, #168]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3c:	0a5b      	lsrs	r3, r3, #9
 8009c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c5e:	ee17 2a90 	vmov	r2, s15
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c66:	4b1f      	ldr	r3, [pc, #124]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	0c1b      	lsrs	r3, r3, #16
 8009c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c70:	ee07 3a90 	vmov	s15, r3
 8009c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c8c:	ee17 2a90 	vmov	r2, s15
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c94:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c98:	0e1b      	lsrs	r3, r3, #24
 8009c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cba:	ee17 2a90 	vmov	r2, s15
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	609a      	str	r2, [r3, #8]
}
 8009cd6:	bf00      	nop
 8009cd8:	3724      	adds	r7, #36	; 0x24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	03d09000 	.word	0x03d09000
 8009cec:	46000000 	.word	0x46000000
 8009cf0:	4c742400 	.word	0x4c742400
 8009cf4:	4a742400 	.word	0x4a742400
 8009cf8:	4af42400 	.word	0x4af42400

08009cfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b089      	sub	sp, #36	; 0x24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d04:	4ba1      	ldr	r3, [pc, #644]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d0e:	4b9f      	ldr	r3, [pc, #636]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	0d1b      	lsrs	r3, r3, #20
 8009d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d1a:	4b9c      	ldr	r3, [pc, #624]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	0a1b      	lsrs	r3, r3, #8
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d26:	4b99      	ldr	r3, [pc, #612]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2a:	08db      	lsrs	r3, r3, #3
 8009d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 8111 	beq.w	8009f6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	f000 8083 	beq.w	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	f200 80a1 	bhi.w	8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d056      	beq.n	8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d66:	e099      	b.n	8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d68:	4b88      	ldr	r3, [pc, #544]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0320 	and.w	r3, r3, #32
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d02d      	beq.n	8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d74:	4b85      	ldr	r3, [pc, #532]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	08db      	lsrs	r3, r3, #3
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	4a84      	ldr	r2, [pc, #528]	; (8009f90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
 8009d84:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	ee07 3a90 	vmov	s15, r3
 8009d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d9e:	4b7b      	ldr	r3, [pc, #492]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009db2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009dce:	e087      	b.n	8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de2:	4b6a      	ldr	r3, [pc, #424]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e12:	e065      	b.n	8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e26:	4b59      	ldr	r3, [pc, #356]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e56:	e043      	b.n	8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e6a:	4b48      	ldr	r3, [pc, #288]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e9a:	e021      	b.n	8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eae:	4b37      	ldr	r3, [pc, #220]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ede:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ee0:	4b2a      	ldr	r3, [pc, #168]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee4:	0a5b      	lsrs	r3, r3, #9
 8009ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f06:	ee17 2a90 	vmov	r2, s15
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009f0e:	4b1f      	ldr	r3, [pc, #124]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	0c1b      	lsrs	r3, r3, #16
 8009f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f18:	ee07 3a90 	vmov	s15, r3
 8009f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f34:	ee17 2a90 	vmov	r2, s15
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f3c:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f40:	0e1b      	lsrs	r3, r3, #24
 8009f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f46:	ee07 3a90 	vmov	s15, r3
 8009f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f62:	ee17 2a90 	vmov	r2, s15
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f6a:	e008      	b.n	8009f7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	609a      	str	r2, [r3, #8]
}
 8009f7e:	bf00      	nop
 8009f80:	3724      	adds	r7, #36	; 0x24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	58024400 	.word	0x58024400
 8009f90:	03d09000 	.word	0x03d09000
 8009f94:	46000000 	.word	0x46000000
 8009f98:	4c742400 	.word	0x4c742400
 8009f9c:	4a742400 	.word	0x4a742400
 8009fa0:	4af42400 	.word	0x4af42400

08009fa4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b089      	sub	sp, #36	; 0x24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fac:	4ba0      	ldr	r3, [pc, #640]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009fb6:	4b9e      	ldr	r3, [pc, #632]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fba:	091b      	lsrs	r3, r3, #4
 8009fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fc0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009fc2:	4b9b      	ldr	r3, [pc, #620]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009fcc:	4b98      	ldr	r3, [pc, #608]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd0:	08db      	lsrs	r3, r3, #3
 8009fd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	fb02 f303 	mul.w	r3, r2, r3
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 8111 	beq.w	800a212 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	f000 8083 	beq.w	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	f200 80a1 	bhi.w	800a142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d056      	beq.n	800a0ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a00c:	e099      	b.n	800a142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00e:	4b88      	ldr	r3, [pc, #544]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d02d      	beq.n	800a076 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a01a:	4b85      	ldr	r3, [pc, #532]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	08db      	lsrs	r3, r3, #3
 800a020:	f003 0303 	and.w	r3, r3, #3
 800a024:	4a83      	ldr	r2, [pc, #524]	; (800a234 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a026:	fa22 f303 	lsr.w	r3, r2, r3
 800a02a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	ee07 3a90 	vmov	s15, r3
 800a03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a044:	4b7a      	ldr	r3, [pc, #488]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a054:	ed97 6a03 	vldr	s12, [r7, #12]
 800a058:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a070:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a074:	e087      	b.n	800a186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a080:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a23c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a088:	4b69      	ldr	r3, [pc, #420]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a098:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0b8:	e065      	b.n	800a186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a240 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a0c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0cc:	4b58      	ldr	r3, [pc, #352]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d4:	ee07 3a90 	vmov	s15, r3
 800a0d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0fc:	e043      	b.n	800a186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	ee07 3a90 	vmov	s15, r3
 800a104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a108:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a244 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a10c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a110:	4b47      	ldr	r3, [pc, #284]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a120:	ed97 6a03 	vldr	s12, [r7, #12]
 800a124:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a140:	e021      	b.n	800a186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	ee07 3a90 	vmov	s15, r3
 800a148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a23c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a154:	4b36      	ldr	r3, [pc, #216]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15c:	ee07 3a90 	vmov	s15, r3
 800a160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a164:	ed97 6a03 	vldr	s12, [r7, #12]
 800a168:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a16c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a180:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a184:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a186:	4b2a      	ldr	r3, [pc, #168]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	0a5b      	lsrs	r3, r3, #9
 800a18c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a19c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ac:	ee17 2a90 	vmov	r2, s15
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a1b4:	4b1e      	ldr	r3, [pc, #120]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b8:	0c1b      	lsrs	r3, r3, #16
 800a1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1da:	ee17 2a90 	vmov	r2, s15
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a1e2:	4b13      	ldr	r3, [pc, #76]	; (800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e6:	0e1b      	lsrs	r3, r3, #24
 800a1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ec:	ee07 3a90 	vmov	s15, r3
 800a1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a208:	ee17 2a90 	vmov	r2, s15
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a210:	e008      	b.n	800a224 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	609a      	str	r2, [r3, #8]
}
 800a224:	bf00      	nop
 800a226:	3724      	adds	r7, #36	; 0x24
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	58024400 	.word	0x58024400
 800a234:	03d09000 	.word	0x03d09000
 800a238:	46000000 	.word	0x46000000
 800a23c:	4c742400 	.word	0x4c742400
 800a240:	4a742400 	.word	0x4a742400
 800a244:	4af42400 	.word	0x4af42400

0800a248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a256:	4b53      	ldr	r3, [pc, #332]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d101      	bne.n	800a266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e099      	b.n	800a39a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a266:	4b4f      	ldr	r3, [pc, #316]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a4e      	ldr	r2, [pc, #312]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a26c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a272:	f7f9 f82b 	bl	80032cc <HAL_GetTick>
 800a276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a278:	e008      	b.n	800a28c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a27a:	f7f9 f827 	bl	80032cc <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d901      	bls.n	800a28c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e086      	b.n	800a39a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a28c:	4b45      	ldr	r3, [pc, #276]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1f0      	bne.n	800a27a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a298:	4b42      	ldr	r3, [pc, #264]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	031b      	lsls	r3, r3, #12
 800a2a6:	493f      	ldr	r1, [pc, #252]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	025b      	lsls	r3, r3, #9
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	041b      	lsls	r3, r3, #16
 800a2ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	061b      	lsls	r3, r3, #24
 800a2d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2dc:	4931      	ldr	r1, [pc, #196]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2e2:	4b30      	ldr	r3, [pc, #192]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	492d      	ldr	r1, [pc, #180]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2f4:	4b2b      	ldr	r3, [pc, #172]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	f023 0220 	bic.w	r2, r3, #32
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	4928      	ldr	r1, [pc, #160]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a302:	4313      	orrs	r3, r2
 800a304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a306:	4b27      	ldr	r3, [pc, #156]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	4a26      	ldr	r2, [pc, #152]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a30c:	f023 0310 	bic.w	r3, r3, #16
 800a310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a312:	4b24      	ldr	r3, [pc, #144]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a316:	4b24      	ldr	r3, [pc, #144]	; (800a3a8 <RCCEx_PLL2_Config+0x160>)
 800a318:	4013      	ands	r3, r2
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	69d2      	ldr	r2, [r2, #28]
 800a31e:	00d2      	lsls	r2, r2, #3
 800a320:	4920      	ldr	r1, [pc, #128]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a322:	4313      	orrs	r3, r2
 800a324:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a326:	4b1f      	ldr	r3, [pc, #124]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	4a1e      	ldr	r2, [pc, #120]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a32c:	f043 0310 	orr.w	r3, r3, #16
 800a330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a338:	4b1a      	ldr	r3, [pc, #104]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	4a19      	ldr	r2, [pc, #100]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a33e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a342:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a344:	e00f      	b.n	800a366 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d106      	bne.n	800a35a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a34c:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	4a14      	ldr	r2, [pc, #80]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a356:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a358:	e005      	b.n	800a366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a35a:	4b12      	ldr	r3, [pc, #72]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35e:	4a11      	ldr	r2, [pc, #68]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a36c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a372:	f7f8 ffab 	bl	80032cc <HAL_GetTick>
 800a376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a378:	e008      	b.n	800a38c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a37a:	f7f8 ffa7 	bl	80032cc <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	2b02      	cmp	r3, #2
 800a386:	d901      	bls.n	800a38c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e006      	b.n	800a39a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a38c:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0f0      	beq.n	800a37a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	ffff0007 	.word	0xffff0007

0800a3ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3ba:	4b53      	ldr	r3, [pc, #332]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d101      	bne.n	800a3ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e099      	b.n	800a4fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3ca:	4b4f      	ldr	r3, [pc, #316]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a4e      	ldr	r2, [pc, #312]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3d6:	f7f8 ff79 	bl	80032cc <HAL_GetTick>
 800a3da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3dc:	e008      	b.n	800a3f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a3de:	f7f8 ff75 	bl	80032cc <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d901      	bls.n	800a3f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e086      	b.n	800a4fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3f0:	4b45      	ldr	r3, [pc, #276]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f0      	bne.n	800a3de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3fc:	4b42      	ldr	r3, [pc, #264]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a400:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	051b      	lsls	r3, r3, #20
 800a40a:	493f      	ldr	r1, [pc, #252]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	628b      	str	r3, [r1, #40]	; 0x28
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	3b01      	subs	r3, #1
 800a416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	3b01      	subs	r3, #1
 800a420:	025b      	lsls	r3, r3, #9
 800a422:	b29b      	uxth	r3, r3
 800a424:	431a      	orrs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	041b      	lsls	r3, r3, #16
 800a42e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a432:	431a      	orrs	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	3b01      	subs	r3, #1
 800a43a:	061b      	lsls	r3, r3, #24
 800a43c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a440:	4931      	ldr	r1, [pc, #196]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a442:	4313      	orrs	r3, r2
 800a444:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a446:	4b30      	ldr	r3, [pc, #192]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	492d      	ldr	r1, [pc, #180]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a454:	4313      	orrs	r3, r2
 800a456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a458:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	4928      	ldr	r1, [pc, #160]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a466:	4313      	orrs	r3, r2
 800a468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a46a:	4b27      	ldr	r3, [pc, #156]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46e:	4a26      	ldr	r2, [pc, #152]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a476:	4b24      	ldr	r3, [pc, #144]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a47a:	4b24      	ldr	r3, [pc, #144]	; (800a50c <RCCEx_PLL3_Config+0x160>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	69d2      	ldr	r2, [r2, #28]
 800a482:	00d2      	lsls	r2, r2, #3
 800a484:	4920      	ldr	r1, [pc, #128]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a486:	4313      	orrs	r3, r2
 800a488:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a48a:	4b1f      	ldr	r3, [pc, #124]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	4a1e      	ldr	r2, [pc, #120]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a49c:	4b1a      	ldr	r3, [pc, #104]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a0:	4a19      	ldr	r2, [pc, #100]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4a8:	e00f      	b.n	800a4ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d106      	bne.n	800a4be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4b0:	4b15      	ldr	r3, [pc, #84]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	4a14      	ldr	r2, [pc, #80]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4bc:	e005      	b.n	800a4ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c2:	4a11      	ldr	r2, [pc, #68]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a0e      	ldr	r2, [pc, #56]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4d6:	f7f8 fef9 	bl	80032cc <HAL_GetTick>
 800a4da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4dc:	e008      	b.n	800a4f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4de:	f7f8 fef5 	bl	80032cc <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d901      	bls.n	800a4f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e006      	b.n	800a4fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0f0      	beq.n	800a4de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	58024400 	.word	0x58024400
 800a50c:	ffff0007 	.word	0xffff0007

0800a510 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d067      	beq.n	800a5f2 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7f8 f920 	bl	800277c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	22ca      	movs	r2, #202	; 0xca
 800a54a:	625a      	str	r2, [r3, #36]	; 0x24
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2253      	movs	r2, #83	; 0x53
 800a552:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f879 	bl	800a64c <RTC_EnterInitMode>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d13b      	bne.n	800a5dc <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6899      	ldr	r1, [r3, #8]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4b23      	ldr	r3, [pc, #140]	; (800a5fc <HAL_RTC_Init+0xec>)
 800a570:	400b      	ands	r3, r1
 800a572:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6899      	ldr	r1, [r3, #8]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	431a      	orrs	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	431a      	orrs	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	0419      	lsls	r1, r3, #16
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68da      	ldr	r2, [r3, #12]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f885 	bl	800a6b4 <RTC_ExitInitMode>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d113      	bne.n	800a5dc <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0203 	bic.w	r2, r2, #3
 800a5c2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	69da      	ldr	r2, [r3, #28]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	22ff      	movs	r2, #255	; 0xff
 800a5e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d103      	bne.n	800a5f2 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	ff8fffbf 	.word	0xff8fffbf

0800a600 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68da      	ldr	r2, [r3, #12]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a616:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a618:	f7f8 fe58 	bl	80032cc <HAL_GetTick>
 800a61c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a61e:	e009      	b.n	800a634 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a620:	f7f8 fe54 	bl	80032cc <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a62e:	d901      	bls.n	800a634 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e007      	b.n	800a644 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0ee      	beq.n	800a620 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a662:	2b00      	cmp	r3, #0
 800a664:	d120      	bne.n	800a6a8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f04f 32ff 	mov.w	r2, #4294967295
 800a66e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a670:	f7f8 fe2c 	bl	80032cc <HAL_GetTick>
 800a674:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a676:	e00d      	b.n	800a694 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a678:	f7f8 fe28 	bl	80032cc <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a686:	d905      	bls.n	800a694 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2203      	movs	r2, #3
 800a690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <RTC_EnterInitMode+0x5c>
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d1e7      	bne.n	800a678 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <RTC_ExitInitMode+0x78>)
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	4a19      	ldr	r2, [pc, #100]	; (800a72c <RTC_ExitInitMode+0x78>)
 800a6c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ca:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a6cc:	4b17      	ldr	r3, [pc, #92]	; (800a72c <RTC_ExitInitMode+0x78>)
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f003 0320 	and.w	r3, r3, #32
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10c      	bne.n	800a6f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff ff91 	bl	800a600 <HAL_RTC_WaitForSynchro>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01e      	beq.n	800a722 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2203      	movs	r2, #3
 800a6e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	73fb      	strb	r3, [r7, #15]
 800a6f0:	e017      	b.n	800a722 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a6f2:	4b0e      	ldr	r3, [pc, #56]	; (800a72c <RTC_ExitInitMode+0x78>)
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	4a0d      	ldr	r2, [pc, #52]	; (800a72c <RTC_ExitInitMode+0x78>)
 800a6f8:	f023 0320 	bic.w	r3, r3, #32
 800a6fc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff ff7e 	bl	800a600 <HAL_RTC_WaitForSynchro>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d005      	beq.n	800a716 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2203      	movs	r2, #3
 800a70e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a716:	4b05      	ldr	r3, [pc, #20]	; (800a72c <RTC_ExitInitMode+0x78>)
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	4a04      	ldr	r2, [pc, #16]	; (800a72c <RTC_ExitInitMode+0x78>)
 800a71c:	f043 0320 	orr.w	r3, r3, #32
 800a720:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a722:	7bfb      	ldrb	r3, [r7, #15]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	58004000 	.word	0x58004000

0800a730 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e0f1      	b.n	800a926 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a78      	ldr	r2, [pc, #480]	; (800a930 <HAL_SPI_Init+0x200>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d00f      	beq.n	800a772 <HAL_SPI_Init+0x42>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a77      	ldr	r2, [pc, #476]	; (800a934 <HAL_SPI_Init+0x204>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00a      	beq.n	800a772 <HAL_SPI_Init+0x42>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a75      	ldr	r2, [pc, #468]	; (800a938 <HAL_SPI_Init+0x208>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d005      	beq.n	800a772 <HAL_SPI_Init+0x42>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	2b0f      	cmp	r3, #15
 800a76c:	d901      	bls.n	800a772 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e0d9      	b.n	800a926 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f8e2 	bl	800a93c <SPI_GetPacketSize>
 800a778:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a6c      	ldr	r2, [pc, #432]	; (800a930 <HAL_SPI_Init+0x200>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00c      	beq.n	800a79e <HAL_SPI_Init+0x6e>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a6a      	ldr	r2, [pc, #424]	; (800a934 <HAL_SPI_Init+0x204>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d007      	beq.n	800a79e <HAL_SPI_Init+0x6e>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a69      	ldr	r2, [pc, #420]	; (800a938 <HAL_SPI_Init+0x208>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d002      	beq.n	800a79e <HAL_SPI_Init+0x6e>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b08      	cmp	r3, #8
 800a79c:	d811      	bhi.n	800a7c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7a2:	4a63      	ldr	r2, [pc, #396]	; (800a930 <HAL_SPI_Init+0x200>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d009      	beq.n	800a7bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a61      	ldr	r2, [pc, #388]	; (800a934 <HAL_SPI_Init+0x204>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d004      	beq.n	800a7bc <HAL_SPI_Init+0x8c>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a60      	ldr	r2, [pc, #384]	; (800a938 <HAL_SPI_Init+0x208>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d104      	bne.n	800a7c6 <HAL_SPI_Init+0x96>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b10      	cmp	r3, #16
 800a7c0:	d901      	bls.n	800a7c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e0af      	b.n	800a926 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d106      	bne.n	800a7e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7f7 fffe 	bl	80027dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0201 	bic.w	r2, r2, #1
 800a7f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a802:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a80c:	d119      	bne.n	800a842 <HAL_SPI_Init+0x112>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a816:	d103      	bne.n	800a820 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d008      	beq.n	800a832 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10c      	bne.n	800a842 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a82c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a830:	d107      	bne.n	800a842 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a840:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69da      	ldr	r2, [r3, #28]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84a:	431a      	orrs	r2, r3
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	431a      	orrs	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a854:	ea42 0103 	orr.w	r1, r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	431a      	orrs	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	431a      	orrs	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	431a      	orrs	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	431a      	orrs	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	431a      	orrs	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	431a      	orrs	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	431a      	orrs	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a896:	431a      	orrs	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8a2:	ea42 0103 	orr.w	r1, r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d113      	bne.n	800a8e2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 0201 	bic.w	r2, r2, #1
 800a8f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	430a      	orrs	r2, r1
 800a912:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	40013000 	.word	0x40013000
 800a934:	40003800 	.word	0x40003800
 800a938:	40003c00 	.word	0x40003c00

0800a93c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a948:	095b      	lsrs	r3, r3, #5
 800a94a:	3301      	adds	r3, #1
 800a94c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	3301      	adds	r3, #1
 800a954:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	3307      	adds	r3, #7
 800a95a:	08db      	lsrs	r3, r3, #3
 800a95c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	fb02 f303 	mul.w	r3, r2, r3
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e049      	b.n	800aa18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d106      	bne.n	800a99e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7f8 f84d 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2202      	movs	r2, #2
 800a9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f000 fb39 	bl	800b028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e049      	b.n	800aac6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d106      	bne.n	800aa4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f7 ff2e 	bl	80028a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f000 fae2 	bl	800b028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e049      	b.n	800ab74 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d106      	bne.n	800aafa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7f7 ffd9 	bl	8002aac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2202      	movs	r2, #2
 800aafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	f000 fa8b 	bl	800b028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e08f      	b.n	800acb0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d106      	bne.n	800abaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7f7 fefd 	bl	80029a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2202      	movs	r2, #2
 800abae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6899      	ldr	r1, [r3, #8]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	4b3e      	ldr	r3, [pc, #248]	; (800acb8 <HAL_TIM_Encoder_Init+0x13c>)
 800abbe:	400b      	ands	r3, r1
 800abc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3304      	adds	r3, #4
 800abca:	4619      	mov	r1, r3
 800abcc:	4610      	mov	r0, r2
 800abce:	f000 fa2b 	bl	800b028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	4b31      	ldr	r3, [pc, #196]	; (800acbc <HAL_TIM_Encoder_Init+0x140>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	4313      	orrs	r3, r2
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	4b2b      	ldr	r3, [pc, #172]	; (800acc0 <HAL_TIM_Encoder_Init+0x144>)
 800ac12:	4013      	ands	r3, r2
 800ac14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	4b2a      	ldr	r3, [pc, #168]	; (800acc4 <HAL_TIM_Encoder_Init+0x148>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	011a      	lsls	r2, r3, #4
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	031b      	lsls	r3, r3, #12
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ac4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ac52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	fffebff8 	.word	0xfffebff8
 800acbc:	fffffcfc 	.word	0xfffffcfc
 800acc0:	fffff3f3 	.word	0xfffff3f3
 800acc4:	ffff0f0f 	.word	0xffff0f0f

0800acc8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d101      	bne.n	800ace6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ace2:	2302      	movs	r3, #2
 800ace4:	e088      	b.n	800adf8 <HAL_TIM_IC_ConfigChannel+0x130>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11b      	bne.n	800ad2c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	6819      	ldr	r1, [r3, #0]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f000 fd0c 	bl	800b720 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 020c 	bic.w	r2, r2, #12
 800ad16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6999      	ldr	r1, [r3, #24]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	689a      	ldr	r2, [r3, #8]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	619a      	str	r2, [r3, #24]
 800ad2a:	e060      	b.n	800adee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d11c      	bne.n	800ad6c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	6819      	ldr	r1, [r3, #0]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f000 fd6d 	bl	800b820 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	699a      	ldr	r2, [r3, #24]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ad54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6999      	ldr	r1, [r3, #24]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	021a      	lsls	r2, r3, #8
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	619a      	str	r2, [r3, #24]
 800ad6a:	e040      	b.n	800adee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b08      	cmp	r3, #8
 800ad70:	d11b      	bne.n	800adaa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6819      	ldr	r1, [r3, #0]
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f000 fd8a 	bl	800b89a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	69da      	ldr	r2, [r3, #28]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 020c 	bic.w	r2, r2, #12
 800ad94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	69d9      	ldr	r1, [r3, #28]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	61da      	str	r2, [r3, #28]
 800ada8:	e021      	b.n	800adee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b0c      	cmp	r3, #12
 800adae:	d11c      	bne.n	800adea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	6819      	ldr	r1, [r3, #0]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f000 fda7 	bl	800b912 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69da      	ldr	r2, [r3, #28]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800add2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	69d9      	ldr	r1, [r3, #28]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	021a      	lsls	r2, r3, #8
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	61da      	str	r2, [r3, #28]
 800ade8:	e001      	b.n	800adee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d101      	bne.n	800ae1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	e0ff      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b14      	cmp	r3, #20
 800ae2a:	f200 80f0 	bhi.w	800b00e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae2e:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800ae89 	.word	0x0800ae89
 800ae38:	0800b00f 	.word	0x0800b00f
 800ae3c:	0800b00f 	.word	0x0800b00f
 800ae40:	0800b00f 	.word	0x0800b00f
 800ae44:	0800aec9 	.word	0x0800aec9
 800ae48:	0800b00f 	.word	0x0800b00f
 800ae4c:	0800b00f 	.word	0x0800b00f
 800ae50:	0800b00f 	.word	0x0800b00f
 800ae54:	0800af0b 	.word	0x0800af0b
 800ae58:	0800b00f 	.word	0x0800b00f
 800ae5c:	0800b00f 	.word	0x0800b00f
 800ae60:	0800b00f 	.word	0x0800b00f
 800ae64:	0800af4b 	.word	0x0800af4b
 800ae68:	0800b00f 	.word	0x0800b00f
 800ae6c:	0800b00f 	.word	0x0800b00f
 800ae70:	0800b00f 	.word	0x0800b00f
 800ae74:	0800af8d 	.word	0x0800af8d
 800ae78:	0800b00f 	.word	0x0800b00f
 800ae7c:	0800b00f 	.word	0x0800b00f
 800ae80:	0800b00f 	.word	0x0800b00f
 800ae84:	0800afcd 	.word	0x0800afcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 f970 	bl	800b174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	699a      	ldr	r2, [r3, #24]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f042 0208 	orr.w	r2, r2, #8
 800aea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f022 0204 	bic.w	r2, r2, #4
 800aeb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6999      	ldr	r1, [r3, #24]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	691a      	ldr	r2, [r3, #16]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	619a      	str	r2, [r3, #24]
      break;
 800aec6:	e0a5      	b.n	800b014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 f9e0 	bl	800b294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699a      	ldr	r2, [r3, #24]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	699a      	ldr	r2, [r3, #24]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6999      	ldr	r1, [r3, #24]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	021a      	lsls	r2, r3, #8
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	430a      	orrs	r2, r1
 800af06:	619a      	str	r2, [r3, #24]
      break;
 800af08:	e084      	b.n	800b014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68b9      	ldr	r1, [r7, #8]
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fa49 	bl	800b3a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	69da      	ldr	r2, [r3, #28]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f042 0208 	orr.w	r2, r2, #8
 800af24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69da      	ldr	r2, [r3, #28]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f022 0204 	bic.w	r2, r2, #4
 800af34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	69d9      	ldr	r1, [r3, #28]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	691a      	ldr	r2, [r3, #16]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	61da      	str	r2, [r3, #28]
      break;
 800af48:	e064      	b.n	800b014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	4618      	mov	r0, r3
 800af52:	f000 fab1 	bl	800b4b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	69da      	ldr	r2, [r3, #28]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69da      	ldr	r2, [r3, #28]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	69d9      	ldr	r1, [r3, #28]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	021a      	lsls	r2, r3, #8
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	61da      	str	r2, [r3, #28]
      break;
 800af8a:	e043      	b.n	800b014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68b9      	ldr	r1, [r7, #8]
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fafa 	bl	800b58c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f042 0208 	orr.w	r2, r2, #8
 800afa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 0204 	bic.w	r2, r2, #4
 800afb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	691a      	ldr	r2, [r3, #16]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	430a      	orrs	r2, r1
 800afc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afca:	e023      	b.n	800b014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 fb3e 	bl	800b654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	021a      	lsls	r2, r3, #8
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	430a      	orrs	r2, r1
 800b00a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b00c:	e002      	b.n	800b014 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	75fb      	strb	r3, [r7, #23]
      break;
 800b012:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop

0800b028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a44      	ldr	r2, [pc, #272]	; (800b14c <TIM_Base_SetConfig+0x124>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d013      	beq.n	800b068 <TIM_Base_SetConfig+0x40>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b046:	d00f      	beq.n	800b068 <TIM_Base_SetConfig+0x40>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a41      	ldr	r2, [pc, #260]	; (800b150 <TIM_Base_SetConfig+0x128>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d00b      	beq.n	800b068 <TIM_Base_SetConfig+0x40>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a40      	ldr	r2, [pc, #256]	; (800b154 <TIM_Base_SetConfig+0x12c>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d007      	beq.n	800b068 <TIM_Base_SetConfig+0x40>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a3f      	ldr	r2, [pc, #252]	; (800b158 <TIM_Base_SetConfig+0x130>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d003      	beq.n	800b068 <TIM_Base_SetConfig+0x40>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a3e      	ldr	r2, [pc, #248]	; (800b15c <TIM_Base_SetConfig+0x134>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d108      	bne.n	800b07a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b06e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4313      	orrs	r3, r2
 800b078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a33      	ldr	r2, [pc, #204]	; (800b14c <TIM_Base_SetConfig+0x124>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d027      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b088:	d023      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a30      	ldr	r2, [pc, #192]	; (800b150 <TIM_Base_SetConfig+0x128>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d01f      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a2f      	ldr	r2, [pc, #188]	; (800b154 <TIM_Base_SetConfig+0x12c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d01b      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a2e      	ldr	r2, [pc, #184]	; (800b158 <TIM_Base_SetConfig+0x130>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d017      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a2d      	ldr	r2, [pc, #180]	; (800b15c <TIM_Base_SetConfig+0x134>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d013      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a2c      	ldr	r2, [pc, #176]	; (800b160 <TIM_Base_SetConfig+0x138>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00f      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a2b      	ldr	r2, [pc, #172]	; (800b164 <TIM_Base_SetConfig+0x13c>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d00b      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a2a      	ldr	r2, [pc, #168]	; (800b168 <TIM_Base_SetConfig+0x140>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d007      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a29      	ldr	r2, [pc, #164]	; (800b16c <TIM_Base_SetConfig+0x144>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d003      	beq.n	800b0d2 <TIM_Base_SetConfig+0xaa>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a28      	ldr	r2, [pc, #160]	; (800b170 <TIM_Base_SetConfig+0x148>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d108      	bne.n	800b0e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	689a      	ldr	r2, [r3, #8]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a10      	ldr	r2, [pc, #64]	; (800b14c <TIM_Base_SetConfig+0x124>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d00f      	beq.n	800b130 <TIM_Base_SetConfig+0x108>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a12      	ldr	r2, [pc, #72]	; (800b15c <TIM_Base_SetConfig+0x134>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d00b      	beq.n	800b130 <TIM_Base_SetConfig+0x108>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a11      	ldr	r2, [pc, #68]	; (800b160 <TIM_Base_SetConfig+0x138>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d007      	beq.n	800b130 <TIM_Base_SetConfig+0x108>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a10      	ldr	r2, [pc, #64]	; (800b164 <TIM_Base_SetConfig+0x13c>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d003      	beq.n	800b130 <TIM_Base_SetConfig+0x108>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a0f      	ldr	r2, [pc, #60]	; (800b168 <TIM_Base_SetConfig+0x140>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d103      	bne.n	800b138 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	691a      	ldr	r2, [r3, #16]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	615a      	str	r2, [r3, #20]
}
 800b13e:	bf00      	nop
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	40010000 	.word	0x40010000
 800b150:	40000400 	.word	0x40000400
 800b154:	40000800 	.word	0x40000800
 800b158:	40000c00 	.word	0x40000c00
 800b15c:	40010400 	.word	0x40010400
 800b160:	40014000 	.word	0x40014000
 800b164:	40014400 	.word	0x40014400
 800b168:	40014800 	.word	0x40014800
 800b16c:	4000e000 	.word	0x4000e000
 800b170:	4000e400 	.word	0x4000e400

0800b174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	f023 0201 	bic.w	r2, r3, #1
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4b37      	ldr	r3, [pc, #220]	; (800b27c <TIM_OC1_SetConfig+0x108>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f023 0302 	bic.w	r3, r3, #2
 800b1bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a2d      	ldr	r2, [pc, #180]	; (800b280 <TIM_OC1_SetConfig+0x10c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00f      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a2c      	ldr	r2, [pc, #176]	; (800b284 <TIM_OC1_SetConfig+0x110>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d00b      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a2b      	ldr	r2, [pc, #172]	; (800b288 <TIM_OC1_SetConfig+0x114>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d007      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a2a      	ldr	r2, [pc, #168]	; (800b28c <TIM_OC1_SetConfig+0x118>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d003      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a29      	ldr	r2, [pc, #164]	; (800b290 <TIM_OC1_SetConfig+0x11c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d10c      	bne.n	800b20a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f023 0308 	bic.w	r3, r3, #8
 800b1f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f023 0304 	bic.w	r3, r3, #4
 800b208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a1c      	ldr	r2, [pc, #112]	; (800b280 <TIM_OC1_SetConfig+0x10c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00f      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a1b      	ldr	r2, [pc, #108]	; (800b284 <TIM_OC1_SetConfig+0x110>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00b      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a1a      	ldr	r2, [pc, #104]	; (800b288 <TIM_OC1_SetConfig+0x114>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d007      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a19      	ldr	r2, [pc, #100]	; (800b28c <TIM_OC1_SetConfig+0x118>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d003      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a18      	ldr	r2, [pc, #96]	; (800b290 <TIM_OC1_SetConfig+0x11c>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d111      	bne.n	800b256 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	4313      	orrs	r3, r2
 800b24a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	621a      	str	r2, [r3, #32]
}
 800b270:	bf00      	nop
 800b272:	371c      	adds	r7, #28
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	fffeff8f 	.word	0xfffeff8f
 800b280:	40010000 	.word	0x40010000
 800b284:	40010400 	.word	0x40010400
 800b288:	40014000 	.word	0x40014000
 800b28c:	40014400 	.word	0x40014400
 800b290:	40014800 	.word	0x40014800

0800b294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f023 0210 	bic.w	r2, r3, #16
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4b34      	ldr	r3, [pc, #208]	; (800b390 <TIM_OC2_SetConfig+0xfc>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	021b      	lsls	r3, r3, #8
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f023 0320 	bic.w	r3, r3, #32
 800b2de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	011b      	lsls	r3, r3, #4
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a29      	ldr	r2, [pc, #164]	; (800b394 <TIM_OC2_SetConfig+0x100>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d003      	beq.n	800b2fc <TIM_OC2_SetConfig+0x68>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a28      	ldr	r2, [pc, #160]	; (800b398 <TIM_OC2_SetConfig+0x104>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d10d      	bne.n	800b318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a1e      	ldr	r2, [pc, #120]	; (800b394 <TIM_OC2_SetConfig+0x100>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d00f      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a1d      	ldr	r2, [pc, #116]	; (800b398 <TIM_OC2_SetConfig+0x104>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d00b      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a1c      	ldr	r2, [pc, #112]	; (800b39c <TIM_OC2_SetConfig+0x108>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d007      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a1b      	ldr	r2, [pc, #108]	; (800b3a0 <TIM_OC2_SetConfig+0x10c>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d003      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a1a      	ldr	r2, [pc, #104]	; (800b3a4 <TIM_OC2_SetConfig+0x110>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d113      	bne.n	800b368 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b34e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	4313      	orrs	r3, r2
 800b35a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	621a      	str	r2, [r3, #32]
}
 800b382:	bf00      	nop
 800b384:	371c      	adds	r7, #28
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	feff8fff 	.word	0xfeff8fff
 800b394:	40010000 	.word	0x40010000
 800b398:	40010400 	.word	0x40010400
 800b39c:	40014000 	.word	0x40014000
 800b3a0:	40014400 	.word	0x40014400
 800b3a4:	40014800 	.word	0x40014800

0800b3a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4b33      	ldr	r3, [pc, #204]	; (800b4a0 <TIM_OC3_SetConfig+0xf8>)
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0303 	bic.w	r3, r3, #3
 800b3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	021b      	lsls	r3, r3, #8
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a28      	ldr	r2, [pc, #160]	; (800b4a4 <TIM_OC3_SetConfig+0xfc>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d003      	beq.n	800b40e <TIM_OC3_SetConfig+0x66>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a27      	ldr	r2, [pc, #156]	; (800b4a8 <TIM_OC3_SetConfig+0x100>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d10d      	bne.n	800b42a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <TIM_OC3_SetConfig+0xfc>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d00f      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a1c      	ldr	r2, [pc, #112]	; (800b4a8 <TIM_OC3_SetConfig+0x100>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d00b      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a1b      	ldr	r2, [pc, #108]	; (800b4ac <TIM_OC3_SetConfig+0x104>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d007      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a1a      	ldr	r2, [pc, #104]	; (800b4b0 <TIM_OC3_SetConfig+0x108>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d003      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a19      	ldr	r2, [pc, #100]	; (800b4b4 <TIM_OC3_SetConfig+0x10c>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d113      	bne.n	800b47a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	011b      	lsls	r3, r3, #4
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	4313      	orrs	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	621a      	str	r2, [r3, #32]
}
 800b494:	bf00      	nop
 800b496:	371c      	adds	r7, #28
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	fffeff8f 	.word	0xfffeff8f
 800b4a4:	40010000 	.word	0x40010000
 800b4a8:	40010400 	.word	0x40010400
 800b4ac:	40014000 	.word	0x40014000
 800b4b0:	40014400 	.word	0x40014400
 800b4b4:	40014800 	.word	0x40014800

0800b4b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4b24      	ldr	r3, [pc, #144]	; (800b574 <TIM_OC4_SetConfig+0xbc>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	021b      	lsls	r3, r3, #8
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	031b      	lsls	r3, r3, #12
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4a19      	ldr	r2, [pc, #100]	; (800b578 <TIM_OC4_SetConfig+0xc0>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d00f      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a18      	ldr	r2, [pc, #96]	; (800b57c <TIM_OC4_SetConfig+0xc4>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d00b      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a17      	ldr	r2, [pc, #92]	; (800b580 <TIM_OC4_SetConfig+0xc8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d007      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a16      	ldr	r2, [pc, #88]	; (800b584 <TIM_OC4_SetConfig+0xcc>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d003      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a15      	ldr	r2, [pc, #84]	; (800b588 <TIM_OC4_SetConfig+0xd0>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d109      	bne.n	800b54c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b53e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	019b      	lsls	r3, r3, #6
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	4313      	orrs	r3, r2
 800b54a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	621a      	str	r2, [r3, #32]
}
 800b566:	bf00      	nop
 800b568:	371c      	adds	r7, #28
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	feff8fff 	.word	0xfeff8fff
 800b578:	40010000 	.word	0x40010000
 800b57c:	40010400 	.word	0x40010400
 800b580:	40014000 	.word	0x40014000
 800b584:	40014400 	.word	0x40014400
 800b588:	40014800 	.word	0x40014800

0800b58c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a1b      	ldr	r3, [r3, #32]
 800b59a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4b21      	ldr	r3, [pc, #132]	; (800b63c <TIM_OC5_SetConfig+0xb0>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	041b      	lsls	r3, r3, #16
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a18      	ldr	r2, [pc, #96]	; (800b640 <TIM_OC5_SetConfig+0xb4>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00f      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a17      	ldr	r2, [pc, #92]	; (800b644 <TIM_OC5_SetConfig+0xb8>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00b      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a16      	ldr	r2, [pc, #88]	; (800b648 <TIM_OC5_SetConfig+0xbc>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d007      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a15      	ldr	r2, [pc, #84]	; (800b64c <TIM_OC5_SetConfig+0xc0>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d003      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a14      	ldr	r2, [pc, #80]	; (800b650 <TIM_OC5_SetConfig+0xc4>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d109      	bne.n	800b616 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	621a      	str	r2, [r3, #32]
}
 800b630:	bf00      	nop
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	fffeff8f 	.word	0xfffeff8f
 800b640:	40010000 	.word	0x40010000
 800b644:	40010400 	.word	0x40010400
 800b648:	40014000 	.word	0x40014000
 800b64c:	40014400 	.word	0x40014400
 800b650:	40014800 	.word	0x40014800

0800b654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4b22      	ldr	r3, [pc, #136]	; (800b708 <TIM_OC6_SetConfig+0xb4>)
 800b680:	4013      	ands	r3, r2
 800b682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	021b      	lsls	r3, r3, #8
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	4313      	orrs	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	051b      	lsls	r3, r3, #20
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a19      	ldr	r2, [pc, #100]	; (800b70c <TIM_OC6_SetConfig+0xb8>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d00f      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a18      	ldr	r2, [pc, #96]	; (800b710 <TIM_OC6_SetConfig+0xbc>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d00b      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a17      	ldr	r2, [pc, #92]	; (800b714 <TIM_OC6_SetConfig+0xc0>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d007      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a16      	ldr	r2, [pc, #88]	; (800b718 <TIM_OC6_SetConfig+0xc4>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d003      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a15      	ldr	r2, [pc, #84]	; (800b71c <TIM_OC6_SetConfig+0xc8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d109      	bne.n	800b6e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	029b      	lsls	r3, r3, #10
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	621a      	str	r2, [r3, #32]
}
 800b6fa:	bf00      	nop
 800b6fc:	371c      	adds	r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	feff8fff 	.word	0xfeff8fff
 800b70c:	40010000 	.word	0x40010000
 800b710:	40010400 	.word	0x40010400
 800b714:	40014000 	.word	0x40014000
 800b718:	40014400 	.word	0x40014400
 800b71c:	40014800 	.word	0x40014800

0800b720 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
 800b72c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	f023 0201 	bic.w	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4a2c      	ldr	r2, [pc, #176]	; (800b7fc <TIM_TI1_SetConfig+0xdc>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d023      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b754:	d01f      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4a29      	ldr	r2, [pc, #164]	; (800b800 <TIM_TI1_SetConfig+0xe0>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d01b      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4a28      	ldr	r2, [pc, #160]	; (800b804 <TIM_TI1_SetConfig+0xe4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d017      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4a27      	ldr	r2, [pc, #156]	; (800b808 <TIM_TI1_SetConfig+0xe8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d013      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4a26      	ldr	r2, [pc, #152]	; (800b80c <TIM_TI1_SetConfig+0xec>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d00f      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	4a25      	ldr	r2, [pc, #148]	; (800b810 <TIM_TI1_SetConfig+0xf0>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d00b      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4a24      	ldr	r2, [pc, #144]	; (800b814 <TIM_TI1_SetConfig+0xf4>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d007      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4a23      	ldr	r2, [pc, #140]	; (800b818 <TIM_TI1_SetConfig+0xf8>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d003      	beq.n	800b796 <TIM_TI1_SetConfig+0x76>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	4a22      	ldr	r2, [pc, #136]	; (800b81c <TIM_TI1_SetConfig+0xfc>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d101      	bne.n	800b79a <TIM_TI1_SetConfig+0x7a>
 800b796:	2301      	movs	r3, #1
 800b798:	e000      	b.n	800b79c <TIM_TI1_SetConfig+0x7c>
 800b79a:	2300      	movs	r3, #0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d008      	beq.n	800b7b2 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f023 0303 	bic.w	r3, r3, #3
 800b7a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	e003      	b.n	800b7ba <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f043 0301 	orr.w	r3, r3, #1
 800b7b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	f023 030a 	bic.w	r3, r3, #10
 800b7d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	f003 030a 	and.w	r3, r3, #10
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	621a      	str	r2, [r3, #32]
}
 800b7ee:	bf00      	nop
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	40010000 	.word	0x40010000
 800b800:	40000400 	.word	0x40000400
 800b804:	40000800 	.word	0x40000800
 800b808:	40000c00 	.word	0x40000c00
 800b80c:	40010400 	.word	0x40010400
 800b810:	40001800 	.word	0x40001800
 800b814:	40014000 	.word	0x40014000
 800b818:	4000e000 	.word	0x4000e000
 800b81c:	4000e400 	.word	0x4000e400

0800b820 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b820:	b480      	push	{r7}
 800b822:	b087      	sub	sp, #28
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	f023 0210 	bic.w	r2, r3, #16
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b84c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	697a      	ldr	r2, [r7, #20]
 800b854:	4313      	orrs	r3, r2
 800b856:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b85e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	031b      	lsls	r3, r3, #12
 800b864:	b29b      	uxth	r3, r3
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	4313      	orrs	r3, r2
 800b86a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b872:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	4313      	orrs	r3, r2
 800b880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	621a      	str	r2, [r3, #32]
}
 800b88e:	bf00      	nop
 800b890:	371c      	adds	r7, #28
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b087      	sub	sp, #28
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	69db      	ldr	r3, [r3, #28]
 800b8b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	f023 0303 	bic.w	r3, r3, #3
 800b8c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b8ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	021b      	lsls	r3, r3, #8
 800b8f0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	621a      	str	r2, [r3, #32]
}
 800b906:	bf00      	nop
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b912:	b480      	push	{r7}
 800b914:	b087      	sub	sp, #28
 800b916:	af00      	add	r7, sp, #0
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	607a      	str	r2, [r7, #4]
 800b91e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b93e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	021b      	lsls	r3, r3, #8
 800b944:	697a      	ldr	r2, [r7, #20]
 800b946:	4313      	orrs	r3, r2
 800b948:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b950:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	031b      	lsls	r3, r3, #12
 800b956:	b29b      	uxth	r3, r3
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b964:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	031b      	lsls	r3, r3, #12
 800b96a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	4313      	orrs	r3, r2
 800b972:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	621a      	str	r2, [r3, #32]
}
 800b980:	bf00      	nop
 800b982:	371c      	adds	r7, #28
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d101      	bne.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e077      	b.n	800ba94 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a35      	ldr	r2, [pc, #212]	; (800baa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d004      	beq.n	800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a34      	ldr	r2, [pc, #208]	; (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d108      	bne.n	800b9ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a25      	ldr	r2, [pc, #148]	; (800baa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d02c      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba16:	d027      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a22      	ldr	r2, [pc, #136]	; (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d022      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a21      	ldr	r2, [pc, #132]	; (800baac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d01d      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a1f      	ldr	r2, [pc, #124]	; (800bab0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d018      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a1a      	ldr	r2, [pc, #104]	; (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d013      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a1b      	ldr	r2, [pc, #108]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d00e      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a1a      	ldr	r2, [pc, #104]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d009      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a18      	ldr	r2, [pc, #96]	; (800babc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d004      	beq.n	800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a17      	ldr	r2, [pc, #92]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d10c      	bne.n	800ba82 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	40010000 	.word	0x40010000
 800baa4:	40010400 	.word	0x40010400
 800baa8:	40000400 	.word	0x40000400
 800baac:	40000800 	.word	0x40000800
 800bab0:	40000c00 	.word	0x40000c00
 800bab4:	40001800 	.word	0x40001800
 800bab8:	40014000 	.word	0x40014000
 800babc:	4000e000 	.word	0x4000e000
 800bac0:	4000e400 	.word	0x4000e400

0800bac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bace:	2300      	movs	r3, #0
 800bad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d101      	bne.n	800bae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800badc:	2302      	movs	r3, #2
 800bade:	e087      	b.n	800bbf0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	695b      	ldr	r3, [r3, #20]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	041b      	lsls	r3, r3, #16
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a27      	ldr	r2, [pc, #156]	; (800bbfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d004      	beq.n	800bb6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a25      	ldr	r2, [pc, #148]	; (800bc00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d106      	bne.n	800bb7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a1e      	ldr	r2, [pc, #120]	; (800bbfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d004      	beq.n	800bb90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a1d      	ldr	r2, [pc, #116]	; (800bc00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d126      	bne.n	800bbde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9a:	051b      	lsls	r3, r3, #20
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a0e      	ldr	r2, [pc, #56]	; (800bbfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d004      	beq.n	800bbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a0d      	ldr	r2, [pc, #52]	; (800bc00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d106      	bne.n	800bbde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	40010000 	.word	0x40010000
 800bc00:	40010400 	.word	0x40010400

0800bc04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e042      	b.n	800bc9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d106      	bne.n	800bc2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7f7 f901 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2224      	movs	r2, #36	; 0x24
 800bc32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f022 0201 	bic.w	r2, r2, #1
 800bc44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f82c 	bl	800bca4 <UART_SetConfig>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d101      	bne.n	800bc56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e022      	b.n	800bc9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fe8c 	bl	800c97c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	689a      	ldr	r2, [r3, #8]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0201 	orr.w	r2, r2, #1
 800bc92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 ff13 	bl	800cac0 <UART_CheckIdleState>
 800bc9a:	4603      	mov	r3, r0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bca8:	b092      	sub	sp, #72	; 0x48
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	689a      	ldr	r2, [r3, #8]
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	431a      	orrs	r2, r3
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	431a      	orrs	r2, r3
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	4bbe      	ldr	r3, [pc, #760]	; (800bfcc <UART_SetConfig+0x328>)
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	6812      	ldr	r2, [r2, #0]
 800bcda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	68da      	ldr	r2, [r3, #12]
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4ab3      	ldr	r2, [pc, #716]	; (800bfd0 <UART_SetConfig+0x32c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d004      	beq.n	800bd10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	689a      	ldr	r2, [r3, #8]
 800bd16:	4baf      	ldr	r3, [pc, #700]	; (800bfd4 <UART_SetConfig+0x330>)
 800bd18:	4013      	ands	r3, r2
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	6812      	ldr	r2, [r2, #0]
 800bd1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd20:	430b      	orrs	r3, r1
 800bd22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2a:	f023 010f 	bic.w	r1, r3, #15
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4aa6      	ldr	r2, [pc, #664]	; (800bfd8 <UART_SetConfig+0x334>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d177      	bne.n	800be34 <UART_SetConfig+0x190>
 800bd44:	4ba5      	ldr	r3, [pc, #660]	; (800bfdc <UART_SetConfig+0x338>)
 800bd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd4c:	2b28      	cmp	r3, #40	; 0x28
 800bd4e:	d86d      	bhi.n	800be2c <UART_SetConfig+0x188>
 800bd50:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <UART_SetConfig+0xb4>)
 800bd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd56:	bf00      	nop
 800bd58:	0800bdfd 	.word	0x0800bdfd
 800bd5c:	0800be2d 	.word	0x0800be2d
 800bd60:	0800be2d 	.word	0x0800be2d
 800bd64:	0800be2d 	.word	0x0800be2d
 800bd68:	0800be2d 	.word	0x0800be2d
 800bd6c:	0800be2d 	.word	0x0800be2d
 800bd70:	0800be2d 	.word	0x0800be2d
 800bd74:	0800be2d 	.word	0x0800be2d
 800bd78:	0800be05 	.word	0x0800be05
 800bd7c:	0800be2d 	.word	0x0800be2d
 800bd80:	0800be2d 	.word	0x0800be2d
 800bd84:	0800be2d 	.word	0x0800be2d
 800bd88:	0800be2d 	.word	0x0800be2d
 800bd8c:	0800be2d 	.word	0x0800be2d
 800bd90:	0800be2d 	.word	0x0800be2d
 800bd94:	0800be2d 	.word	0x0800be2d
 800bd98:	0800be0d 	.word	0x0800be0d
 800bd9c:	0800be2d 	.word	0x0800be2d
 800bda0:	0800be2d 	.word	0x0800be2d
 800bda4:	0800be2d 	.word	0x0800be2d
 800bda8:	0800be2d 	.word	0x0800be2d
 800bdac:	0800be2d 	.word	0x0800be2d
 800bdb0:	0800be2d 	.word	0x0800be2d
 800bdb4:	0800be2d 	.word	0x0800be2d
 800bdb8:	0800be15 	.word	0x0800be15
 800bdbc:	0800be2d 	.word	0x0800be2d
 800bdc0:	0800be2d 	.word	0x0800be2d
 800bdc4:	0800be2d 	.word	0x0800be2d
 800bdc8:	0800be2d 	.word	0x0800be2d
 800bdcc:	0800be2d 	.word	0x0800be2d
 800bdd0:	0800be2d 	.word	0x0800be2d
 800bdd4:	0800be2d 	.word	0x0800be2d
 800bdd8:	0800be1d 	.word	0x0800be1d
 800bddc:	0800be2d 	.word	0x0800be2d
 800bde0:	0800be2d 	.word	0x0800be2d
 800bde4:	0800be2d 	.word	0x0800be2d
 800bde8:	0800be2d 	.word	0x0800be2d
 800bdec:	0800be2d 	.word	0x0800be2d
 800bdf0:	0800be2d 	.word	0x0800be2d
 800bdf4:	0800be2d 	.word	0x0800be2d
 800bdf8:	0800be25 	.word	0x0800be25
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be02:	e326      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be04:	2304      	movs	r3, #4
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0a:	e322      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be0c:	2308      	movs	r3, #8
 800be0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be12:	e31e      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be14:	2310      	movs	r3, #16
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1a:	e31a      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be1c:	2320      	movs	r3, #32
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be22:	e316      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be24:	2340      	movs	r3, #64	; 0x40
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2a:	e312      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be2c:	2380      	movs	r3, #128	; 0x80
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be32:	e30e      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a69      	ldr	r2, [pc, #420]	; (800bfe0 <UART_SetConfig+0x33c>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d130      	bne.n	800bea0 <UART_SetConfig+0x1fc>
 800be3e:	4b67      	ldr	r3, [pc, #412]	; (800bfdc <UART_SetConfig+0x338>)
 800be40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be42:	f003 0307 	and.w	r3, r3, #7
 800be46:	2b05      	cmp	r3, #5
 800be48:	d826      	bhi.n	800be98 <UART_SetConfig+0x1f4>
 800be4a:	a201      	add	r2, pc, #4	; (adr r2, 800be50 <UART_SetConfig+0x1ac>)
 800be4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be50:	0800be69 	.word	0x0800be69
 800be54:	0800be71 	.word	0x0800be71
 800be58:	0800be79 	.word	0x0800be79
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800be89 	.word	0x0800be89
 800be64:	0800be91 	.word	0x0800be91
 800be68:	2300      	movs	r3, #0
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6e:	e2f0      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be70:	2304      	movs	r3, #4
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be76:	e2ec      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be78:	2308      	movs	r3, #8
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7e:	e2e8      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be80:	2310      	movs	r3, #16
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be86:	e2e4      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be88:	2320      	movs	r3, #32
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8e:	e2e0      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be90:	2340      	movs	r3, #64	; 0x40
 800be92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be96:	e2dc      	b.n	800c452 <UART_SetConfig+0x7ae>
 800be98:	2380      	movs	r3, #128	; 0x80
 800be9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9e:	e2d8      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a4f      	ldr	r2, [pc, #316]	; (800bfe4 <UART_SetConfig+0x340>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d130      	bne.n	800bf0c <UART_SetConfig+0x268>
 800beaa:	4b4c      	ldr	r3, [pc, #304]	; (800bfdc <UART_SetConfig+0x338>)
 800beac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	d826      	bhi.n	800bf04 <UART_SetConfig+0x260>
 800beb6:	a201      	add	r2, pc, #4	; (adr r2, 800bebc <UART_SetConfig+0x218>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800bed5 	.word	0x0800bed5
 800bec0:	0800bedd 	.word	0x0800bedd
 800bec4:	0800bee5 	.word	0x0800bee5
 800bec8:	0800beed 	.word	0x0800beed
 800becc:	0800bef5 	.word	0x0800bef5
 800bed0:	0800befd 	.word	0x0800befd
 800bed4:	2300      	movs	r3, #0
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beda:	e2ba      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bedc:	2304      	movs	r3, #4
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee2:	e2b6      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bee4:	2308      	movs	r3, #8
 800bee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beea:	e2b2      	b.n	800c452 <UART_SetConfig+0x7ae>
 800beec:	2310      	movs	r3, #16
 800beee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef2:	e2ae      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bef4:	2320      	movs	r3, #32
 800bef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befa:	e2aa      	b.n	800c452 <UART_SetConfig+0x7ae>
 800befc:	2340      	movs	r3, #64	; 0x40
 800befe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf02:	e2a6      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf04:	2380      	movs	r3, #128	; 0x80
 800bf06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0a:	e2a2      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a35      	ldr	r2, [pc, #212]	; (800bfe8 <UART_SetConfig+0x344>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d130      	bne.n	800bf78 <UART_SetConfig+0x2d4>
 800bf16:	4b31      	ldr	r3, [pc, #196]	; (800bfdc <UART_SetConfig+0x338>)
 800bf18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1a:	f003 0307 	and.w	r3, r3, #7
 800bf1e:	2b05      	cmp	r3, #5
 800bf20:	d826      	bhi.n	800bf70 <UART_SetConfig+0x2cc>
 800bf22:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <UART_SetConfig+0x284>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf41 	.word	0x0800bf41
 800bf2c:	0800bf49 	.word	0x0800bf49
 800bf30:	0800bf51 	.word	0x0800bf51
 800bf34:	0800bf59 	.word	0x0800bf59
 800bf38:	0800bf61 	.word	0x0800bf61
 800bf3c:	0800bf69 	.word	0x0800bf69
 800bf40:	2300      	movs	r3, #0
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf46:	e284      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf48:	2304      	movs	r3, #4
 800bf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4e:	e280      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf50:	2308      	movs	r3, #8
 800bf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf56:	e27c      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf58:	2310      	movs	r3, #16
 800bf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5e:	e278      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf60:	2320      	movs	r3, #32
 800bf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf66:	e274      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf68:	2340      	movs	r3, #64	; 0x40
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6e:	e270      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf70:	2380      	movs	r3, #128	; 0x80
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf76:	e26c      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a1b      	ldr	r2, [pc, #108]	; (800bfec <UART_SetConfig+0x348>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d142      	bne.n	800c008 <UART_SetConfig+0x364>
 800bf82:	4b16      	ldr	r3, [pc, #88]	; (800bfdc <UART_SetConfig+0x338>)
 800bf84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf86:	f003 0307 	and.w	r3, r3, #7
 800bf8a:	2b05      	cmp	r3, #5
 800bf8c:	d838      	bhi.n	800c000 <UART_SetConfig+0x35c>
 800bf8e:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <UART_SetConfig+0x2f0>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800bfad 	.word	0x0800bfad
 800bf98:	0800bfb5 	.word	0x0800bfb5
 800bf9c:	0800bfbd 	.word	0x0800bfbd
 800bfa0:	0800bfc5 	.word	0x0800bfc5
 800bfa4:	0800bff1 	.word	0x0800bff1
 800bfa8:	0800bff9 	.word	0x0800bff9
 800bfac:	2300      	movs	r3, #0
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb2:	e24e      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bfb4:	2304      	movs	r3, #4
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfba:	e24a      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bfbc:	2308      	movs	r3, #8
 800bfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc2:	e246      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bfc4:	2310      	movs	r3, #16
 800bfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfca:	e242      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bfcc:	cfff69f3 	.word	0xcfff69f3
 800bfd0:	58000c00 	.word	0x58000c00
 800bfd4:	11fff4ff 	.word	0x11fff4ff
 800bfd8:	40011000 	.word	0x40011000
 800bfdc:	58024400 	.word	0x58024400
 800bfe0:	40004400 	.word	0x40004400
 800bfe4:	40004800 	.word	0x40004800
 800bfe8:	40004c00 	.word	0x40004c00
 800bfec:	40005000 	.word	0x40005000
 800bff0:	2320      	movs	r3, #32
 800bff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff6:	e22c      	b.n	800c452 <UART_SetConfig+0x7ae>
 800bff8:	2340      	movs	r3, #64	; 0x40
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffe:	e228      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c000:	2380      	movs	r3, #128	; 0x80
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c006:	e224      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4ab1      	ldr	r2, [pc, #708]	; (800c2d4 <UART_SetConfig+0x630>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d176      	bne.n	800c100 <UART_SetConfig+0x45c>
 800c012:	4bb1      	ldr	r3, [pc, #708]	; (800c2d8 <UART_SetConfig+0x634>)
 800c014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c01a:	2b28      	cmp	r3, #40	; 0x28
 800c01c:	d86c      	bhi.n	800c0f8 <UART_SetConfig+0x454>
 800c01e:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <UART_SetConfig+0x380>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c0c9 	.word	0x0800c0c9
 800c028:	0800c0f9 	.word	0x0800c0f9
 800c02c:	0800c0f9 	.word	0x0800c0f9
 800c030:	0800c0f9 	.word	0x0800c0f9
 800c034:	0800c0f9 	.word	0x0800c0f9
 800c038:	0800c0f9 	.word	0x0800c0f9
 800c03c:	0800c0f9 	.word	0x0800c0f9
 800c040:	0800c0f9 	.word	0x0800c0f9
 800c044:	0800c0d1 	.word	0x0800c0d1
 800c048:	0800c0f9 	.word	0x0800c0f9
 800c04c:	0800c0f9 	.word	0x0800c0f9
 800c050:	0800c0f9 	.word	0x0800c0f9
 800c054:	0800c0f9 	.word	0x0800c0f9
 800c058:	0800c0f9 	.word	0x0800c0f9
 800c05c:	0800c0f9 	.word	0x0800c0f9
 800c060:	0800c0f9 	.word	0x0800c0f9
 800c064:	0800c0d9 	.word	0x0800c0d9
 800c068:	0800c0f9 	.word	0x0800c0f9
 800c06c:	0800c0f9 	.word	0x0800c0f9
 800c070:	0800c0f9 	.word	0x0800c0f9
 800c074:	0800c0f9 	.word	0x0800c0f9
 800c078:	0800c0f9 	.word	0x0800c0f9
 800c07c:	0800c0f9 	.word	0x0800c0f9
 800c080:	0800c0f9 	.word	0x0800c0f9
 800c084:	0800c0e1 	.word	0x0800c0e1
 800c088:	0800c0f9 	.word	0x0800c0f9
 800c08c:	0800c0f9 	.word	0x0800c0f9
 800c090:	0800c0f9 	.word	0x0800c0f9
 800c094:	0800c0f9 	.word	0x0800c0f9
 800c098:	0800c0f9 	.word	0x0800c0f9
 800c09c:	0800c0f9 	.word	0x0800c0f9
 800c0a0:	0800c0f9 	.word	0x0800c0f9
 800c0a4:	0800c0e9 	.word	0x0800c0e9
 800c0a8:	0800c0f9 	.word	0x0800c0f9
 800c0ac:	0800c0f9 	.word	0x0800c0f9
 800c0b0:	0800c0f9 	.word	0x0800c0f9
 800c0b4:	0800c0f9 	.word	0x0800c0f9
 800c0b8:	0800c0f9 	.word	0x0800c0f9
 800c0bc:	0800c0f9 	.word	0x0800c0f9
 800c0c0:	0800c0f9 	.word	0x0800c0f9
 800c0c4:	0800c0f1 	.word	0x0800c0f1
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ce:	e1c0      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e1bc      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c0d8:	2308      	movs	r3, #8
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0de:	e1b8      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c0e0:	2310      	movs	r3, #16
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e1b4      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c0e8:	2320      	movs	r3, #32
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e1b0      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e1ac      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c0f8:	2380      	movs	r3, #128	; 0x80
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e1a8      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a75      	ldr	r2, [pc, #468]	; (800c2dc <UART_SetConfig+0x638>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d130      	bne.n	800c16c <UART_SetConfig+0x4c8>
 800c10a:	4b73      	ldr	r3, [pc, #460]	; (800c2d8 <UART_SetConfig+0x634>)
 800c10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10e:	f003 0307 	and.w	r3, r3, #7
 800c112:	2b05      	cmp	r3, #5
 800c114:	d826      	bhi.n	800c164 <UART_SetConfig+0x4c0>
 800c116:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <UART_SetConfig+0x478>)
 800c118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11c:	0800c135 	.word	0x0800c135
 800c120:	0800c13d 	.word	0x0800c13d
 800c124:	0800c145 	.word	0x0800c145
 800c128:	0800c14d 	.word	0x0800c14d
 800c12c:	0800c155 	.word	0x0800c155
 800c130:	0800c15d 	.word	0x0800c15d
 800c134:	2300      	movs	r3, #0
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e18a      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c13c:	2304      	movs	r3, #4
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e186      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c144:	2308      	movs	r3, #8
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e182      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c14c:	2310      	movs	r3, #16
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e17e      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c154:	2320      	movs	r3, #32
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e17a      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c15c:	2340      	movs	r3, #64	; 0x40
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e176      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c164:	2380      	movs	r3, #128	; 0x80
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e172      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a5b      	ldr	r2, [pc, #364]	; (800c2e0 <UART_SetConfig+0x63c>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d130      	bne.n	800c1d8 <UART_SetConfig+0x534>
 800c176:	4b58      	ldr	r3, [pc, #352]	; (800c2d8 <UART_SetConfig+0x634>)
 800c178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c17a:	f003 0307 	and.w	r3, r3, #7
 800c17e:	2b05      	cmp	r3, #5
 800c180:	d826      	bhi.n	800c1d0 <UART_SetConfig+0x52c>
 800c182:	a201      	add	r2, pc, #4	; (adr r2, 800c188 <UART_SetConfig+0x4e4>)
 800c184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c188:	0800c1a1 	.word	0x0800c1a1
 800c18c:	0800c1a9 	.word	0x0800c1a9
 800c190:	0800c1b1 	.word	0x0800c1b1
 800c194:	0800c1b9 	.word	0x0800c1b9
 800c198:	0800c1c1 	.word	0x0800c1c1
 800c19c:	0800c1c9 	.word	0x0800c1c9
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e154      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c1a8:	2304      	movs	r3, #4
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e150      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c1b0:	2308      	movs	r3, #8
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e14c      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c1b8:	2310      	movs	r3, #16
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e148      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c1c0:	2320      	movs	r3, #32
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e144      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c1c8:	2340      	movs	r3, #64	; 0x40
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ce:	e140      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c1d0:	2380      	movs	r3, #128	; 0x80
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e13c      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a41      	ldr	r2, [pc, #260]	; (800c2e4 <UART_SetConfig+0x640>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	f040 8082 	bne.w	800c2e8 <UART_SetConfig+0x644>
 800c1e4:	4b3c      	ldr	r3, [pc, #240]	; (800c2d8 <UART_SetConfig+0x634>)
 800c1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1ec:	2b28      	cmp	r3, #40	; 0x28
 800c1ee:	d86d      	bhi.n	800c2cc <UART_SetConfig+0x628>
 800c1f0:	a201      	add	r2, pc, #4	; (adr r2, 800c1f8 <UART_SetConfig+0x554>)
 800c1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f6:	bf00      	nop
 800c1f8:	0800c29d 	.word	0x0800c29d
 800c1fc:	0800c2cd 	.word	0x0800c2cd
 800c200:	0800c2cd 	.word	0x0800c2cd
 800c204:	0800c2cd 	.word	0x0800c2cd
 800c208:	0800c2cd 	.word	0x0800c2cd
 800c20c:	0800c2cd 	.word	0x0800c2cd
 800c210:	0800c2cd 	.word	0x0800c2cd
 800c214:	0800c2cd 	.word	0x0800c2cd
 800c218:	0800c2a5 	.word	0x0800c2a5
 800c21c:	0800c2cd 	.word	0x0800c2cd
 800c220:	0800c2cd 	.word	0x0800c2cd
 800c224:	0800c2cd 	.word	0x0800c2cd
 800c228:	0800c2cd 	.word	0x0800c2cd
 800c22c:	0800c2cd 	.word	0x0800c2cd
 800c230:	0800c2cd 	.word	0x0800c2cd
 800c234:	0800c2cd 	.word	0x0800c2cd
 800c238:	0800c2ad 	.word	0x0800c2ad
 800c23c:	0800c2cd 	.word	0x0800c2cd
 800c240:	0800c2cd 	.word	0x0800c2cd
 800c244:	0800c2cd 	.word	0x0800c2cd
 800c248:	0800c2cd 	.word	0x0800c2cd
 800c24c:	0800c2cd 	.word	0x0800c2cd
 800c250:	0800c2cd 	.word	0x0800c2cd
 800c254:	0800c2cd 	.word	0x0800c2cd
 800c258:	0800c2b5 	.word	0x0800c2b5
 800c25c:	0800c2cd 	.word	0x0800c2cd
 800c260:	0800c2cd 	.word	0x0800c2cd
 800c264:	0800c2cd 	.word	0x0800c2cd
 800c268:	0800c2cd 	.word	0x0800c2cd
 800c26c:	0800c2cd 	.word	0x0800c2cd
 800c270:	0800c2cd 	.word	0x0800c2cd
 800c274:	0800c2cd 	.word	0x0800c2cd
 800c278:	0800c2bd 	.word	0x0800c2bd
 800c27c:	0800c2cd 	.word	0x0800c2cd
 800c280:	0800c2cd 	.word	0x0800c2cd
 800c284:	0800c2cd 	.word	0x0800c2cd
 800c288:	0800c2cd 	.word	0x0800c2cd
 800c28c:	0800c2cd 	.word	0x0800c2cd
 800c290:	0800c2cd 	.word	0x0800c2cd
 800c294:	0800c2cd 	.word	0x0800c2cd
 800c298:	0800c2c5 	.word	0x0800c2c5
 800c29c:	2301      	movs	r3, #1
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a2:	e0d6      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c2a4:	2304      	movs	r3, #4
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2aa:	e0d2      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c2ac:	2308      	movs	r3, #8
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b2:	e0ce      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c2b4:	2310      	movs	r3, #16
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ba:	e0ca      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c2bc:	2320      	movs	r3, #32
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e0c6      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c2c4:	2340      	movs	r3, #64	; 0x40
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e0c2      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c2cc:	2380      	movs	r3, #128	; 0x80
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e0be      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c2d4:	40011400 	.word	0x40011400
 800c2d8:	58024400 	.word	0x58024400
 800c2dc:	40007800 	.word	0x40007800
 800c2e0:	40007c00 	.word	0x40007c00
 800c2e4:	40011800 	.word	0x40011800
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4aad      	ldr	r2, [pc, #692]	; (800c5a4 <UART_SetConfig+0x900>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d176      	bne.n	800c3e0 <UART_SetConfig+0x73c>
 800c2f2:	4bad      	ldr	r3, [pc, #692]	; (800c5a8 <UART_SetConfig+0x904>)
 800c2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2fa:	2b28      	cmp	r3, #40	; 0x28
 800c2fc:	d86c      	bhi.n	800c3d8 <UART_SetConfig+0x734>
 800c2fe:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <UART_SetConfig+0x660>)
 800c300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c304:	0800c3a9 	.word	0x0800c3a9
 800c308:	0800c3d9 	.word	0x0800c3d9
 800c30c:	0800c3d9 	.word	0x0800c3d9
 800c310:	0800c3d9 	.word	0x0800c3d9
 800c314:	0800c3d9 	.word	0x0800c3d9
 800c318:	0800c3d9 	.word	0x0800c3d9
 800c31c:	0800c3d9 	.word	0x0800c3d9
 800c320:	0800c3d9 	.word	0x0800c3d9
 800c324:	0800c3b1 	.word	0x0800c3b1
 800c328:	0800c3d9 	.word	0x0800c3d9
 800c32c:	0800c3d9 	.word	0x0800c3d9
 800c330:	0800c3d9 	.word	0x0800c3d9
 800c334:	0800c3d9 	.word	0x0800c3d9
 800c338:	0800c3d9 	.word	0x0800c3d9
 800c33c:	0800c3d9 	.word	0x0800c3d9
 800c340:	0800c3d9 	.word	0x0800c3d9
 800c344:	0800c3b9 	.word	0x0800c3b9
 800c348:	0800c3d9 	.word	0x0800c3d9
 800c34c:	0800c3d9 	.word	0x0800c3d9
 800c350:	0800c3d9 	.word	0x0800c3d9
 800c354:	0800c3d9 	.word	0x0800c3d9
 800c358:	0800c3d9 	.word	0x0800c3d9
 800c35c:	0800c3d9 	.word	0x0800c3d9
 800c360:	0800c3d9 	.word	0x0800c3d9
 800c364:	0800c3c1 	.word	0x0800c3c1
 800c368:	0800c3d9 	.word	0x0800c3d9
 800c36c:	0800c3d9 	.word	0x0800c3d9
 800c370:	0800c3d9 	.word	0x0800c3d9
 800c374:	0800c3d9 	.word	0x0800c3d9
 800c378:	0800c3d9 	.word	0x0800c3d9
 800c37c:	0800c3d9 	.word	0x0800c3d9
 800c380:	0800c3d9 	.word	0x0800c3d9
 800c384:	0800c3c9 	.word	0x0800c3c9
 800c388:	0800c3d9 	.word	0x0800c3d9
 800c38c:	0800c3d9 	.word	0x0800c3d9
 800c390:	0800c3d9 	.word	0x0800c3d9
 800c394:	0800c3d9 	.word	0x0800c3d9
 800c398:	0800c3d9 	.word	0x0800c3d9
 800c39c:	0800c3d9 	.word	0x0800c3d9
 800c3a0:	0800c3d9 	.word	0x0800c3d9
 800c3a4:	0800c3d1 	.word	0x0800c3d1
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ae:	e050      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c3b0:	2304      	movs	r3, #4
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b6:	e04c      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c3b8:	2308      	movs	r3, #8
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3be:	e048      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c3c0:	2310      	movs	r3, #16
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c6:	e044      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c3c8:	2320      	movs	r3, #32
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ce:	e040      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c3d0:	2340      	movs	r3, #64	; 0x40
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d6:	e03c      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c3d8:	2380      	movs	r3, #128	; 0x80
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3de:	e038      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a71      	ldr	r2, [pc, #452]	; (800c5ac <UART_SetConfig+0x908>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d130      	bne.n	800c44c <UART_SetConfig+0x7a8>
 800c3ea:	4b6f      	ldr	r3, [pc, #444]	; (800c5a8 <UART_SetConfig+0x904>)
 800c3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	2b05      	cmp	r3, #5
 800c3f4:	d826      	bhi.n	800c444 <UART_SetConfig+0x7a0>
 800c3f6:	a201      	add	r2, pc, #4	; (adr r2, 800c3fc <UART_SetConfig+0x758>)
 800c3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fc:	0800c415 	.word	0x0800c415
 800c400:	0800c41d 	.word	0x0800c41d
 800c404:	0800c425 	.word	0x0800c425
 800c408:	0800c42d 	.word	0x0800c42d
 800c40c:	0800c435 	.word	0x0800c435
 800c410:	0800c43d 	.word	0x0800c43d
 800c414:	2302      	movs	r3, #2
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41a:	e01a      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c41c:	2304      	movs	r3, #4
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c422:	e016      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c424:	2308      	movs	r3, #8
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42a:	e012      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c42c:	2310      	movs	r3, #16
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c432:	e00e      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c434:	2320      	movs	r3, #32
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e00a      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c43c:	2340      	movs	r3, #64	; 0x40
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e006      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c444:	2380      	movs	r3, #128	; 0x80
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e002      	b.n	800c452 <UART_SetConfig+0x7ae>
 800c44c:	2380      	movs	r3, #128	; 0x80
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a55      	ldr	r2, [pc, #340]	; (800c5ac <UART_SetConfig+0x908>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	f040 80f8 	bne.w	800c64e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c45e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c462:	2b20      	cmp	r3, #32
 800c464:	dc46      	bgt.n	800c4f4 <UART_SetConfig+0x850>
 800c466:	2b02      	cmp	r3, #2
 800c468:	db75      	blt.n	800c556 <UART_SetConfig+0x8b2>
 800c46a:	3b02      	subs	r3, #2
 800c46c:	2b1e      	cmp	r3, #30
 800c46e:	d872      	bhi.n	800c556 <UART_SetConfig+0x8b2>
 800c470:	a201      	add	r2, pc, #4	; (adr r2, 800c478 <UART_SetConfig+0x7d4>)
 800c472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c476:	bf00      	nop
 800c478:	0800c4fb 	.word	0x0800c4fb
 800c47c:	0800c557 	.word	0x0800c557
 800c480:	0800c503 	.word	0x0800c503
 800c484:	0800c557 	.word	0x0800c557
 800c488:	0800c557 	.word	0x0800c557
 800c48c:	0800c557 	.word	0x0800c557
 800c490:	0800c513 	.word	0x0800c513
 800c494:	0800c557 	.word	0x0800c557
 800c498:	0800c557 	.word	0x0800c557
 800c49c:	0800c557 	.word	0x0800c557
 800c4a0:	0800c557 	.word	0x0800c557
 800c4a4:	0800c557 	.word	0x0800c557
 800c4a8:	0800c557 	.word	0x0800c557
 800c4ac:	0800c557 	.word	0x0800c557
 800c4b0:	0800c523 	.word	0x0800c523
 800c4b4:	0800c557 	.word	0x0800c557
 800c4b8:	0800c557 	.word	0x0800c557
 800c4bc:	0800c557 	.word	0x0800c557
 800c4c0:	0800c557 	.word	0x0800c557
 800c4c4:	0800c557 	.word	0x0800c557
 800c4c8:	0800c557 	.word	0x0800c557
 800c4cc:	0800c557 	.word	0x0800c557
 800c4d0:	0800c557 	.word	0x0800c557
 800c4d4:	0800c557 	.word	0x0800c557
 800c4d8:	0800c557 	.word	0x0800c557
 800c4dc:	0800c557 	.word	0x0800c557
 800c4e0:	0800c557 	.word	0x0800c557
 800c4e4:	0800c557 	.word	0x0800c557
 800c4e8:	0800c557 	.word	0x0800c557
 800c4ec:	0800c557 	.word	0x0800c557
 800c4f0:	0800c549 	.word	0x0800c549
 800c4f4:	2b40      	cmp	r3, #64	; 0x40
 800c4f6:	d02a      	beq.n	800c54e <UART_SetConfig+0x8aa>
 800c4f8:	e02d      	b.n	800c556 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c4fa:	f7fd fa95 	bl	8009a28 <HAL_RCCEx_GetD3PCLK1Freq>
 800c4fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c500:	e02f      	b.n	800c562 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c506:	4618      	mov	r0, r3
 800c508:	f7fd faa4 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c510:	e027      	b.n	800c562 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c512:	f107 0318 	add.w	r3, r7, #24
 800c516:	4618      	mov	r0, r3
 800c518:	f7fd fbf0 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c520:	e01f      	b.n	800c562 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c522:	4b21      	ldr	r3, [pc, #132]	; (800c5a8 <UART_SetConfig+0x904>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f003 0320 	and.w	r3, r3, #32
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d009      	beq.n	800c542 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c52e:	4b1e      	ldr	r3, [pc, #120]	; (800c5a8 <UART_SetConfig+0x904>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	08db      	lsrs	r3, r3, #3
 800c534:	f003 0303 	and.w	r3, r3, #3
 800c538:	4a1d      	ldr	r2, [pc, #116]	; (800c5b0 <UART_SetConfig+0x90c>)
 800c53a:	fa22 f303 	lsr.w	r3, r2, r3
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c540:	e00f      	b.n	800c562 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c542:	4b1b      	ldr	r3, [pc, #108]	; (800c5b0 <UART_SetConfig+0x90c>)
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c546:	e00c      	b.n	800c562 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c548:	4b1a      	ldr	r3, [pc, #104]	; (800c5b4 <UART_SetConfig+0x910>)
 800c54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c54c:	e009      	b.n	800c562 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c54e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c554:	e005      	b.n	800c562 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c556:	2300      	movs	r3, #0
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 81ee 	beq.w	800c946 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56e:	4a12      	ldr	r2, [pc, #72]	; (800c5b8 <UART_SetConfig+0x914>)
 800c570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c574:	461a      	mov	r2, r3
 800c576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c578:	fbb3 f3f2 	udiv	r3, r3, r2
 800c57c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	685a      	ldr	r2, [r3, #4]
 800c582:	4613      	mov	r3, r2
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	4413      	add	r3, r2
 800c588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d305      	bcc.n	800c59a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c596:	429a      	cmp	r2, r3
 800c598:	d910      	bls.n	800c5bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5a0:	e1d1      	b.n	800c946 <UART_SetConfig+0xca2>
 800c5a2:	bf00      	nop
 800c5a4:	40011c00 	.word	0x40011c00
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	58000c00 	.word	0x58000c00
 800c5b0:	03d09000 	.word	0x03d09000
 800c5b4:	003d0900 	.word	0x003d0900
 800c5b8:	0800cfdc 	.word	0x0800cfdc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5be:	2200      	movs	r2, #0
 800c5c0:	60bb      	str	r3, [r7, #8]
 800c5c2:	60fa      	str	r2, [r7, #12]
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c8:	4ac0      	ldr	r2, [pc, #768]	; (800c8cc <UART_SetConfig+0xc28>)
 800c5ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	603b      	str	r3, [r7, #0]
 800c5d4:	607a      	str	r2, [r7, #4]
 800c5d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5de:	f7f3 fe95 	bl	800030c <__aeabi_uldivmod>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	f04f 0200 	mov.w	r2, #0
 800c5ee:	f04f 0300 	mov.w	r3, #0
 800c5f2:	020b      	lsls	r3, r1, #8
 800c5f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5f8:	0202      	lsls	r2, r0, #8
 800c5fa:	6979      	ldr	r1, [r7, #20]
 800c5fc:	6849      	ldr	r1, [r1, #4]
 800c5fe:	0849      	lsrs	r1, r1, #1
 800c600:	2000      	movs	r0, #0
 800c602:	460c      	mov	r4, r1
 800c604:	4605      	mov	r5, r0
 800c606:	eb12 0804 	adds.w	r8, r2, r4
 800c60a:	eb43 0905 	adc.w	r9, r3, r5
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	469a      	mov	sl, r3
 800c616:	4693      	mov	fp, r2
 800c618:	4652      	mov	r2, sl
 800c61a:	465b      	mov	r3, fp
 800c61c:	4640      	mov	r0, r8
 800c61e:	4649      	mov	r1, r9
 800c620:	f7f3 fe74 	bl	800030c <__aeabi_uldivmod>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4613      	mov	r3, r2
 800c62a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c632:	d308      	bcc.n	800c646 <UART_SetConfig+0x9a2>
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c63a:	d204      	bcs.n	800c646 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c642:	60da      	str	r2, [r3, #12]
 800c644:	e17f      	b.n	800c946 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c64c:	e17b      	b.n	800c946 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c656:	f040 80bd 	bne.w	800c7d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c65a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c65e:	2b20      	cmp	r3, #32
 800c660:	dc48      	bgt.n	800c6f4 <UART_SetConfig+0xa50>
 800c662:	2b00      	cmp	r3, #0
 800c664:	db7b      	blt.n	800c75e <UART_SetConfig+0xaba>
 800c666:	2b20      	cmp	r3, #32
 800c668:	d879      	bhi.n	800c75e <UART_SetConfig+0xaba>
 800c66a:	a201      	add	r2, pc, #4	; (adr r2, 800c670 <UART_SetConfig+0x9cc>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c6fb 	.word	0x0800c6fb
 800c674:	0800c703 	.word	0x0800c703
 800c678:	0800c75f 	.word	0x0800c75f
 800c67c:	0800c75f 	.word	0x0800c75f
 800c680:	0800c70b 	.word	0x0800c70b
 800c684:	0800c75f 	.word	0x0800c75f
 800c688:	0800c75f 	.word	0x0800c75f
 800c68c:	0800c75f 	.word	0x0800c75f
 800c690:	0800c71b 	.word	0x0800c71b
 800c694:	0800c75f 	.word	0x0800c75f
 800c698:	0800c75f 	.word	0x0800c75f
 800c69c:	0800c75f 	.word	0x0800c75f
 800c6a0:	0800c75f 	.word	0x0800c75f
 800c6a4:	0800c75f 	.word	0x0800c75f
 800c6a8:	0800c75f 	.word	0x0800c75f
 800c6ac:	0800c75f 	.word	0x0800c75f
 800c6b0:	0800c72b 	.word	0x0800c72b
 800c6b4:	0800c75f 	.word	0x0800c75f
 800c6b8:	0800c75f 	.word	0x0800c75f
 800c6bc:	0800c75f 	.word	0x0800c75f
 800c6c0:	0800c75f 	.word	0x0800c75f
 800c6c4:	0800c75f 	.word	0x0800c75f
 800c6c8:	0800c75f 	.word	0x0800c75f
 800c6cc:	0800c75f 	.word	0x0800c75f
 800c6d0:	0800c75f 	.word	0x0800c75f
 800c6d4:	0800c75f 	.word	0x0800c75f
 800c6d8:	0800c75f 	.word	0x0800c75f
 800c6dc:	0800c75f 	.word	0x0800c75f
 800c6e0:	0800c75f 	.word	0x0800c75f
 800c6e4:	0800c75f 	.word	0x0800c75f
 800c6e8:	0800c75f 	.word	0x0800c75f
 800c6ec:	0800c75f 	.word	0x0800c75f
 800c6f0:	0800c751 	.word	0x0800c751
 800c6f4:	2b40      	cmp	r3, #64	; 0x40
 800c6f6:	d02e      	beq.n	800c756 <UART_SetConfig+0xab2>
 800c6f8:	e031      	b.n	800c75e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6fa:	f7fb fe49 	bl	8008390 <HAL_RCC_GetPCLK1Freq>
 800c6fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c700:	e033      	b.n	800c76a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c702:	f7fb fe5b 	bl	80083bc <HAL_RCC_GetPCLK2Freq>
 800c706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c708:	e02f      	b.n	800c76a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c70a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fd f9a0 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c718:	e027      	b.n	800c76a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c71a:	f107 0318 	add.w	r3, r7, #24
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fd faec 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c728:	e01f      	b.n	800c76a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c72a:	4b69      	ldr	r3, [pc, #420]	; (800c8d0 <UART_SetConfig+0xc2c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0320 	and.w	r3, r3, #32
 800c732:	2b00      	cmp	r3, #0
 800c734:	d009      	beq.n	800c74a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c736:	4b66      	ldr	r3, [pc, #408]	; (800c8d0 <UART_SetConfig+0xc2c>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	08db      	lsrs	r3, r3, #3
 800c73c:	f003 0303 	and.w	r3, r3, #3
 800c740:	4a64      	ldr	r2, [pc, #400]	; (800c8d4 <UART_SetConfig+0xc30>)
 800c742:	fa22 f303 	lsr.w	r3, r2, r3
 800c746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c748:	e00f      	b.n	800c76a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c74a:	4b62      	ldr	r3, [pc, #392]	; (800c8d4 <UART_SetConfig+0xc30>)
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74e:	e00c      	b.n	800c76a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c750:	4b61      	ldr	r3, [pc, #388]	; (800c8d8 <UART_SetConfig+0xc34>)
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c754:	e009      	b.n	800c76a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75c:	e005      	b.n	800c76a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c75e:	2300      	movs	r3, #0
 800c760:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 80ea 	beq.w	800c946 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c776:	4a55      	ldr	r2, [pc, #340]	; (800c8cc <UART_SetConfig+0xc28>)
 800c778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c77c:	461a      	mov	r2, r3
 800c77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c780:	fbb3 f3f2 	udiv	r3, r3, r2
 800c784:	005a      	lsls	r2, r3, #1
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	085b      	lsrs	r3, r3, #1
 800c78c:	441a      	add	r2, r3
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	fbb2 f3f3 	udiv	r3, r2, r3
 800c796:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	2b0f      	cmp	r3, #15
 800c79c:	d916      	bls.n	800c7cc <UART_SetConfig+0xb28>
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a4:	d212      	bcs.n	800c7cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f023 030f 	bic.w	r3, r3, #15
 800c7ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	085b      	lsrs	r3, r3, #1
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	f003 0307 	and.w	r3, r3, #7
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c7c8:	60da      	str	r2, [r3, #12]
 800c7ca:	e0bc      	b.n	800c946 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c7d2:	e0b8      	b.n	800c946 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7d8:	2b20      	cmp	r3, #32
 800c7da:	dc4b      	bgt.n	800c874 <UART_SetConfig+0xbd0>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f2c0 8087 	blt.w	800c8f0 <UART_SetConfig+0xc4c>
 800c7e2:	2b20      	cmp	r3, #32
 800c7e4:	f200 8084 	bhi.w	800c8f0 <UART_SetConfig+0xc4c>
 800c7e8:	a201      	add	r2, pc, #4	; (adr r2, 800c7f0 <UART_SetConfig+0xb4c>)
 800c7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ee:	bf00      	nop
 800c7f0:	0800c87b 	.word	0x0800c87b
 800c7f4:	0800c883 	.word	0x0800c883
 800c7f8:	0800c8f1 	.word	0x0800c8f1
 800c7fc:	0800c8f1 	.word	0x0800c8f1
 800c800:	0800c88b 	.word	0x0800c88b
 800c804:	0800c8f1 	.word	0x0800c8f1
 800c808:	0800c8f1 	.word	0x0800c8f1
 800c80c:	0800c8f1 	.word	0x0800c8f1
 800c810:	0800c89b 	.word	0x0800c89b
 800c814:	0800c8f1 	.word	0x0800c8f1
 800c818:	0800c8f1 	.word	0x0800c8f1
 800c81c:	0800c8f1 	.word	0x0800c8f1
 800c820:	0800c8f1 	.word	0x0800c8f1
 800c824:	0800c8f1 	.word	0x0800c8f1
 800c828:	0800c8f1 	.word	0x0800c8f1
 800c82c:	0800c8f1 	.word	0x0800c8f1
 800c830:	0800c8ab 	.word	0x0800c8ab
 800c834:	0800c8f1 	.word	0x0800c8f1
 800c838:	0800c8f1 	.word	0x0800c8f1
 800c83c:	0800c8f1 	.word	0x0800c8f1
 800c840:	0800c8f1 	.word	0x0800c8f1
 800c844:	0800c8f1 	.word	0x0800c8f1
 800c848:	0800c8f1 	.word	0x0800c8f1
 800c84c:	0800c8f1 	.word	0x0800c8f1
 800c850:	0800c8f1 	.word	0x0800c8f1
 800c854:	0800c8f1 	.word	0x0800c8f1
 800c858:	0800c8f1 	.word	0x0800c8f1
 800c85c:	0800c8f1 	.word	0x0800c8f1
 800c860:	0800c8f1 	.word	0x0800c8f1
 800c864:	0800c8f1 	.word	0x0800c8f1
 800c868:	0800c8f1 	.word	0x0800c8f1
 800c86c:	0800c8f1 	.word	0x0800c8f1
 800c870:	0800c8e3 	.word	0x0800c8e3
 800c874:	2b40      	cmp	r3, #64	; 0x40
 800c876:	d037      	beq.n	800c8e8 <UART_SetConfig+0xc44>
 800c878:	e03a      	b.n	800c8f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c87a:	f7fb fd89 	bl	8008390 <HAL_RCC_GetPCLK1Freq>
 800c87e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c880:	e03c      	b.n	800c8fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c882:	f7fb fd9b 	bl	80083bc <HAL_RCC_GetPCLK2Freq>
 800c886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c888:	e038      	b.n	800c8fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fd f8e0 	bl	8009a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c898:	e030      	b.n	800c8fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c89a:	f107 0318 	add.w	r3, r7, #24
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fd fa2c 	bl	8009cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a8:	e028      	b.n	800c8fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <UART_SetConfig+0xc2c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 0320 	and.w	r3, r3, #32
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d012      	beq.n	800c8dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8b6:	4b06      	ldr	r3, [pc, #24]	; (800c8d0 <UART_SetConfig+0xc2c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	08db      	lsrs	r3, r3, #3
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	4a04      	ldr	r2, [pc, #16]	; (800c8d4 <UART_SetConfig+0xc30>)
 800c8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8c8:	e018      	b.n	800c8fc <UART_SetConfig+0xc58>
 800c8ca:	bf00      	nop
 800c8cc:	0800cfdc 	.word	0x0800cfdc
 800c8d0:	58024400 	.word	0x58024400
 800c8d4:	03d09000 	.word	0x03d09000
 800c8d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c8dc:	4b24      	ldr	r3, [pc, #144]	; (800c970 <UART_SetConfig+0xccc>)
 800c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e0:	e00c      	b.n	800c8fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8e2:	4b24      	ldr	r3, [pc, #144]	; (800c974 <UART_SetConfig+0xcd0>)
 800c8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e6:	e009      	b.n	800c8fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ee:	e005      	b.n	800c8fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c8fa:	bf00      	nop
    }

    if (pclk != 0U)
 800c8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d021      	beq.n	800c946 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	4a1c      	ldr	r2, [pc, #112]	; (800c978 <UART_SetConfig+0xcd4>)
 800c908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c90c:	461a      	mov	r2, r3
 800c90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c910:	fbb3 f2f2 	udiv	r2, r3, r2
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	085b      	lsrs	r3, r3, #1
 800c91a:	441a      	add	r2, r3
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	fbb2 f3f3 	udiv	r3, r2, r3
 800c924:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c928:	2b0f      	cmp	r3, #15
 800c92a:	d909      	bls.n	800c940 <UART_SetConfig+0xc9c>
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c932:	d205      	bcs.n	800c940 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	b29a      	uxth	r2, r3
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	60da      	str	r2, [r3, #12]
 800c93e:	e002      	b.n	800c946 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2201      	movs	r2, #1
 800c94a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2201      	movs	r2, #1
 800c952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2200      	movs	r2, #0
 800c95a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	2200      	movs	r2, #0
 800c960:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c962:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c966:	4618      	mov	r0, r3
 800c968:	3748      	adds	r7, #72	; 0x48
 800c96a:	46bd      	mov	sp, r7
 800c96c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c970:	03d09000 	.word	0x03d09000
 800c974:	003d0900 	.word	0x003d0900
 800c978:	0800cfdc 	.word	0x0800cfdc

0800c97c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00a      	beq.n	800c9a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9aa:	f003 0302 	and.w	r3, r3, #2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00a      	beq.n	800c9c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9cc:	f003 0304 	and.w	r3, r3, #4
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00a      	beq.n	800c9ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	430a      	orrs	r2, r1
 800c9e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ee:	f003 0308 	and.w	r3, r3, #8
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00a      	beq.n	800ca0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	430a      	orrs	r2, r1
 800ca0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca10:	f003 0310 	and.w	r3, r3, #16
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00a      	beq.n	800ca2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca32:	f003 0320 	and.w	r3, r3, #32
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00a      	beq.n	800ca50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d01a      	beq.n	800ca92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	430a      	orrs	r2, r1
 800ca70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca7a:	d10a      	bne.n	800ca92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	430a      	orrs	r2, r1
 800ca90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00a      	beq.n	800cab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	430a      	orrs	r2, r1
 800cab2:	605a      	str	r2, [r3, #4]
  }
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af02      	add	r7, sp, #8
 800cac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cad0:	f7f6 fbfc 	bl	80032cc <HAL_GetTick>
 800cad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f003 0308 	and.w	r3, r3, #8
 800cae0:	2b08      	cmp	r3, #8
 800cae2:	d10e      	bne.n	800cb02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f82f 	bl	800cb56 <UART_WaitOnFlagUntilTimeout>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e025      	b.n	800cb4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 0304 	and.w	r3, r3, #4
 800cb0c:	2b04      	cmp	r3, #4
 800cb0e:	d10e      	bne.n	800cb2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f819 	bl	800cb56 <UART_WaitOnFlagUntilTimeout>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb2a:	2303      	movs	r3, #3
 800cb2c:	e00f      	b.n	800cb4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2220      	movs	r2, #32
 800cb3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b09c      	sub	sp, #112	; 0x70
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	603b      	str	r3, [r7, #0]
 800cb62:	4613      	mov	r3, r2
 800cb64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb66:	e0a9      	b.n	800ccbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6e:	f000 80a5 	beq.w	800ccbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb72:	f7f6 fbab 	bl	80032cc <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d302      	bcc.n	800cb88 <UART_WaitOnFlagUntilTimeout+0x32>
 800cb82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d140      	bne.n	800cc0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb90:	e853 3f00 	ldrex	r3, [r3]
 800cb94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb9c:	667b      	str	r3, [r7, #100]	; 0x64
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	461a      	mov	r2, r3
 800cba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cba8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbae:	e841 2300 	strex	r3, r2, [r1]
 800cbb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1e6      	bne.n	800cb88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	3308      	adds	r3, #8
 800cbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc4:	e853 3f00 	ldrex	r3, [r3]
 800cbc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	f023 0301 	bic.w	r3, r3, #1
 800cbd0:	663b      	str	r3, [r7, #96]	; 0x60
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	3308      	adds	r3, #8
 800cbd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbda:	64ba      	str	r2, [r7, #72]	; 0x48
 800cbdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbe2:	e841 2300 	strex	r3, r2, [r1]
 800cbe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cbe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1e5      	bne.n	800cbba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2220      	movs	r2, #32
 800cbf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2220      	movs	r2, #32
 800cbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cc06:	2303      	movs	r3, #3
 800cc08:	e069      	b.n	800ccde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 0304 	and.w	r3, r3, #4
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d051      	beq.n	800ccbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc26:	d149      	bne.n	800ccbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	e853 3f00 	ldrex	r3, [r3]
 800cc3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc50:	637b      	str	r3, [r7, #52]	; 0x34
 800cc52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e6      	bne.n	800cc32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3308      	adds	r3, #8
 800cc6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	e853 3f00 	ldrex	r3, [r3]
 800cc72:	613b      	str	r3, [r7, #16]
   return(result);
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	f023 0301 	bic.w	r3, r3, #1
 800cc7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3308      	adds	r3, #8
 800cc82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc84:	623a      	str	r2, [r7, #32]
 800cc86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc88:	69f9      	ldr	r1, [r7, #28]
 800cc8a:	6a3a      	ldr	r2, [r7, #32]
 800cc8c:	e841 2300 	strex	r3, r2, [r1]
 800cc90:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1e5      	bne.n	800cc64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2220      	movs	r2, #32
 800cc9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e010      	b.n	800ccde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	69da      	ldr	r2, [r3, #28]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	bf0c      	ite	eq
 800cccc:	2301      	moveq	r3, #1
 800ccce:	2300      	movne	r3, #0
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	f43f af46 	beq.w	800cb68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3770      	adds	r7, #112	; 0x70
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b085      	sub	sp, #20
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d101      	bne.n	800ccfc <HAL_UARTEx_DisableFifoMode+0x16>
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	e027      	b.n	800cd4c <HAL_UARTEx_DisableFifoMode+0x66>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2224      	movs	r2, #36	; 0x24
 800cd08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f022 0201 	bic.w	r2, r2, #1
 800cd22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d101      	bne.n	800cd70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e02d      	b.n	800cdcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2224      	movs	r2, #36	; 0x24
 800cd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f022 0201 	bic.w	r2, r2, #1
 800cd96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f84f 	bl	800ce50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d101      	bne.n	800cdec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cde8:	2302      	movs	r3, #2
 800cdea:	e02d      	b.n	800ce48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2224      	movs	r2, #36	; 0x24
 800cdf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f022 0201 	bic.w	r2, r2, #1
 800ce12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	683a      	ldr	r2, [r7, #0]
 800ce24:	430a      	orrs	r2, r1
 800ce26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 f811 	bl	800ce50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2220      	movs	r2, #32
 800ce3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d108      	bne.n	800ce72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce70:	e031      	b.n	800ced6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce72:	2310      	movs	r3, #16
 800ce74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce76:	2310      	movs	r3, #16
 800ce78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	0e5b      	lsrs	r3, r3, #25
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f003 0307 	and.w	r3, r3, #7
 800ce88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	0f5b      	lsrs	r3, r3, #29
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce9a:	7bbb      	ldrb	r3, [r7, #14]
 800ce9c:	7b3a      	ldrb	r2, [r7, #12]
 800ce9e:	4911      	ldr	r1, [pc, #68]	; (800cee4 <UARTEx_SetNbDataToProcess+0x94>)
 800cea0:	5c8a      	ldrb	r2, [r1, r2]
 800cea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cea6:	7b3a      	ldrb	r2, [r7, #12]
 800cea8:	490f      	ldr	r1, [pc, #60]	; (800cee8 <UARTEx_SetNbDataToProcess+0x98>)
 800ceaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ceac:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	7b7a      	ldrb	r2, [r7, #13]
 800cebc:	4909      	ldr	r1, [pc, #36]	; (800cee4 <UARTEx_SetNbDataToProcess+0x94>)
 800cebe:	5c8a      	ldrb	r2, [r1, r2]
 800cec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cec4:	7b7a      	ldrb	r2, [r7, #13]
 800cec6:	4908      	ldr	r1, [pc, #32]	; (800cee8 <UARTEx_SetNbDataToProcess+0x98>)
 800cec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ceca:	fb93 f3f2 	sdiv	r3, r3, r2
 800cece:	b29a      	uxth	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ced6:	bf00      	nop
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	0800cff4 	.word	0x0800cff4
 800cee8:	0800cffc 	.word	0x0800cffc

0800ceec <__libc_init_array>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	4d0d      	ldr	r5, [pc, #52]	; (800cf24 <__libc_init_array+0x38>)
 800cef0:	4c0d      	ldr	r4, [pc, #52]	; (800cf28 <__libc_init_array+0x3c>)
 800cef2:	1b64      	subs	r4, r4, r5
 800cef4:	10a4      	asrs	r4, r4, #2
 800cef6:	2600      	movs	r6, #0
 800cef8:	42a6      	cmp	r6, r4
 800cefa:	d109      	bne.n	800cf10 <__libc_init_array+0x24>
 800cefc:	4d0b      	ldr	r5, [pc, #44]	; (800cf2c <__libc_init_array+0x40>)
 800cefe:	4c0c      	ldr	r4, [pc, #48]	; (800cf30 <__libc_init_array+0x44>)
 800cf00:	f000 f82e 	bl	800cf60 <_init>
 800cf04:	1b64      	subs	r4, r4, r5
 800cf06:	10a4      	asrs	r4, r4, #2
 800cf08:	2600      	movs	r6, #0
 800cf0a:	42a6      	cmp	r6, r4
 800cf0c:	d105      	bne.n	800cf1a <__libc_init_array+0x2e>
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}
 800cf10:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf14:	4798      	blx	r3
 800cf16:	3601      	adds	r6, #1
 800cf18:	e7ee      	b.n	800cef8 <__libc_init_array+0xc>
 800cf1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf1e:	4798      	blx	r3
 800cf20:	3601      	adds	r6, #1
 800cf22:	e7f2      	b.n	800cf0a <__libc_init_array+0x1e>
 800cf24:	0800d00c 	.word	0x0800d00c
 800cf28:	0800d00c 	.word	0x0800d00c
 800cf2c:	0800d00c 	.word	0x0800d00c
 800cf30:	0800d010 	.word	0x0800d010

0800cf34 <memcpy>:
 800cf34:	440a      	add	r2, r1
 800cf36:	4291      	cmp	r1, r2
 800cf38:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf3c:	d100      	bne.n	800cf40 <memcpy+0xc>
 800cf3e:	4770      	bx	lr
 800cf40:	b510      	push	{r4, lr}
 800cf42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf4a:	4291      	cmp	r1, r2
 800cf4c:	d1f9      	bne.n	800cf42 <memcpy+0xe>
 800cf4e:	bd10      	pop	{r4, pc}

0800cf50 <memset>:
 800cf50:	4402      	add	r2, r0
 800cf52:	4603      	mov	r3, r0
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d100      	bne.n	800cf5a <memset+0xa>
 800cf58:	4770      	bx	lr
 800cf5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf5e:	e7f9      	b.n	800cf54 <memset+0x4>

0800cf60 <_init>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	bf00      	nop
 800cf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf66:	bc08      	pop	{r3}
 800cf68:	469e      	mov	lr, r3
 800cf6a:	4770      	bx	lr

0800cf6c <_fini>:
 800cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6e:	bf00      	nop
 800cf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf72:	bc08      	pop	{r3}
 800cf74:	469e      	mov	lr, r3
 800cf76:	4770      	bx	lr
