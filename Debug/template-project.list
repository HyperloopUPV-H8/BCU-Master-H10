
template-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a0c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000360  24000010  08003d00  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000370  08003d00  00020370  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000171bf  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002440  00000000  00000000  000371fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000fc0  00000000  00000000  00039640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ed8  00000000  00000000  0003a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c1a6  00000000  00000000  0003b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001595b  00000000  00000000  0007767e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00183885  00000000  00000000  0008cfd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0021085e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004258  00000000  00000000  002108b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003cc0 	.word	0x08003cc0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08003cc0 	.word	0x08003cc0

0800030c <main>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim24;

int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000310:	f000 fa1e 	bl	8000750 <HAL_Init>
  SystemClock_Config();
 8000314:	f000 f804 	bl	8000320 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 8000318:	f000 f88c 	bl	8000434 <_Z24PeriphCommonClock_Configv>

  while (1) {}
 800031c:	e7fe      	b.n	800031c <main+0x10>
	...

08000320 <_Z18SystemClock_Configv>:
}

void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b09c      	sub	sp, #112	; 0x70
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032a:	224c      	movs	r2, #76	; 0x4c
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f003 fcbe 	bl	8003cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2220      	movs	r2, #32
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fcb8 	bl	8003cb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000340:	2002      	movs	r0, #2
 8000342:	f001 fbab 	bl	8001a9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	4b38      	ldr	r3, [pc, #224]	; (800042c <_Z18SystemClock_Configv+0x10c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a37      	ldr	r2, [pc, #220]	; (800042c <_Z18SystemClock_Configv+0x10c>)
 8000350:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b35      	ldr	r3, [pc, #212]	; (800042c <_Z18SystemClock_Configv+0x10c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000362:	4b32      	ldr	r3, [pc, #200]	; (800042c <_Z18SystemClock_Configv+0x10c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800036a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800036e:	bf14      	ite	ne
 8000370:	2301      	movne	r3, #1
 8000372:	2300      	moveq	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	d000      	beq.n	800037c <_Z18SystemClock_Configv+0x5c>
 800037a:	e7f2      	b.n	8000362 <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800037c:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <_Z18SystemClock_Configv+0x110>)
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0303 	bic.w	r3, r3, #3
 8000384:	4a2a      	ldr	r2, [pc, #168]	; (8000430 <_Z18SystemClock_Configv+0x110>)
 8000386:	f043 0302 	orr.w	r3, r3, #2
 800038a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800038c:	2309      	movs	r3, #9
 800038e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039e:	2302      	movs	r3, #2
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003a2:	2304      	movs	r3, #4
 80003a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80003a6:	f240 1313 	movw	r3, #275	; 0x113
 80003aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003b0:	2304      	movs	r3, #4
 80003b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80003b8:	2304      	movs	r3, #4
 80003ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003bc:	2300      	movs	r3, #0
 80003be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fba1 	bl	8001b10 <HAL_RCC_OscConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	bf14      	ite	ne
 80003d4:	2301      	movne	r3, #1
 80003d6:	2300      	moveq	r3, #0
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80003de:	f000 f85a 	bl	8000496 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	233f      	movs	r3, #63	; 0x3f
 80003e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2303      	movs	r3, #3
 80003e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003ee:	2308      	movs	r3, #8
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003f2:	2340      	movs	r3, #64	; 0x40
 80003f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003f6:	2340      	movs	r3, #64	; 0x40
 80003f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000400:	2340      	movs	r3, #64	; 0x40
 8000402:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2103      	movs	r1, #3
 8000408:	4618      	mov	r0, r3
 800040a:	f001 ff2f 	bl	800226c <HAL_RCC_ClockConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	bf14      	ite	ne
 8000414:	2301      	movne	r3, #1
 8000416:	2300      	moveq	r3, #0
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 800041e:	f000 f83a 	bl	8000496 <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3770      	adds	r7, #112	; 0x70
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	58024800 	.word	0x58024800
 8000430:	58024400 	.word	0x58024400

08000434 <_Z24PeriphCommonClock_Configv>:

void PeriphCommonClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b0ae      	sub	sp, #184	; 0xb8
 8000438:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	22b4      	movs	r2, #180	; 0xb4
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f003 fc35 	bl	8003cb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000446:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800044a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800044c:	2301      	movs	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000450:	2318      	movs	r3, #24
 8000452:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000454:	2302      	movs	r3, #2
 8000456:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000458:	2302      	movs	r3, #2
 800045a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800045c:	2302      	movs	r3, #2
 800045e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000460:	23c0      	movs	r3, #192	; 0xc0
 8000462:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f002 fa29 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	bf14      	ite	ne
 8000480:	2301      	movne	r3, #1
 8000482:	2300      	moveq	r3, #0
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 800048a:	f000 f804 	bl	8000496 <Error_Handler>
  }
}
 800048e:	bf00      	nop
 8000490:	37b8      	adds	r7, #184	; 0xb8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <Error_Handler>:


void Error_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049a:	b672      	cpsid	i
}
 800049c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049e:	e7fe      	b.n	800049e <Error_Handler+0x8>

080004a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_MspInit+0x30>)
 80004a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <HAL_MspInit+0x30>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_MspInit+0x30>)
 80004b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004bc:	f003 0302 	and.w	r3, r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	58024400 	.word	0x58024400

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <NMI_Handler+0x4>

080004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <MemManage_Handler+0x4>

080004e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f988 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800052c:	2001      	movs	r0, #1
 800052e:	f001 f9af 	bl	8001890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}

08000536 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800053a:	2002      	movs	r0, #2
 800053c:	f001 f9a8 	bl	8001890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <DMA1_Stream0_IRQHandler+0x10>)
 800054a:	f000 fa77 	bl	8000a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2400002c 	.word	0x2400002c

08000558 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <DMA1_Stream1_IRQHandler+0x10>)
 800055e:	f000 fa6d 	bl	8000a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	240000a4 	.word	0x240000a4

0800056c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <DMA1_Stream2_IRQHandler+0x10>)
 8000572:	f000 fa63 	bl	8000a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2400011c 	.word	0x2400011c

08000580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <TIM2_IRQHandler+0x10>)
 8000586:	f003 f9ff 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2400023c 	.word	0x2400023c

08000594 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <TIM5_IRQHandler+0x10>)
 800059a:	f003 f9f5 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	24000288 	.word	0x24000288

080005a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <TIM6_DAC_IRQHandler+0x10>)
 80005ae:	f003 f9eb 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	240002d4 	.word	0x240002d4

080005bc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <LPTIM1_IRQHandler+0x10>)
 80005c2:	f001 f98a 	bl	80018da <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	24000194 	.word	0x24000194

080005d0 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <LPTIM2_IRQHandler+0x10>)
 80005d6:	f001 f980 	bl	80018da <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	240001cc 	.word	0x240001cc

080005e4 <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <LPTIM3_IRQHandler+0x10>)
 80005ea:	f001 f976 	bl	80018da <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	24000204 	.word	0x24000204

080005f8 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <TIM24_IRQHandler+0x10>)
 80005fe:	f003 f9c3 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000320 	.word	0x24000320

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b32      	ldr	r3, [pc, #200]	; (80006dc <SystemInit+0xd0>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000616:	4a31      	ldr	r2, [pc, #196]	; (80006dc <SystemInit+0xd0>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000620:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <SystemInit+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f003 030f 	and.w	r3, r3, #15
 8000628:	2b06      	cmp	r3, #6
 800062a:	d807      	bhi.n	800063c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <SystemInit+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f023 030f 	bic.w	r3, r3, #15
 8000634:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <SystemInit+0xd4>)
 8000636:	f043 0307 	orr.w	r3, r3, #7
 800063a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0xd8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <SystemInit+0xd8>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0xd8>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0xd8>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4924      	ldr	r1, [pc, #144]	; (80006e4 <SystemInit+0xd8>)
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <SystemInit+0xdc>)
 8000656:	4013      	ands	r3, r2
 8000658:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0xd4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0xd4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f023 030f 	bic.w	r3, r3, #15
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <SystemInit+0xd4>)
 8000670:	f043 0307 	orr.w	r3, r3, #7
 8000674:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <SystemInit+0xd8>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0xd8>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <SystemInit+0xd8>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0xd8>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <SystemInit+0xe0>)
 800068c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <SystemInit+0xd8>)
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <SystemInit+0xe4>)
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <SystemInit+0xd8>)
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <SystemInit+0xe8>)
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <SystemInit+0xd8>)
 800069c:	2200      	movs	r2, #0
 800069e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <SystemInit+0xd8>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <SystemInit+0xe8>)
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <SystemInit+0xd8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <SystemInit+0xd8>)
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <SystemInit+0xe8>)
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <SystemInit+0xd8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <SystemInit+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <SystemInit+0xd8>)
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <SystemInit+0xd8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SystemInit+0xec>)
 80006cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	52004000 	.word	0x52004000

080006fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000700:	f7ff ff84 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	; (800073c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072a:	f003 fa9d 	bl	8003c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072e:	f7ff fded 	bl	800030c <main>
  bx  lr
 8000732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000734:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000738:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800073c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000740:	08003cf0 	.word	0x08003cf0
  ldr r2, =_sbss
 8000744:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000748:	24000370 	.word	0x24000370

0800074c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC3_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000756:	2003      	movs	r0, #3
 8000758:	f000 f93e 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800075c:	f001 ff3c 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8000760:	4602      	mov	r2, r0
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_Init+0x68>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	f003 030f 	and.w	r3, r3, #15
 800076c:	4913      	ldr	r1, [pc, #76]	; (80007bc <HAL_Init+0x6c>)
 800076e:	5ccb      	ldrb	r3, [r1, r3]
 8000770:	f003 031f 	and.w	r3, r3, #31
 8000774:	fa22 f303 	lsr.w	r3, r2, r3
 8000778:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_Init+0x68>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_Init+0x6c>)
 8000784:	5cd3      	ldrb	r3, [r2, r3]
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	fa22 f303 	lsr.w	r3, r2, r3
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_Init+0x70>)
 8000792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <HAL_Init+0x74>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f814 	bl	80007c8 <HAL_InitTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e002      	b.n	80007b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007aa:	f7ff fe79 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58024400 	.word	0x58024400
 80007bc:	08003cd8 	.word	0x08003cd8
 80007c0:	24000004 	.word	0x24000004
 80007c4:	24000000 	.word	0x24000000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_InitTick+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e021      	b.n	8000820 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_InitTick+0x64>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_InitTick+0x60>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f915 	bl	8000a22 <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 f8ed 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_InitTick+0x68>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2400000c 	.word	0x2400000c
 800082c:	24000000 	.word	0x24000000
 8000830:	24000008 	.word	0x24000008

08000834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2400000c 	.word	0x2400000c
 8000858:	2400036c 	.word	0x2400036c

0800085c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	2400036c 	.word	0x2400036c

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <__NVIC_SetPriorityGrouping+0x40>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	4313      	orrs	r3, r2
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x40>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	05fa0000 	.word	0x05fa0000

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b8:	f7ff ff8e 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff47 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff5e 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff90 	bl	800092c <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5f 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffb2 	bl	8000994 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a48:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <HAL_DMA_IRQHandler+0x1ac>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a67      	ldr	r2, [pc, #412]	; (8000bec <HAL_DMA_IRQHandler+0x1b0>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	0a9b      	lsrs	r3, r3, #10
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a60:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a5f      	ldr	r2, [pc, #380]	; (8000bf0 <HAL_DMA_IRQHandler+0x1b4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d04a      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a5d      	ldr	r2, [pc, #372]	; (8000bf4 <HAL_DMA_IRQHandler+0x1b8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d045      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a5c      	ldr	r2, [pc, #368]	; (8000bf8 <HAL_DMA_IRQHandler+0x1bc>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d040      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a5a      	ldr	r2, [pc, #360]	; (8000bfc <HAL_DMA_IRQHandler+0x1c0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d03b      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a59      	ldr	r2, [pc, #356]	; (8000c00 <HAL_DMA_IRQHandler+0x1c4>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d036      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <HAL_DMA_IRQHandler+0x1c8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d031      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a56      	ldr	r2, [pc, #344]	; (8000c08 <HAL_DMA_IRQHandler+0x1cc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d02c      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a54      	ldr	r2, [pc, #336]	; (8000c0c <HAL_DMA_IRQHandler+0x1d0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d027      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a53      	ldr	r2, [pc, #332]	; (8000c10 <HAL_DMA_IRQHandler+0x1d4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d022      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a51      	ldr	r2, [pc, #324]	; (8000c14 <HAL_DMA_IRQHandler+0x1d8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d01d      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a50      	ldr	r2, [pc, #320]	; (8000c18 <HAL_DMA_IRQHandler+0x1dc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d018      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a4e      	ldr	r2, [pc, #312]	; (8000c1c <HAL_DMA_IRQHandler+0x1e0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a4d      	ldr	r2, [pc, #308]	; (8000c20 <HAL_DMA_IRQHandler+0x1e4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d00e      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a4b      	ldr	r2, [pc, #300]	; (8000c24 <HAL_DMA_IRQHandler+0x1e8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d009      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a4a      	ldr	r2, [pc, #296]	; (8000c28 <HAL_DMA_IRQHandler+0x1ec>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d004      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xd2>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a48      	ldr	r2, [pc, #288]	; (8000c2c <HAL_DMA_IRQHandler+0x1f0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_DMA_IRQHandler+0xd6>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_DMA_IRQHandler+0xd8>
 8000b12:	2300      	movs	r3, #0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 842b 	beq.w	8001370 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1e:	f003 031f 	and.w	r3, r3, #31
 8000b22:	2208      	movs	r2, #8
 8000b24:	409a      	lsls	r2, r3
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 80a2 	beq.w	8000c74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <HAL_DMA_IRQHandler+0x1b4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d04a      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <HAL_DMA_IRQHandler+0x1b8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d045      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <HAL_DMA_IRQHandler+0x1bc>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d040      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a2a      	ldr	r2, [pc, #168]	; (8000bfc <HAL_DMA_IRQHandler+0x1c0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d03b      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a28      	ldr	r2, [pc, #160]	; (8000c00 <HAL_DMA_IRQHandler+0x1c4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d036      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <HAL_DMA_IRQHandler+0x1c8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d031      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <HAL_DMA_IRQHandler+0x1cc>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d02c      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a24      	ldr	r2, [pc, #144]	; (8000c0c <HAL_DMA_IRQHandler+0x1d0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d027      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_DMA_IRQHandler+0x1d4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d022      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <HAL_DMA_IRQHandler+0x1d8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d01d      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_DMA_IRQHandler+0x1dc>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d018      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <HAL_DMA_IRQHandler+0x1e0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d013      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_DMA_IRQHandler+0x1e4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d00e      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_DMA_IRQHandler+0x1e8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d009      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_DMA_IRQHandler+0x1ec>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d004      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x194>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_DMA_IRQHandler+0x1f0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d12f      	bne.n	8000c30 <HAL_DMA_IRQHandler+0x1f4>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf14      	ite	ne
 8000bde:	2301      	movne	r3, #1
 8000be0:	2300      	moveq	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	e02e      	b.n	8000c44 <HAL_DMA_IRQHandler+0x208>
 8000be6:	bf00      	nop
 8000be8:	24000000 	.word	0x24000000
 8000bec:	1b4e81b5 	.word	0x1b4e81b5
 8000bf0:	40020010 	.word	0x40020010
 8000bf4:	40020028 	.word	0x40020028
 8000bf8:	40020040 	.word	0x40020040
 8000bfc:	40020058 	.word	0x40020058
 8000c00:	40020070 	.word	0x40020070
 8000c04:	40020088 	.word	0x40020088
 8000c08:	400200a0 	.word	0x400200a0
 8000c0c:	400200b8 	.word	0x400200b8
 8000c10:	40020410 	.word	0x40020410
 8000c14:	40020428 	.word	0x40020428
 8000c18:	40020440 	.word	0x40020440
 8000c1c:	40020458 	.word	0x40020458
 8000c20:	40020470 	.word	0x40020470
 8000c24:	40020488 	.word	0x40020488
 8000c28:	400204a0 	.word	0x400204a0
 8000c2c:	400204b8 	.word	0x400204b8
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf14      	ite	ne
 8000c3e:	2301      	movne	r3, #1
 8000c40:	2300      	moveq	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d015      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0204 	bic.w	r2, r2, #4
 8000c56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5c:	f003 031f 	and.w	r3, r3, #31
 8000c60:	2208      	movs	r2, #8
 8000c62:	409a      	lsls	r2, r3
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c78:	f003 031f 	and.w	r3, r3, #31
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d06e      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a69      	ldr	r2, [pc, #420]	; (8000e34 <HAL_DMA_IRQHandler+0x3f8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d04a      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a67      	ldr	r2, [pc, #412]	; (8000e38 <HAL_DMA_IRQHandler+0x3fc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d045      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a66      	ldr	r2, [pc, #408]	; (8000e3c <HAL_DMA_IRQHandler+0x400>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d040      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a64      	ldr	r2, [pc, #400]	; (8000e40 <HAL_DMA_IRQHandler+0x404>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d03b      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a63      	ldr	r2, [pc, #396]	; (8000e44 <HAL_DMA_IRQHandler+0x408>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d036      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a61      	ldr	r2, [pc, #388]	; (8000e48 <HAL_DMA_IRQHandler+0x40c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d031      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a60      	ldr	r2, [pc, #384]	; (8000e4c <HAL_DMA_IRQHandler+0x410>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d02c      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a5e      	ldr	r2, [pc, #376]	; (8000e50 <HAL_DMA_IRQHandler+0x414>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d027      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a5d      	ldr	r2, [pc, #372]	; (8000e54 <HAL_DMA_IRQHandler+0x418>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d022      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a5b      	ldr	r2, [pc, #364]	; (8000e58 <HAL_DMA_IRQHandler+0x41c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01d      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a5a      	ldr	r2, [pc, #360]	; (8000e5c <HAL_DMA_IRQHandler+0x420>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d018      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a58      	ldr	r2, [pc, #352]	; (8000e60 <HAL_DMA_IRQHandler+0x424>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d013      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a57      	ldr	r2, [pc, #348]	; (8000e64 <HAL_DMA_IRQHandler+0x428>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d00e      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a55      	ldr	r2, [pc, #340]	; (8000e68 <HAL_DMA_IRQHandler+0x42c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d009      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a54      	ldr	r2, [pc, #336]	; (8000e6c <HAL_DMA_IRQHandler+0x430>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d004      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x2ee>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a52      	ldr	r2, [pc, #328]	; (8000e70 <HAL_DMA_IRQHandler+0x434>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d10a      	bne.n	8000d40 <HAL_DMA_IRQHandler+0x304>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	e003      	b.n	8000d48 <HAL_DMA_IRQHandler+0x30c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2300      	movs	r3, #0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00d      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d50:	f003 031f 	and.w	r3, r3, #31
 8000d54:	2201      	movs	r2, #1
 8000d56:	409a      	lsls	r2, r3
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d60:	f043 0202 	orr.w	r2, r3, #2
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	2204      	movs	r2, #4
 8000d72:	409a      	lsls	r2, r3
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 808f 	beq.w	8000e9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a2c      	ldr	r2, [pc, #176]	; (8000e34 <HAL_DMA_IRQHandler+0x3f8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d04a      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <HAL_DMA_IRQHandler+0x3fc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d045      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <HAL_DMA_IRQHandler+0x400>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d040      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a27      	ldr	r2, [pc, #156]	; (8000e40 <HAL_DMA_IRQHandler+0x404>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d03b      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <HAL_DMA_IRQHandler+0x408>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d036      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <HAL_DMA_IRQHandler+0x40c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d031      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <HAL_DMA_IRQHandler+0x410>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d02c      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a21      	ldr	r2, [pc, #132]	; (8000e50 <HAL_DMA_IRQHandler+0x414>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d027      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <HAL_DMA_IRQHandler+0x418>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d022      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <HAL_DMA_IRQHandler+0x41c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d01d      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_DMA_IRQHandler+0x420>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d018      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_DMA_IRQHandler+0x424>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <HAL_DMA_IRQHandler+0x428>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00e      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_DMA_IRQHandler+0x42c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d009      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_DMA_IRQHandler+0x430>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d004      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x3e2>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <HAL_DMA_IRQHandler+0x434>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12a      	bne.n	8000e74 <HAL_DMA_IRQHandler+0x438>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	e023      	b.n	8000e7c <HAL_DMA_IRQHandler+0x440>
 8000e34:	40020010 	.word	0x40020010
 8000e38:	40020028 	.word	0x40020028
 8000e3c:	40020040 	.word	0x40020040
 8000e40:	40020058 	.word	0x40020058
 8000e44:	40020070 	.word	0x40020070
 8000e48:	40020088 	.word	0x40020088
 8000e4c:	400200a0 	.word	0x400200a0
 8000e50:	400200b8 	.word	0x400200b8
 8000e54:	40020410 	.word	0x40020410
 8000e58:	40020428 	.word	0x40020428
 8000e5c:	40020440 	.word	0x40020440
 8000e60:	40020458 	.word	0x40020458
 8000e64:	40020470 	.word	0x40020470
 8000e68:	40020488 	.word	0x40020488
 8000e6c:	400204a0 	.word	0x400204a0
 8000e70:	400204b8 	.word	0x400204b8
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00d      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	2204      	movs	r2, #4
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e94:	f043 0204 	orr.w	r2, r3, #4
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea0:	f003 031f 	and.w	r3, r3, #31
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a6 	beq.w	8000ffe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a85      	ldr	r2, [pc, #532]	; (80010cc <HAL_DMA_IRQHandler+0x690>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d04a      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a83      	ldr	r2, [pc, #524]	; (80010d0 <HAL_DMA_IRQHandler+0x694>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d045      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a82      	ldr	r2, [pc, #520]	; (80010d4 <HAL_DMA_IRQHandler+0x698>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d040      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a80      	ldr	r2, [pc, #512]	; (80010d8 <HAL_DMA_IRQHandler+0x69c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d03b      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a7f      	ldr	r2, [pc, #508]	; (80010dc <HAL_DMA_IRQHandler+0x6a0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d036      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a7d      	ldr	r2, [pc, #500]	; (80010e0 <HAL_DMA_IRQHandler+0x6a4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d031      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7c      	ldr	r2, [pc, #496]	; (80010e4 <HAL_DMA_IRQHandler+0x6a8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d02c      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a7a      	ldr	r2, [pc, #488]	; (80010e8 <HAL_DMA_IRQHandler+0x6ac>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d027      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a79      	ldr	r2, [pc, #484]	; (80010ec <HAL_DMA_IRQHandler+0x6b0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d022      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a77      	ldr	r2, [pc, #476]	; (80010f0 <HAL_DMA_IRQHandler+0x6b4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01d      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a76      	ldr	r2, [pc, #472]	; (80010f4 <HAL_DMA_IRQHandler+0x6b8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d018      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a74      	ldr	r2, [pc, #464]	; (80010f8 <HAL_DMA_IRQHandler+0x6bc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a73      	ldr	r2, [pc, #460]	; (80010fc <HAL_DMA_IRQHandler+0x6c0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00e      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a71      	ldr	r2, [pc, #452]	; (8001100 <HAL_DMA_IRQHandler+0x6c4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d009      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a70      	ldr	r2, [pc, #448]	; (8001104 <HAL_DMA_IRQHandler+0x6c8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d004      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x516>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6e      	ldr	r2, [pc, #440]	; (8001108 <HAL_DMA_IRQHandler+0x6cc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10a      	bne.n	8000f68 <HAL_DMA_IRQHandler+0x52c>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf14      	ite	ne
 8000f60:	2301      	movne	r3, #1
 8000f62:	2300      	moveq	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	e009      	b.n	8000f7c <HAL_DMA_IRQHandler+0x540>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d03e      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	2210      	movs	r2, #16
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d018      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d108      	bne.n	8000fbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d024      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	4798      	blx	r3
 8000fbc:	e01f      	b.n	8000ffe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d01b      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	4798      	blx	r3
 8000fce:	e016      	b.n	8000ffe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d107      	bne.n	8000fee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0208 	bic.w	r2, r2, #8
 8000fec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	2220      	movs	r2, #32
 8001008:	409a      	lsls	r2, r3
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8110 	beq.w	8001234 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <HAL_DMA_IRQHandler+0x690>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d04a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a2b      	ldr	r2, [pc, #172]	; (80010d0 <HAL_DMA_IRQHandler+0x694>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d045      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <HAL_DMA_IRQHandler+0x698>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d040      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_DMA_IRQHandler+0x69c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d03b      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_DMA_IRQHandler+0x6a0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d036      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <HAL_DMA_IRQHandler+0x6a4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d031      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <HAL_DMA_IRQHandler+0x6a8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d02c      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <HAL_DMA_IRQHandler+0x6ac>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d027      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <HAL_DMA_IRQHandler+0x6b0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d022      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_DMA_IRQHandler+0x6b4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d01d      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_DMA_IRQHandler+0x6b8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d018      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_DMA_IRQHandler+0x6bc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d013      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <HAL_DMA_IRQHandler+0x6c0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00e      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_DMA_IRQHandler+0x6c4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d009      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_DMA_IRQHandler+0x6c8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d004      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x678>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <HAL_DMA_IRQHandler+0x6cc>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d12b      	bne.n	800110c <HAL_DMA_IRQHandler+0x6d0>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	e02a      	b.n	8001120 <HAL_DMA_IRQHandler+0x6e4>
 80010ca:	bf00      	nop
 80010cc:	40020010 	.word	0x40020010
 80010d0:	40020028 	.word	0x40020028
 80010d4:	40020040 	.word	0x40020040
 80010d8:	40020058 	.word	0x40020058
 80010dc:	40020070 	.word	0x40020070
 80010e0:	40020088 	.word	0x40020088
 80010e4:	400200a0 	.word	0x400200a0
 80010e8:	400200b8 	.word	0x400200b8
 80010ec:	40020410 	.word	0x40020410
 80010f0:	40020428 	.word	0x40020428
 80010f4:	40020440 	.word	0x40020440
 80010f8:	40020458 	.word	0x40020458
 80010fc:	40020470 	.word	0x40020470
 8001100:	40020488 	.word	0x40020488
 8001104:	400204a0 	.word	0x400204a0
 8001108:	400204b8 	.word	0x400204b8
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf14      	ite	ne
 800111a:	2301      	movne	r3, #1
 800111c:	2300      	moveq	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 8087 	beq.w	8001234 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	2220      	movs	r2, #32
 8001130:	409a      	lsls	r2, r3
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b04      	cmp	r3, #4
 8001140:	d139      	bne.n	80011b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0216 	bic.w	r2, r2, #22
 8001150:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695a      	ldr	r2, [r3, #20]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001160:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <HAL_DMA_IRQHandler+0x736>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0208 	bic.w	r2, r2, #8
 8001180:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	223f      	movs	r2, #63	; 0x3f
 800118c:	409a      	lsls	r2, r3
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 834a 	beq.w	8001840 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
          }
          return;
 80011b4:	e344      	b.n	8001840 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d018      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d108      	bne.n	80011e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d02c      	beq.n	8001234 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4798      	blx	r3
 80011e2:	e027      	b.n	8001234 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d023      	beq.n	8001234 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	4798      	blx	r3
 80011f4:	e01e      	b.n	8001234 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10f      	bne.n	8001224 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0210 	bic.w	r2, r2, #16
 8001212:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8306 	beq.w	800184a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8088 	beq.w	800135c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a7a      	ldr	r2, [pc, #488]	; (8001444 <HAL_DMA_IRQHandler+0xa08>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d04a      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a79      	ldr	r2, [pc, #484]	; (8001448 <HAL_DMA_IRQHandler+0xa0c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d045      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a77      	ldr	r2, [pc, #476]	; (800144c <HAL_DMA_IRQHandler+0xa10>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d040      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a76      	ldr	r2, [pc, #472]	; (8001450 <HAL_DMA_IRQHandler+0xa14>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d03b      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a74      	ldr	r2, [pc, #464]	; (8001454 <HAL_DMA_IRQHandler+0xa18>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d036      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a73      	ldr	r2, [pc, #460]	; (8001458 <HAL_DMA_IRQHandler+0xa1c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d031      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a71      	ldr	r2, [pc, #452]	; (800145c <HAL_DMA_IRQHandler+0xa20>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02c      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a70      	ldr	r2, [pc, #448]	; (8001460 <HAL_DMA_IRQHandler+0xa24>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d027      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6e      	ldr	r2, [pc, #440]	; (8001464 <HAL_DMA_IRQHandler+0xa28>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d022      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6d      	ldr	r2, [pc, #436]	; (8001468 <HAL_DMA_IRQHandler+0xa2c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d01d      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6b      	ldr	r2, [pc, #428]	; (800146c <HAL_DMA_IRQHandler+0xa30>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d018      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6a      	ldr	r2, [pc, #424]	; (8001470 <HAL_DMA_IRQHandler+0xa34>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d013      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_DMA_IRQHandler+0xa38>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00e      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_DMA_IRQHandler+0xa3c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d009      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_DMA_IRQHandler+0xa40>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x8b8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a64      	ldr	r2, [pc, #400]	; (8001480 <HAL_DMA_IRQHandler+0xa44>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d108      	bne.n	8001306 <HAL_DMA_IRQHandler+0x8ca>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e007      	b.n	8001316 <HAL_DMA_IRQHandler+0x8da>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0201 	bic.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131e:	429a      	cmp	r2, r3
 8001320:	d307      	bcc.n	8001332 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f2      	bne.n	8001316 <HAL_DMA_IRQHandler+0x8da>
 8001330:	e000      	b.n	8001334 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001332:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800134a:	e003      	b.n	8001354 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8272 	beq.w	800184a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
 800136e:	e26c      	b.n	800184a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a43      	ldr	r2, [pc, #268]	; (8001484 <HAL_DMA_IRQHandler+0xa48>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d022      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x984>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a42      	ldr	r2, [pc, #264]	; (8001488 <HAL_DMA_IRQHandler+0xa4c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d01d      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x984>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a40      	ldr	r2, [pc, #256]	; (800148c <HAL_DMA_IRQHandler+0xa50>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d018      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x984>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <HAL_DMA_IRQHandler+0xa54>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x984>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a3d      	ldr	r2, [pc, #244]	; (8001494 <HAL_DMA_IRQHandler+0xa58>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00e      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x984>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a3c      	ldr	r2, [pc, #240]	; (8001498 <HAL_DMA_IRQHandler+0xa5c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d009      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x984>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a3a      	ldr	r2, [pc, #232]	; (800149c <HAL_DMA_IRQHandler+0xa60>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d004      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x984>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a39      	ldr	r2, [pc, #228]	; (80014a0 <HAL_DMA_IRQHandler+0xa64>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_DMA_IRQHandler+0x988>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_DMA_IRQHandler+0x98a>
 80013c4:	2300      	movs	r3, #0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 823f 	beq.w	800184a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	2204      	movs	r2, #4
 80013de:	409a      	lsls	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80cd 	beq.w	8001584 <HAL_DMA_IRQHandler+0xb48>
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80c7 	beq.w	8001584 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	2204      	movs	r2, #4
 8001400:	409a      	lsls	r2, r3
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d049      	beq.n	80014a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8210 	beq.w	8001844 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800142c:	e20a      	b.n	8001844 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8206 	beq.w	8001844 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001440:	e200      	b.n	8001844 <HAL_DMA_IRQHandler+0xe08>
 8001442:	bf00      	nop
 8001444:	40020010 	.word	0x40020010
 8001448:	40020028 	.word	0x40020028
 800144c:	40020040 	.word	0x40020040
 8001450:	40020058 	.word	0x40020058
 8001454:	40020070 	.word	0x40020070
 8001458:	40020088 	.word	0x40020088
 800145c:	400200a0 	.word	0x400200a0
 8001460:	400200b8 	.word	0x400200b8
 8001464:	40020410 	.word	0x40020410
 8001468:	40020428 	.word	0x40020428
 800146c:	40020440 	.word	0x40020440
 8001470:	40020458 	.word	0x40020458
 8001474:	40020470 	.word	0x40020470
 8001478:	40020488 	.word	0x40020488
 800147c:	400204a0 	.word	0x400204a0
 8001480:	400204b8 	.word	0x400204b8
 8001484:	58025408 	.word	0x58025408
 8001488:	5802541c 	.word	0x5802541c
 800148c:	58025430 	.word	0x58025430
 8001490:	58025444 	.word	0x58025444
 8001494:	58025458 	.word	0x58025458
 8001498:	5802546c 	.word	0x5802546c
 800149c:	58025480 	.word	0x58025480
 80014a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d160      	bne.n	8001570 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7f      	ldr	r2, [pc, #508]	; (80016b0 <HAL_DMA_IRQHandler+0xc74>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d04a      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a7d      	ldr	r2, [pc, #500]	; (80016b4 <HAL_DMA_IRQHandler+0xc78>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d045      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7c      	ldr	r2, [pc, #496]	; (80016b8 <HAL_DMA_IRQHandler+0xc7c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d040      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a7a      	ldr	r2, [pc, #488]	; (80016bc <HAL_DMA_IRQHandler+0xc80>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d03b      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a79      	ldr	r2, [pc, #484]	; (80016c0 <HAL_DMA_IRQHandler+0xc84>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d036      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a77      	ldr	r2, [pc, #476]	; (80016c4 <HAL_DMA_IRQHandler+0xc88>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d031      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a76      	ldr	r2, [pc, #472]	; (80016c8 <HAL_DMA_IRQHandler+0xc8c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d02c      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a74      	ldr	r2, [pc, #464]	; (80016cc <HAL_DMA_IRQHandler+0xc90>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d027      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a73      	ldr	r2, [pc, #460]	; (80016d0 <HAL_DMA_IRQHandler+0xc94>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a71      	ldr	r2, [pc, #452]	; (80016d4 <HAL_DMA_IRQHandler+0xc98>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01d      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a70      	ldr	r2, [pc, #448]	; (80016d8 <HAL_DMA_IRQHandler+0xc9c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d018      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <HAL_DMA_IRQHandler+0xca0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6d      	ldr	r2, [pc, #436]	; (80016e0 <HAL_DMA_IRQHandler+0xca4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00e      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a6b      	ldr	r2, [pc, #428]	; (80016e4 <HAL_DMA_IRQHandler+0xca8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d009      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <HAL_DMA_IRQHandler+0xcac>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d004      	beq.n	800154e <HAL_DMA_IRQHandler+0xb12>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a68      	ldr	r2, [pc, #416]	; (80016ec <HAL_DMA_IRQHandler+0xcb0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d108      	bne.n	8001560 <HAL_DMA_IRQHandler+0xb24>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0208 	bic.w	r2, r2, #8
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e007      	b.n	8001570 <HAL_DMA_IRQHandler+0xb34>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0204 	bic.w	r2, r2, #4
 800156e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8165 	beq.w	8001844 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001582:	e15f      	b.n	8001844 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2202      	movs	r2, #2
 800158e:	409a      	lsls	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80c5 	beq.w	8001724 <HAL_DMA_IRQHandler+0xce8>
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80bf 	beq.w	8001724 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2202      	movs	r2, #2
 80015b0:	409a      	lsls	r2, r3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d018      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 813a 	beq.w	8001848 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80015dc:	e134      	b.n	8001848 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8130 	beq.w	8001848 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80015f0:	e12a      	b.n	8001848 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 8089 	bne.w	8001710 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <HAL_DMA_IRQHandler+0xc74>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d04a      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <HAL_DMA_IRQHandler+0xc78>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d045      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <HAL_DMA_IRQHandler+0xc7c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d040      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_DMA_IRQHandler+0xc80>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d03b      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <HAL_DMA_IRQHandler+0xc84>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d036      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_DMA_IRQHandler+0xc88>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d031      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <HAL_DMA_IRQHandler+0xc8c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d02c      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_DMA_IRQHandler+0xc90>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d027      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <HAL_DMA_IRQHandler+0xc94>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d022      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_DMA_IRQHandler+0xc98>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01d      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_DMA_IRQHandler+0xc9c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d018      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_DMA_IRQHandler+0xca0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_DMA_IRQHandler+0xca4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00e      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_DMA_IRQHandler+0xca8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d009      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <HAL_DMA_IRQHandler+0xcac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d004      	beq.n	800169e <HAL_DMA_IRQHandler+0xc62>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_DMA_IRQHandler+0xcb0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d128      	bne.n	80016f0 <HAL_DMA_IRQHandler+0xcb4>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0214 	bic.w	r2, r2, #20
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e027      	b.n	8001700 <HAL_DMA_IRQHandler+0xcc4>
 80016b0:	40020010 	.word	0x40020010
 80016b4:	40020028 	.word	0x40020028
 80016b8:	40020040 	.word	0x40020040
 80016bc:	40020058 	.word	0x40020058
 80016c0:	40020070 	.word	0x40020070
 80016c4:	40020088 	.word	0x40020088
 80016c8:	400200a0 	.word	0x400200a0
 80016cc:	400200b8 	.word	0x400200b8
 80016d0:	40020410 	.word	0x40020410
 80016d4:	40020428 	.word	0x40020428
 80016d8:	40020440 	.word	0x40020440
 80016dc:	40020458 	.word	0x40020458
 80016e0:	40020470 	.word	0x40020470
 80016e4:	40020488 	.word	0x40020488
 80016e8:	400204a0 	.word	0x400204a0
 80016ec:	400204b8 	.word	0x400204b8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 020a 	bic.w	r2, r2, #10
 80016fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8097 	beq.w	8001848 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001722:	e091      	b.n	8001848 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2208      	movs	r2, #8
 800172e:	409a      	lsls	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8088 	beq.w	800184a <HAL_DMA_IRQHandler+0xe0e>
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8082 	beq.w	800184a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a41      	ldr	r2, [pc, #260]	; (8001850 <HAL_DMA_IRQHandler+0xe14>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d04a      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a3f      	ldr	r2, [pc, #252]	; (8001854 <HAL_DMA_IRQHandler+0xe18>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d045      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <HAL_DMA_IRQHandler+0xe1c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d040      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a3c      	ldr	r2, [pc, #240]	; (800185c <HAL_DMA_IRQHandler+0xe20>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d03b      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a3b      	ldr	r2, [pc, #236]	; (8001860 <HAL_DMA_IRQHandler+0xe24>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d036      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a39      	ldr	r2, [pc, #228]	; (8001864 <HAL_DMA_IRQHandler+0xe28>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d031      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a38      	ldr	r2, [pc, #224]	; (8001868 <HAL_DMA_IRQHandler+0xe2c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d02c      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_DMA_IRQHandler+0xe30>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d027      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a35      	ldr	r2, [pc, #212]	; (8001870 <HAL_DMA_IRQHandler+0xe34>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a33      	ldr	r2, [pc, #204]	; (8001874 <HAL_DMA_IRQHandler+0xe38>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01d      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a32      	ldr	r2, [pc, #200]	; (8001878 <HAL_DMA_IRQHandler+0xe3c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d018      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a30      	ldr	r2, [pc, #192]	; (800187c <HAL_DMA_IRQHandler+0xe40>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2f      	ldr	r2, [pc, #188]	; (8001880 <HAL_DMA_IRQHandler+0xe44>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00e      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2d      	ldr	r2, [pc, #180]	; (8001884 <HAL_DMA_IRQHandler+0xe48>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <HAL_DMA_IRQHandler+0xe4c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d004      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xdaa>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2a      	ldr	r2, [pc, #168]	; (800188c <HAL_DMA_IRQHandler+0xe50>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d108      	bne.n	80017f8 <HAL_DMA_IRQHandler+0xdbc>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 021c 	bic.w	r2, r2, #28
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e007      	b.n	8001808 <HAL_DMA_IRQHandler+0xdcc>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020e 	bic.w	r2, r2, #14
 8001806:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
 800183e:	e004      	b.n	800184a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8001840:	bf00      	nop
 8001842:	e002      	b.n	800184a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001844:	bf00      	nop
 8001846:	e000      	b.n	800184a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001848:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40020010 	.word	0x40020010
 8001854:	40020028 	.word	0x40020028
 8001858:	40020040 	.word	0x40020040
 800185c:	40020058 	.word	0x40020058
 8001860:	40020070 	.word	0x40020070
 8001864:	40020088 	.word	0x40020088
 8001868:	400200a0 	.word	0x400200a0
 800186c:	400200b8 	.word	0x400200b8
 8001870:	40020410 	.word	0x40020410
 8001874:	40020428 	.word	0x40020428
 8001878:	40020440 	.word	0x40020440
 800187c:	40020458 	.word	0x40020458
 8001880:	40020470 	.word	0x40020470
 8001884:	40020488 	.word	0x40020488
 8001888:	400204a0 	.word	0x400204a0
 800188c:	400204b8 	.word	0x400204b8

08001890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f804 	bl	80018c4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10d      	bne.n	800190c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d106      	bne.n	800190c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f882 	bl	8001a10 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b02      	cmp	r3, #2
 8001918:	d10d      	bne.n	8001936 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b02      	cmp	r3, #2
 8001926:	d106      	bne.n	8001936 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2202      	movs	r2, #2
 800192e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f877 	bl	8001a24 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b04      	cmp	r3, #4
 8001942:	d10d      	bne.n	8001960 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b04      	cmp	r3, #4
 8001950:	d106      	bne.n	8001960 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2204      	movs	r2, #4
 8001958:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f86c 	bl	8001a38 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b08      	cmp	r3, #8
 800196c:	d10d      	bne.n	800198a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b08      	cmp	r3, #8
 800197a:	d106      	bne.n	800198a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f861 	bl	8001a4c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b10      	cmp	r3, #16
 8001996:	d10d      	bne.n	80019b4 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d106      	bne.n	80019b4 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2210      	movs	r2, #16
 80019ac:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f856 	bl	8001a60 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0320 	and.w	r3, r3, #32
 80019be:	2b20      	cmp	r3, #32
 80019c0:	d10d      	bne.n	80019de <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d106      	bne.n	80019de <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2220      	movs	r2, #32
 80019d6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f84b 	bl	8001a74 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e8:	2b40      	cmp	r3, #64	; 0x40
 80019ea:	d10d      	bne.n	8001a08 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b40      	cmp	r3, #64	; 0x40
 80019f8:	d106      	bne.n	8001a08 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2240      	movs	r2, #64	; 0x40
 8001a00:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f840 	bl	8001a88 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_PWREx_ConfigSupply+0x70>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00a      	beq.n	8001ac6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_PWREx_ConfigSupply+0x70>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e01f      	b.n	8001b02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e01d      	b.n	8001b02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_PWREx_ConfigSupply+0x70>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	490f      	ldr	r1, [pc, #60]	; (8001b0c <HAL_PWREx_ConfigSupply+0x70>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ad6:	f7fe fec1 	bl	800085c <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001adc:	e009      	b.n	8001af2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ade:	f7fe febd 	bl	800085c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aec:	d901      	bls.n	8001af2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e007      	b.n	8001b02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_PWREx_ConfigSupply+0x70>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afe:	d1ee      	bne.n	8001ade <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	58024800 	.word	0x58024800

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e39d      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8087 	beq.w	8001c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b30:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b3a:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d007      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46>
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	2b18      	cmp	r3, #24
 8001b4a:	d110      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d10b      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b56:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d06c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x12c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d168      	bne.n	8001c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e377      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x76>
 8001b78:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e02e      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a70      	ldr	r2, [pc, #448]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6d      	ldr	r2, [pc, #436]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e01d      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0xbc>
 8001bb2:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a67      	ldr	r2, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a64      	ldr	r2, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a60      	ldr	r2, [pc, #384]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b5e      	ldr	r3, [pc, #376]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a5d      	ldr	r2, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe fe36 	bl	800085c <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7fe fe32 	bl	800085c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e32b      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe4>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7fe fe22 	bl	800085c <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7fe fe1e 	bl	800085c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e317      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x10c>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 808c 	beq.w	8001d64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_RCC_OscConfig+0x162>
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	2b18      	cmp	r3, #24
 8001c66:	d137      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1c8>
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d132      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x17a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e2e9      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c8a:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0219 	bic.w	r2, r3, #25
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	492f      	ldr	r1, [pc, #188]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c9c:	f7fe fdde 	bl	800085c <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7fe fdda 	bl	800085c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e2d3      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	4920      	ldr	r1, [pc, #128]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd6:	e045      	b.n	8001d64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d026      	beq.n	8001d2e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 0219 	bic.w	r2, r3, #25
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4919      	ldr	r1, [pc, #100]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fdb3 	bl	800085c <HAL_GetTick>
 8001cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7fe fdaf 	bl	800085c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e2a8      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	490b      	ldr	r1, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
 8001d2c:	e01a      	b.n	8001d64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fd8f 	bl	800085c <HAL_GetTick>
 8001d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7fe fd8b 	bl	800085c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d903      	bls.n	8001d58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e284      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
 8001d54:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d58:	4b96      	ldr	r3, [pc, #600]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d06a      	beq.n	8001e46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d70:	4b90      	ldr	r3, [pc, #576]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d7a:	4b8e      	ldr	r3, [pc, #568]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d007      	beq.n	8001d96 <HAL_RCC_OscConfig+0x286>
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b18      	cmp	r3, #24
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2b4>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d96:	4b87      	ldr	r3, [pc, #540]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x29e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e257      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	061b      	lsls	r3, r3, #24
 8001dbc:	497d      	ldr	r1, [pc, #500]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dc2:	e040      	b.n	8001e46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a78      	ldr	r2, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fd40 	bl	800085c <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001de0:	f7fe fd3c 	bl	800085c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e235      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001df2:	4b70      	ldr	r3, [pc, #448]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dfe:	4b6d      	ldr	r3, [pc, #436]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	4969      	ldr	r1, [pc, #420]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60cb      	str	r3, [r1, #12]
 8001e12:	e018      	b.n	8001e46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e14:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a66      	ldr	r2, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe fd1c 	bl	800085c <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e28:	f7fe fd18 	bl	800085c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e211      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d036      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	4a55      	ldr	r2, [pc, #340]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7fe fcf9 	bl	800085c <HAL_GetTick>
 8001e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7fe fcf5 	bl	800085c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e1ee      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x35e>
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	4a48      	ldr	r2, [pc, #288]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fcdf 	bl	800085c <HAL_GetTick>
 8001e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7fe fcdb 	bl	800085c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e1d4      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d036      	beq.n	8001f3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d019      	beq.n	8001f08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a36      	ldr	r2, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001eda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ee0:	f7fe fcbc 	bl	800085c <HAL_GetTick>
 8001ee4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ee8:	f7fe fcb8 	bl	800085c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1b1      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x3d8>
 8001f06:	e018      	b.n	8001f3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fca2 	bl	800085c <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f1c:	f7fe fc9e 	bl	800085c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e197      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8086 	beq.w	8002054 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x4a8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_RCC_OscConfig+0x4a8>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fc82 	bl	800085c <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7fe fc7e 	bl	800085c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e177      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x4a8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d106      	bne.n	8001f90 <HAL_RCC_OscConfig+0x480>
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8e:	e032      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4ac>
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a02      	ldr	r2, [pc, #8]	; (8001fb4 <HAL_RCC_OscConfig+0x4a4>)
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb0:	e021      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e6>
 8001fb2:	bf00      	nop
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58024800 	.word	0x58024800
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x4ce>
 8001fc4:	4b83      	ldr	r3, [pc, #524]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a82      	ldr	r2, [pc, #520]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd0:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e00b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e6>
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a7c      	ldr	r2, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a79      	ldr	r2, [pc, #484]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d015      	beq.n	800202a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffe:	f7fe fc2d 	bl	800085c <HAL_GetTick>
 8002002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7fe fc29 	bl	800085c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e120      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201c:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ee      	beq.n	8002006 <HAL_RCC_OscConfig+0x4f6>
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7fe fc17 	bl	800085c <HAL_GetTick>
 800202e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7fe fc13 	bl	800085c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e10a      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002048:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ee      	bne.n	8002032 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80ff 	beq.w	800225c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002066:	2b18      	cmp	r3, #24
 8002068:	f000 80ba 	beq.w	80021e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2b02      	cmp	r3, #2
 8002072:	f040 8095 	bne.w	80021a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a56      	ldr	r2, [pc, #344]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800207c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fbeb 	bl	800085c <HAL_GetTick>
 8002086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fbe7 	bl	800085c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0e0      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800209c:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80020aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ac:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_RCC_OscConfig+0x6c8>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	430a      	orrs	r2, r1
 80020bc:	4945      	ldr	r1, [pc, #276]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	628b      	str	r3, [r1, #40]	; 0x28
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	3b01      	subs	r3, #1
 80020d2:	025b      	lsls	r3, r3, #9
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	3b01      	subs	r3, #1
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	3b01      	subs	r3, #1
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020f2:	4938      	ldr	r1, [pc, #224]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	4a35      	ldr	r2, [pc, #212]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_OscConfig+0x6cc>)
 800210a:	4013      	ands	r3, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002110:	00d2      	lsls	r2, r2, #3
 8002112:	4930      	ldr	r1, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f023 020c 	bic.w	r2, r3, #12
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	492b      	ldr	r1, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f023 0202 	bic.w	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4927      	ldr	r1, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800214e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800215a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe fb70 	bl	800085c <HAL_GetTick>
 800217c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002180:	f7fe fb6c 	bl	800085c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e065      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x670>
 800219e:	e05d      	b.n	800225c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80021a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fb56 	bl	800085c <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fb52 	bl	800085c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e04b      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021c6:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_RCC_OscConfig+0x6c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x6a4>
 80021d2:	e043      	b.n	800225c <HAL_RCC_OscConfig+0x74c>
 80021d4:	58024400 	.word	0x58024400
 80021d8:	fffffc0c 	.word	0xfffffc0c
 80021dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_OscConfig+0x758>)
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_OscConfig+0x758>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d031      	beq.n	8002258 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0203 	and.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d12a      	bne.n	8002258 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d122      	bne.n	8002258 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d11a      	bne.n	8002258 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	0a5b      	lsrs	r3, r3, #9
 8002226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d111      	bne.n	8002258 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d108      	bne.n	8002258 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	0e1b      	lsrs	r3, r3, #24
 800224a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3730      	adds	r7, #48	; 0x30
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	58024400 	.word	0x58024400

0800226c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e19c      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d910      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b87      	ldr	r3, [pc, #540]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 020f 	bic.w	r2, r3, #15
 8002296:	4985      	ldr	r1, [pc, #532]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b83      	ldr	r3, [pc, #524]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e184      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	4b7b      	ldr	r3, [pc, #492]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d908      	bls.n	80022de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022cc:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4975      	ldr	r1, [pc, #468]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d908      	bls.n	800230c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022fa:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	496a      	ldr	r1, [pc, #424]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002308:	4313      	orrs	r3, r2
 800230a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	4b64      	ldr	r3, [pc, #400]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002324:	429a      	cmp	r2, r3
 8002326:	d908      	bls.n	800233a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002328:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	495e      	ldr	r1, [pc, #376]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002336:	4313      	orrs	r3, r2
 8002338:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002352:	429a      	cmp	r2, r3
 8002354:	d908      	bls.n	8002368 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002356:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4953      	ldr	r1, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002364:	4313      	orrs	r3, r2
 8002366:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d010      	beq.n	8002396 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	429a      	cmp	r2, r3
 8002382:	d908      	bls.n	8002396 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f023 020f 	bic.w	r2, r3, #15
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4947      	ldr	r1, [pc, #284]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002392:	4313      	orrs	r3, r2
 8002394:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d055      	beq.n	800244e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4940      	ldr	r1, [pc, #256]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d121      	bne.n	800240c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0f6      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d115      	bne.n	800240c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0ea      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0de      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d6      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f023 0207 	bic.w	r2, r3, #7
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4925      	ldr	r1, [pc, #148]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800241a:	4313      	orrs	r3, r2
 800241c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe fa1d 	bl	800085c <HAL_GetTick>
 8002422:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002424:	e00a      	b.n	800243c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7fe fa19 	bl	800085c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0be      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	429a      	cmp	r2, r3
 800244c:	d1eb      	bne.n	8002426 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	429a      	cmp	r2, r3
 8002468:	d208      	bcs.n	800247c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f023 020f 	bic.w	r2, r3, #15
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x244>)
 8002478:	4313      	orrs	r3, r2
 800247a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d214      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 020f 	bic.w	r2, r3, #15
 8002492:	4906      	ldr	r1, [pc, #24]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <HAL_RCC_ClockConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e086      	b.n	80025ba <HAL_RCC_ClockConfig+0x34e>
 80024ac:	52002000 	.word	0x52002000
 80024b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d208      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024d0:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	4939      	ldr	r1, [pc, #228]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d208      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	492e      	ldr	r1, [pc, #184]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 800250c:	4313      	orrs	r3, r2
 800250e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d010      	beq.n	800253e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002528:	429a      	cmp	r2, r3
 800252a:	d208      	bcs.n	800253e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4922      	ldr	r1, [pc, #136]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 800253a:	4313      	orrs	r3, r2
 800253c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d010      	beq.n	800256c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002556:	429a      	cmp	r2, r3
 8002558:	d208      	bcs.n	800256c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4917      	ldr	r1, [pc, #92]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 8002568:	4313      	orrs	r3, r2
 800256a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800256c:	f000 f834 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4912      	ldr	r1, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x358>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_RCC_ClockConfig+0x35c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x360>)
 80025a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x364>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_RCC_ClockConfig+0x368>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe f90a 	bl	80007c8 <HAL_InitTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	58024400 	.word	0x58024400
 80025c8:	08003cd8 	.word	0x08003cd8
 80025cc:	24000004 	.word	0x24000004
 80025d0:	24000000 	.word	0x24000000
 80025d4:	24000008 	.word	0x24000008

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025de:	4bb3      	ldr	r3, [pc, #716]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e6:	2b18      	cmp	r3, #24
 80025e8:	f200 8155 	bhi.w	8002896 <HAL_RCC_GetSysClockFreq+0x2be>
 80025ec:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002659 	.word	0x08002659
 80025f8:	08002897 	.word	0x08002897
 80025fc:	08002897 	.word	0x08002897
 8002600:	08002897 	.word	0x08002897
 8002604:	08002897 	.word	0x08002897
 8002608:	08002897 	.word	0x08002897
 800260c:	08002897 	.word	0x08002897
 8002610:	08002897 	.word	0x08002897
 8002614:	0800267f 	.word	0x0800267f
 8002618:	08002897 	.word	0x08002897
 800261c:	08002897 	.word	0x08002897
 8002620:	08002897 	.word	0x08002897
 8002624:	08002897 	.word	0x08002897
 8002628:	08002897 	.word	0x08002897
 800262c:	08002897 	.word	0x08002897
 8002630:	08002897 	.word	0x08002897
 8002634:	08002685 	.word	0x08002685
 8002638:	08002897 	.word	0x08002897
 800263c:	08002897 	.word	0x08002897
 8002640:	08002897 	.word	0x08002897
 8002644:	08002897 	.word	0x08002897
 8002648:	08002897 	.word	0x08002897
 800264c:	08002897 	.word	0x08002897
 8002650:	08002897 	.word	0x08002897
 8002654:	0800268b 	.word	0x0800268b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002658:	4b94      	ldr	r3, [pc, #592]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002664:	4b91      	ldr	r3, [pc, #580]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	08db      	lsrs	r3, r3, #3
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	4a90      	ldr	r2, [pc, #576]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002676:	e111      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002678:	4b8d      	ldr	r3, [pc, #564]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800267a:	61bb      	str	r3, [r7, #24]
    break;
 800267c:	e10e      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800267e:	4b8d      	ldr	r3, [pc, #564]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002680:	61bb      	str	r3, [r7, #24]
    break;
 8002682:	e10b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002684:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002686:	61bb      	str	r3, [r7, #24]
    break;
 8002688:	e108      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800268a:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002694:	4b85      	ldr	r3, [pc, #532]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800269e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026a0:	4b82      	ldr	r3, [pc, #520]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026aa:	4b80      	ldr	r3, [pc, #512]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80e1 	beq.w	8002890 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	f000 8083 	beq.w	80027dc <HAL_RCC_GetSysClockFreq+0x204>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	f200 80a1 	bhi.w	8002820 <HAL_RCC_GetSysClockFreq+0x248>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x114>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d056      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026ea:	e099      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026ec:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02d      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026f8:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	08db      	lsrs	r3, r3, #3
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	4a6b      	ldr	r2, [pc, #428]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
 8002708:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002722:	4b62      	ldr	r3, [pc, #392]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002732:	ed97 6a02 	vldr	s12, [r7, #8]
 8002736:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800273a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800273e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002752:	e087      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002766:	4b51      	ldr	r3, [pc, #324]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002776:	ed97 6a02 	vldr	s12, [r7, #8]
 800277a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800277e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800278a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002796:	e065      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80027be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80027c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027da:	e043      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ee:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002802:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800280a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800280e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800281e:	e021      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800282e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002842:	ed97 6a02 	vldr	s12, [r7, #8]
 8002846:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800284a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800284e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002862:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	0a5b      	lsrs	r3, r3, #9
 800286a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800286e:	3301      	adds	r3, #1
 8002870:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800287c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002888:	ee17 3a90 	vmov	r3, s15
 800288c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800288e:	e005      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
    break;
 8002894:	e002      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002898:	61bb      	str	r3, [r7, #24]
    break;
 800289a:	bf00      	nop
  }

  return sysclockfreq;
 800289c:	69bb      	ldr	r3, [r7, #24]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	58024400 	.word	0x58024400
 80028b0:	03d09000 	.word	0x03d09000
 80028b4:	003d0900 	.word	0x003d0900
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	46000000 	.word	0x46000000
 80028c0:	4c742400 	.word	0x4c742400
 80028c4:	4a742400 	.word	0x4a742400
 80028c8:	4af42400 	.word	0x4af42400

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d4:	2300      	movs	r3, #0
 80028d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d8:	2300      	movs	r3, #0
 80028da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03f      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028f0:	d02a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028f6:	d824      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028fc:	d018      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002902:	d81e      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290c:	d007      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800290e:	e018      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4ba4      	ldr	r3, [pc, #656]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4aa3      	ldr	r2, [pc, #652]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800291c:	e015      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fecb 	bl	80036c0 <RCCEx_PLL2_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800292e:	e00c      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 ff74 	bl	8003824 <RCCEx_PLL3_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002940:	e003      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
      break;
 8002946:	e000      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002950:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295c:	4991      	ldr	r1, [pc, #580]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	650b      	str	r3, [r1, #80]	; 0x50
 8002962:	e001      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d03d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2b04      	cmp	r3, #4
 800297a:	d826      	bhi.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	08002999 	.word	0x08002999
 8002988:	080029a7 	.word	0x080029a7
 800298c:	080029b9 	.word	0x080029b9
 8002990:	080029d1 	.word	0x080029d1
 8002994:	080029d1 	.word	0x080029d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002998:	4b82      	ldr	r3, [pc, #520]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800299e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029a4:	e015      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fe87 	bl	80036c0 <RCCEx_PLL2_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b6:	e00c      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3324      	adds	r3, #36	; 0x24
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 ff30 	bl	8003824 <RCCEx_PLL3_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029c8:	e003      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
      break;
 80029ce:	e000      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d8:	4b72      	ldr	r3, [pc, #456]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	f023 0207 	bic.w	r2, r3, #7
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	496f      	ldr	r1, [pc, #444]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	650b      	str	r3, [r1, #80]	; 0x50
 80029ea:	e001      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d051      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a02:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002a06:	d036      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a08:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002a0c:	d830      	bhi.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a12:	d032      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a18:	d82a      	bhi.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002a1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a1e:	d02e      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002a20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a24:	d824      	bhi.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2a:	d018      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d81e      	bhi.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002a36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3a:	d007      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002a3c:	e018      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3e:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a4a:	e019      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fe34 	bl	80036c0 <RCCEx_PLL2_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a5c:	e010      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3324      	adds	r3, #36	; 0x24
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fedd 	bl	8003824 <RCCEx_PLL3_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a6e:	e007      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	75fb      	strb	r3, [r7, #23]
      break;
 8002a74:	e004      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a94:	4943      	ldr	r1, [pc, #268]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	658b      	str	r3, [r1, #88]	; 0x58
 8002a9a:	e001      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d051      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ab2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002ab6:	d036      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002ab8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002abc:	d830      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac2:	d032      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac8:	d82a      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002aca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ace:	d02e      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002ad0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ad4:	d824      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ada:	d018      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ae0:	d81e      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002ae6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aea:	d007      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002aec:	e018      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	4a2c      	ldr	r2, [pc, #176]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002afa:	e019      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fddc 	bl	80036c0 <RCCEx_PLL2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b0c:	e010      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3324      	adds	r3, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fe85 	bl	8003824 <RCCEx_PLL3_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b1e:	e007      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	75fb      	strb	r3, [r7, #23]
      break;
 8002b24:	e004      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002b26:	bf00      	nop
 8002b28:	e002      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e000      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b44:	4917      	ldr	r1, [pc, #92]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	658b      	str	r3, [r1, #88]	; 0x58
 8002b4a:	e001      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d035      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	2b30      	cmp	r3, #48	; 0x30
 8002b62:	d01c      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b64:	2b30      	cmp	r3, #48	; 0x30
 8002b66:	d817      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d00c      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d813      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d019      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d10f      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002b84:	e011      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fd97 	bl	80036c0 <RCCEx_PLL2_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002b96:	e008      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b9c:	e005      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e003      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002ba2:	bf00      	nop
 8002ba4:	58024400 	.word	0x58024400
      break;
 8002ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002bb0:	4ba3      	ldr	r3, [pc, #652]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	49a0      	ldr	r1, [pc, #640]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002bc2:	e001      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d047      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bdc:	d030      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8002bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be2:	d82a      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002be4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be8:	d02c      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002bea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bee:	d824      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf4:	d018      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfa:	d81e      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c04:	d007      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c06:	e018      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c08:	4b8d      	ldr	r3, [pc, #564]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	4a8c      	ldr	r2, [pc, #560]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c14:	e017      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fd4f 	bl	80036c0 <RCCEx_PLL2_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c26:	e00e      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fdf8 	bl	8003824 <RCCEx_PLL3_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c38:	e005      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c4c:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c50:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4979      	ldr	r1, [pc, #484]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c5e:	e001      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d049      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c78:	d02e      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8002c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7e:	d828      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c84:	d02a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002c86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c8a:	d822      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002c8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c90:	d026      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002c92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c96:	d81c      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca2:	d816      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d111      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fd03 	bl	80036c0 <RCCEx_PLL2_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cbe:	e012      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fdac 	bl	8003824 <RCCEx_PLL3_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cd0:	e009      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd6:	e006      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e004      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002cdc:	bf00      	nop
 8002cde:	e002      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002ce0:	bf00      	nop
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cec:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	4951      	ldr	r1, [pc, #324]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	650b      	str	r3, [r1, #80]	; 0x50
 8002cfe:	e001      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d04b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d1a:	d02e      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d20:	d828      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d02a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d822      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002d2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d32:	d026      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002d34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d38:	d81c      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d3e:	d010      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d44:	d816      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01d      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fcb2 	bl	80036c0 <RCCEx_PLL2_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d60:	e012      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3324      	adds	r3, #36	; 0x24
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fd5b 	bl	8003824 <RCCEx_PLL3_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d72:	e009      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
      break;
 8002d78:	e006      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e004      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e002      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002d82:	bf00      	nop
 8002d84:	e000      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d9c:	4928      	ldr	r1, [pc, #160]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	658b      	str	r3, [r1, #88]	; 0x58
 8002da2:	e001      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d02f      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbc:	d00e      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc2:	d814      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d015      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dcc:	d10f      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dda:	e00c      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc6c 	bl	80036c0 <RCCEx_PLL2_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dec:	e003      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
      break;
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8002df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dfc:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e08:	490d      	ldr	r1, [pc, #52]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e0e:	e001      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d034      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d81d      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e6b 	.word	0x08002e6b
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e53 	.word	0x08002e53
 8002e3c:	08002e6b 	.word	0x08002e6b
 8002e40:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e44:	4bb1      	ldr	r3, [pc, #708]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4ab0      	ldr	r2, [pc, #704]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2102      	movs	r1, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fc31 	bl	80036c0 <RCCEx_PLL2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	75fb      	strb	r3, [r7, #23]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8002e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e72:	4ba6      	ldr	r3, [pc, #664]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	49a3      	ldr	r1, [pc, #652]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e84:	e001      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8086 	beq.w	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e98:	4b9d      	ldr	r3, [pc, #628]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a9c      	ldr	r2, [pc, #624]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea4:	f7fd fcda 	bl	800085c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fd fcd6 	bl	800085c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d902      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	75fb      	strb	r3, [r7, #23]
        break;
 8002ebe:	e005      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ec0:	4b93      	ldr	r3, [pc, #588]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ef      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d166      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ed2:	4b8e      	ldr	r3, [pc, #568]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002edc:	4053      	eors	r3, r2
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d013      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee6:	4b89      	ldr	r3, [pc, #548]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ef0:	4b86      	ldr	r3, [pc, #536]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a85      	ldr	r2, [pc, #532]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002efc:	4b83      	ldr	r3, [pc, #524]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a82      	ldr	r2, [pc, #520]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f08:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f18:	d115      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fd fc9f 	bl	800085c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f20:	e00b      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fd fc9b 	bl	800085c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d902      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	75fb      	strb	r3, [r7, #23]
            break;
 8002f38:	e005      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ed      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d126      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f5a:	d10d      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002f5c:	4b6b      	ldr	r3, [pc, #428]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f6a:	0919      	lsrs	r1, r3, #4
 8002f6c:	4b69      	ldr	r3, [pc, #420]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	4966      	ldr	r1, [pc, #408]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]
 8002f76:	e005      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002f78:	4b64      	ldr	r3, [pc, #400]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	4a63      	ldr	r2, [pc, #396]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f82:	6113      	str	r3, [r2, #16]
 8002f84:	4b61      	ldr	r3, [pc, #388]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	495e      	ldr	r1, [pc, #376]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	670b      	str	r3, [r1, #112]	; 0x70
 8002f98:	e004      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	75bb      	strb	r3, [r7, #22]
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d07e      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	2b28      	cmp	r3, #40	; 0x28
 8002fb6:	d867      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	0800308f 	.word	0x0800308f
 8002fc4:	08003089 	.word	0x08003089
 8002fc8:	08003089 	.word	0x08003089
 8002fcc:	08003089 	.word	0x08003089
 8002fd0:	08003089 	.word	0x08003089
 8002fd4:	08003089 	.word	0x08003089
 8002fd8:	08003089 	.word	0x08003089
 8002fdc:	08003089 	.word	0x08003089
 8002fe0:	08003065 	.word	0x08003065
 8002fe4:	08003089 	.word	0x08003089
 8002fe8:	08003089 	.word	0x08003089
 8002fec:	08003089 	.word	0x08003089
 8002ff0:	08003089 	.word	0x08003089
 8002ff4:	08003089 	.word	0x08003089
 8002ff8:	08003089 	.word	0x08003089
 8002ffc:	08003089 	.word	0x08003089
 8003000:	08003077 	.word	0x08003077
 8003004:	08003089 	.word	0x08003089
 8003008:	08003089 	.word	0x08003089
 800300c:	08003089 	.word	0x08003089
 8003010:	08003089 	.word	0x08003089
 8003014:	08003089 	.word	0x08003089
 8003018:	08003089 	.word	0x08003089
 800301c:	08003089 	.word	0x08003089
 8003020:	0800308f 	.word	0x0800308f
 8003024:	08003089 	.word	0x08003089
 8003028:	08003089 	.word	0x08003089
 800302c:	08003089 	.word	0x08003089
 8003030:	08003089 	.word	0x08003089
 8003034:	08003089 	.word	0x08003089
 8003038:	08003089 	.word	0x08003089
 800303c:	08003089 	.word	0x08003089
 8003040:	0800308f 	.word	0x0800308f
 8003044:	08003089 	.word	0x08003089
 8003048:	08003089 	.word	0x08003089
 800304c:	08003089 	.word	0x08003089
 8003050:	08003089 	.word	0x08003089
 8003054:	08003089 	.word	0x08003089
 8003058:	08003089 	.word	0x08003089
 800305c:	08003089 	.word	0x08003089
 8003060:	0800308f 	.word	0x0800308f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fb28 	bl	80036c0 <RCCEx_PLL2_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003074:	e00c      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3324      	adds	r3, #36	; 0x24
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fbd1 	bl	8003824 <RCCEx_PLL3_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      break;
 800308c:	e000      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800308e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	491a      	ldr	r1, [pc, #104]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	654b      	str	r3, [r1, #84]	; 0x54
 80030a8:	e001      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d03e      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d820      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	08003119 	.word	0x08003119
 80030cc:	080030e1 	.word	0x080030e1
 80030d0:	080030f3 	.word	0x080030f3
 80030d4:	08003119 	.word	0x08003119
 80030d8:	08003119 	.word	0x08003119
 80030dc:	08003119 	.word	0x08003119
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 faea 	bl	80036c0 <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030f0:	e013      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3324      	adds	r3, #36	; 0x24
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fb93 	bl	8003824 <RCCEx_PLL3_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003102:	e00a      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
      break;
 8003108:	e007      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800310a:	bf00      	nop
 800310c:	58024400 	.word	0x58024400
 8003110:	58024800 	.word	0x58024800
 8003114:	00ffffcf 	.word	0x00ffffcf
      break;
 8003118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003120:	4b9f      	ldr	r3, [pc, #636]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f023 0207 	bic.w	r2, r3, #7
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	499c      	ldr	r1, [pc, #624]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	654b      	str	r3, [r1, #84]	; 0x54
 8003132:	e001      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d039      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800314a:	2b05      	cmp	r3, #5
 800314c:	d820      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003197 	.word	0x08003197
 8003158:	0800316d 	.word	0x0800316d
 800315c:	0800317f 	.word	0x0800317f
 8003160:	08003197 	.word	0x08003197
 8003164:	08003197 	.word	0x08003197
 8003168:	08003197 	.word	0x08003197
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f000 faa4 	bl	80036c0 <RCCEx_PLL2_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800317c:	e00c      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3324      	adds	r3, #36	; 0x24
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fb4d 	bl	8003824 <RCCEx_PLL3_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800318e:	e003      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319e:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	f023 0207 	bic.w	r2, r3, #7
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ac:	497c      	ldr	r1, [pc, #496]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	658b      	str	r3, [r1, #88]	; 0x58
 80031b2:	e001      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d04b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ce:	d02e      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x962>
 80031d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d4:	d828      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d02a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e0:	d822      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80031e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031e6:	d026      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80031e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ec:	d81c      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80031ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f2:	d010      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80031f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f8:	d816      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01d      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80031fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003202:	d111      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa58 	bl	80036c0 <RCCEx_PLL2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003214:	e012      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3324      	adds	r3, #36	; 0x24
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fb01 	bl	8003824 <RCCEx_PLL3_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003226:	e009      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
      break;
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800323a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003242:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	4953      	ldr	r1, [pc, #332]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	654b      	str	r3, [r1, #84]	; 0x54
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d04b      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003272:	d02e      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003274:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003278:	d828      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327e:	d02a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d822      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328a:	d026      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800328c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003290:	d81c      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003296:	d010      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329c:	d816      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01d      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d111      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fa06 	bl	80036c0 <RCCEx_PLL2_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032b8:	e012      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3324      	adds	r3, #36	; 0x24
 80032be:	2102      	movs	r1, #2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 faaf 	bl	8003824 <RCCEx_PLL3_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032ca:	e009      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
      break;
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80032d2:	bf00      	nop
 80032d4:	e004      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80032de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	492a      	ldr	r1, [pc, #168]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	658b      	str	r3, [r1, #88]	; 0x58
 80032fa:	e001      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d04d      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003312:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003316:	d02e      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003318:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800331c:	d828      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003322:	d02a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003328:	d822      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800332a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800332e:	d026      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003330:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003334:	d81c      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333a:	d010      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800333c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003340:	d816      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01d      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d111      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f9b4 	bl	80036c0 <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800335c:	e012      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3324      	adds	r3, #36	; 0x24
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fa5d 	bl	8003824 <RCCEx_PLL3_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800336e:	e009      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
      break;
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003376:	bf00      	nop
 8003378:	e004      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003398:	4901      	ldr	r1, [pc, #4]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	658b      	str	r3, [r1, #88]	; 0x58
 800339e:	e003      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80033a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d018      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d10a      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3324      	adds	r3, #36	; 0x24
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fa2d 	bl	8003824 <RCCEx_PLL3_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80033d4:	4b8a      	ldr	r3, [pc, #552]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e0:	4987      	ldr	r1, [pc, #540]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fc:	d10a      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3324      	adds	r3, #36	; 0x24
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fa0d 	bl	8003824 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003414:	4b7a      	ldr	r3, [pc, #488]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	4977      	ldr	r1, [pc, #476]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003424:	4313      	orrs	r3, r2
 8003426:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d034      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800343e:	d01d      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003444:	d817      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d009      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003450:	e011      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f931 	bl	80036c0 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003462:	e00c      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3324      	adds	r3, #36	; 0x24
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f9da 	bl	8003824 <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
      break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800347c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003484:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003492:	495b      	ldr	r1, [pc, #364]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003494:	4313      	orrs	r3, r2
 8003496:	658b      	str	r3, [r1, #88]	; 0x58
 8003498:	e001      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d033      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b4:	d01c      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80034b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ba:	d816      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80034bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c0:	d003      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80034c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c6:	d007      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80034c8:	e00f      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	4a4c      	ldr	r2, [pc, #304]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80034d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80034d6:	e00c      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3324      	adds	r3, #36	; 0x24
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f9a0 	bl	8003824 <RCCEx_PLL3_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
      break;
 80034ee:	e000      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80034f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f8:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003506:	493e      	ldr	r1, [pc, #248]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003508:	4313      	orrs	r3, r2
 800350a:	654b      	str	r3, [r1, #84]	; 0x54
 800350c:	e001      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d029      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d007      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800352c:	e00f      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	4a33      	ldr	r2, [pc, #204]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800353a:	e00b      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f8bc 	bl	80036c0 <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800354c:	e002      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
      break;
 8003552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800355a:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	4926      	ldr	r1, [pc, #152]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003568:	4313      	orrs	r3, r2
 800356a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800356c:	e001      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3324      	adds	r3, #36	; 0x24
 8003582:	2102      	movs	r1, #2
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f94d 	bl	8003824 <RCCEx_PLL3_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d033      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a8:	d017      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80035aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ae:	d811      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80035b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b4:	d013      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80035b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ba:	d80b      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d106      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80035d2:	e007      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
      break;
 80035d8:	e004      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80035da:	bf00      	nop
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80035e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f6:	4902      	ldr	r1, [pc, #8]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	654b      	str	r3, [r1, #84]	; 0x54
 80035fc:	e004      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003620:	4926      	ldr	r1, [pc, #152]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003632:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363e:	491f      	ldr	r1, [pc, #124]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003656:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800365a:	6113      	str	r3, [r2, #16]
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003666:	4915      	ldr	r1, [pc, #84]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	da08      	bge.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	490e      	ldr	r1, [pc, #56]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003682:	4313      	orrs	r3, r2
 8003684:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a0:	4906      	ldr	r1, [pc, #24]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80036a6:	7dbb      	ldrb	r3, [r7, #22]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400

080036c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036ce:	4b53      	ldr	r3, [pc, #332]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d101      	bne.n	80036de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e099      	b.n	8003812 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80036de:	4b4f      	ldr	r3, [pc, #316]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4e      	ldr	r2, [pc, #312]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80036e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ea:	f7fd f8b7 	bl	800085c <HAL_GetTick>
 80036ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036f0:	e008      	b.n	8003704 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036f2:	f7fd f8b3 	bl	800085c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e086      	b.n	8003812 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003704:	4b45      	ldr	r3, [pc, #276]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	493f      	ldr	r1, [pc, #252]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003720:	4313      	orrs	r3, r2
 8003722:	628b      	str	r3, [r1, #40]	; 0x28
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	3b01      	subs	r3, #1
 800372a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	3b01      	subs	r3, #1
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	b29b      	uxth	r3, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	3b01      	subs	r3, #1
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003754:	4931      	ldr	r1, [pc, #196]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003756:	4313      	orrs	r3, r2
 8003758:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	492d      	ldr	r1, [pc, #180]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003768:	4313      	orrs	r3, r2
 800376a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f023 0220 	bic.w	r2, r3, #32
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4928      	ldr	r1, [pc, #160]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 800377a:	4313      	orrs	r3, r2
 800377c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a26      	ldr	r2, [pc, #152]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003784:	f023 0310 	bic.w	r3, r3, #16
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 800378c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <RCCEx_PLL2_Config+0x160>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	69d2      	ldr	r2, [r2, #28]
 8003796:	00d2      	lsls	r2, r2, #3
 8003798:	4920      	ldr	r1, [pc, #128]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037a4:	f043 0310 	orr.w	r3, r3, #16
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037bc:	e00f      	b.n	80037de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d106      	bne.n	80037d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037d0:	e005      	b.n	80037de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	4a11      	ldr	r2, [pc, #68]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a0e      	ldr	r2, [pc, #56]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 80037e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ea:	f7fd f837 	bl	800085c <HAL_GetTick>
 80037ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037f0:	e008      	b.n	8003804 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80037f2:	f7fd f833 	bl	800085c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e006      	b.n	8003812 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <RCCEx_PLL2_Config+0x15c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	58024400 	.word	0x58024400
 8003820:	ffff0007 	.word	0xffff0007

08003824 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003832:	4b53      	ldr	r3, [pc, #332]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b03      	cmp	r3, #3
 800383c:	d101      	bne.n	8003842 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e099      	b.n	8003976 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003842:	4b4f      	ldr	r3, [pc, #316]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4e      	ldr	r2, [pc, #312]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384e:	f7fd f805 	bl	800085c <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003854:	e008      	b.n	8003868 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003856:	f7fd f801 	bl	800085c <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e086      	b.n	8003976 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003868:	4b45      	ldr	r3, [pc, #276]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003874:	4b42      	ldr	r3, [pc, #264]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	051b      	lsls	r3, r3, #20
 8003882:	493f      	ldr	r1, [pc, #252]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	628b      	str	r3, [r1, #40]	; 0x28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	3b01      	subs	r3, #1
 800388e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	3b01      	subs	r3, #1
 8003898:	025b      	lsls	r3, r3, #9
 800389a:	b29b      	uxth	r3, r3
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	061b      	lsls	r3, r3, #24
 80038b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038b8:	4931      	ldr	r1, [pc, #196]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80038be:	4b30      	ldr	r3, [pc, #192]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	492d      	ldr	r1, [pc, #180]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4928      	ldr	r1, [pc, #160]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	4a26      	ldr	r2, [pc, #152]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <RCCEx_PLL3_Config+0x160>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	69d2      	ldr	r2, [r2, #28]
 80038fa:	00d2      	lsls	r2, r2, #3
 80038fc:	4920      	ldr	r1, [pc, #128]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 800391a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800391e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003920:	e00f      	b.n	8003942 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003928:	4b15      	ldr	r3, [pc, #84]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 800392e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003932:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003934:	e005      	b.n	8003942 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	4a11      	ldr	r2, [pc, #68]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 800393c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003940:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394e:	f7fc ff85 	bl	800085c <HAL_GetTick>
 8003952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003954:	e008      	b.n	8003968 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003956:	f7fc ff81 	bl	800085c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <RCCEx_PLL3_Config+0x15c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	58024400 	.word	0x58024400
 8003984:	ffff0007 	.word	0xffff0007

08003988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0202 	mvn.w	r2, #2
 80039b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f90f 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f901 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f912 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0204 	mvn.w	r2, #4
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8e5 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8d7 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f8e8 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d122      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d11b      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0208 	mvn.w	r2, #8
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2204      	movs	r2, #4
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f8bb 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f8ad 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f8be 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0210 	mvn.w	r2, #16
 8003ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f891 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f883 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f894 	bl	8003c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0201 	mvn.w	r2, #1
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f85d 	bl	8003bc6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d10e      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d107      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f883 	bl	8003c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b46:	d10e      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f876 	bl	8003c52 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d10e      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d107      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f842 	bl	8003c16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d10e      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d107      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f06f 0220 	mvn.w	r2, #32
 8003bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f836 	bl	8003c2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ca0 <__libc_init_array+0x38>)
 8003c6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ca4 <__libc_init_array+0x3c>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	2600      	movs	r6, #0
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	4d0b      	ldr	r5, [pc, #44]	; (8003ca8 <__libc_init_array+0x40>)
 8003c7a:	4c0c      	ldr	r4, [pc, #48]	; (8003cac <__libc_init_array+0x44>)
 8003c7c:	f000 f820 	bl	8003cc0 <_init>
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	2600      	movs	r6, #0
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08003ce8 	.word	0x08003ce8
 8003ca4:	08003ce8 	.word	0x08003ce8
 8003ca8:	08003ce8 	.word	0x08003ce8
 8003cac:	08003cec 	.word	0x08003cec

08003cb0 <memset>:
 8003cb0:	4402      	add	r2, r0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d100      	bne.n	8003cba <memset+0xa>
 8003cb8:	4770      	bx	lr
 8003cba:	f803 1b01 	strb.w	r1, [r3], #1
 8003cbe:	e7f9      	b.n	8003cb4 <memset+0x4>

08003cc0 <_init>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr

08003ccc <_fini>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr
